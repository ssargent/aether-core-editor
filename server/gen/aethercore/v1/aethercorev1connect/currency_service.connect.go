// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: aethercore/v1/currency_service.proto

package aethercorev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ssargent/aether-core-editor/gen/aethercore/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CurrencyServiceName is the fully-qualified name of the CurrencyService service.
	CurrencyServiceName = "aethercore.v1.CurrencyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CurrencyServiceCreateCurrencyProcedure is the fully-qualified name of the CurrencyService's
	// CreateCurrency RPC.
	CurrencyServiceCreateCurrencyProcedure = "/aethercore.v1.CurrencyService/CreateCurrency"
	// CurrencyServiceGetCurrencyProcedure is the fully-qualified name of the CurrencyService's
	// GetCurrency RPC.
	CurrencyServiceGetCurrencyProcedure = "/aethercore.v1.CurrencyService/GetCurrency"
	// CurrencyServiceUpdateCurrencyProcedure is the fully-qualified name of the CurrencyService's
	// UpdateCurrency RPC.
	CurrencyServiceUpdateCurrencyProcedure = "/aethercore.v1.CurrencyService/UpdateCurrency"
	// CurrencyServiceDeleteCurrencyProcedure is the fully-qualified name of the CurrencyService's
	// DeleteCurrency RPC.
	CurrencyServiceDeleteCurrencyProcedure = "/aethercore.v1.CurrencyService/DeleteCurrency"
	// CurrencyServiceListCurrenciesProcedure is the fully-qualified name of the CurrencyService's
	// ListCurrencies RPC.
	CurrencyServiceListCurrenciesProcedure = "/aethercore.v1.CurrencyService/ListCurrencies"
)

// CurrencyServiceClient is a client for the aethercore.v1.CurrencyService service.
type CurrencyServiceClient interface {
	CreateCurrency(context.Context, *connect.Request[v1.CreateCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error)
	GetCurrency(context.Context, *connect.Request[v1.GetCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error)
	UpdateCurrency(context.Context, *connect.Request[v1.UpdateCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error)
	DeleteCurrency(context.Context, *connect.Request[v1.DeleteCurrencyRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListCurrencies(context.Context, *connect.Request[v1.ListCurrenciesRequest]) (*connect.Response[v1.ListCurrenciesResponse], error)
}

// NewCurrencyServiceClient constructs a client for the aethercore.v1.CurrencyService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCurrencyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CurrencyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	currencyServiceMethods := v1.File_aethercore_v1_currency_service_proto.Services().ByName("CurrencyService").Methods()
	return &currencyServiceClient{
		createCurrency: connect.NewClient[v1.CreateCurrencyRequest, v1.CurrencyResponse](
			httpClient,
			baseURL+CurrencyServiceCreateCurrencyProcedure,
			connect.WithSchema(currencyServiceMethods.ByName("CreateCurrency")),
			connect.WithClientOptions(opts...),
		),
		getCurrency: connect.NewClient[v1.GetCurrencyRequest, v1.CurrencyResponse](
			httpClient,
			baseURL+CurrencyServiceGetCurrencyProcedure,
			connect.WithSchema(currencyServiceMethods.ByName("GetCurrency")),
			connect.WithClientOptions(opts...),
		),
		updateCurrency: connect.NewClient[v1.UpdateCurrencyRequest, v1.CurrencyResponse](
			httpClient,
			baseURL+CurrencyServiceUpdateCurrencyProcedure,
			connect.WithSchema(currencyServiceMethods.ByName("UpdateCurrency")),
			connect.WithClientOptions(opts...),
		),
		deleteCurrency: connect.NewClient[v1.DeleteCurrencyRequest, v1.DeleteResponse](
			httpClient,
			baseURL+CurrencyServiceDeleteCurrencyProcedure,
			connect.WithSchema(currencyServiceMethods.ByName("DeleteCurrency")),
			connect.WithClientOptions(opts...),
		),
		listCurrencies: connect.NewClient[v1.ListCurrenciesRequest, v1.ListCurrenciesResponse](
			httpClient,
			baseURL+CurrencyServiceListCurrenciesProcedure,
			connect.WithSchema(currencyServiceMethods.ByName("ListCurrencies")),
			connect.WithClientOptions(opts...),
		),
	}
}

// currencyServiceClient implements CurrencyServiceClient.
type currencyServiceClient struct {
	createCurrency *connect.Client[v1.CreateCurrencyRequest, v1.CurrencyResponse]
	getCurrency    *connect.Client[v1.GetCurrencyRequest, v1.CurrencyResponse]
	updateCurrency *connect.Client[v1.UpdateCurrencyRequest, v1.CurrencyResponse]
	deleteCurrency *connect.Client[v1.DeleteCurrencyRequest, v1.DeleteResponse]
	listCurrencies *connect.Client[v1.ListCurrenciesRequest, v1.ListCurrenciesResponse]
}

// CreateCurrency calls aethercore.v1.CurrencyService.CreateCurrency.
func (c *currencyServiceClient) CreateCurrency(ctx context.Context, req *connect.Request[v1.CreateCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error) {
	return c.createCurrency.CallUnary(ctx, req)
}

// GetCurrency calls aethercore.v1.CurrencyService.GetCurrency.
func (c *currencyServiceClient) GetCurrency(ctx context.Context, req *connect.Request[v1.GetCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error) {
	return c.getCurrency.CallUnary(ctx, req)
}

// UpdateCurrency calls aethercore.v1.CurrencyService.UpdateCurrency.
func (c *currencyServiceClient) UpdateCurrency(ctx context.Context, req *connect.Request[v1.UpdateCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error) {
	return c.updateCurrency.CallUnary(ctx, req)
}

// DeleteCurrency calls aethercore.v1.CurrencyService.DeleteCurrency.
func (c *currencyServiceClient) DeleteCurrency(ctx context.Context, req *connect.Request[v1.DeleteCurrencyRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.deleteCurrency.CallUnary(ctx, req)
}

// ListCurrencies calls aethercore.v1.CurrencyService.ListCurrencies.
func (c *currencyServiceClient) ListCurrencies(ctx context.Context, req *connect.Request[v1.ListCurrenciesRequest]) (*connect.Response[v1.ListCurrenciesResponse], error) {
	return c.listCurrencies.CallUnary(ctx, req)
}

// CurrencyServiceHandler is an implementation of the aethercore.v1.CurrencyService service.
type CurrencyServiceHandler interface {
	CreateCurrency(context.Context, *connect.Request[v1.CreateCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error)
	GetCurrency(context.Context, *connect.Request[v1.GetCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error)
	UpdateCurrency(context.Context, *connect.Request[v1.UpdateCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error)
	DeleteCurrency(context.Context, *connect.Request[v1.DeleteCurrencyRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListCurrencies(context.Context, *connect.Request[v1.ListCurrenciesRequest]) (*connect.Response[v1.ListCurrenciesResponse], error)
}

// NewCurrencyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCurrencyServiceHandler(svc CurrencyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	currencyServiceMethods := v1.File_aethercore_v1_currency_service_proto.Services().ByName("CurrencyService").Methods()
	currencyServiceCreateCurrencyHandler := connect.NewUnaryHandler(
		CurrencyServiceCreateCurrencyProcedure,
		svc.CreateCurrency,
		connect.WithSchema(currencyServiceMethods.ByName("CreateCurrency")),
		connect.WithHandlerOptions(opts...),
	)
	currencyServiceGetCurrencyHandler := connect.NewUnaryHandler(
		CurrencyServiceGetCurrencyProcedure,
		svc.GetCurrency,
		connect.WithSchema(currencyServiceMethods.ByName("GetCurrency")),
		connect.WithHandlerOptions(opts...),
	)
	currencyServiceUpdateCurrencyHandler := connect.NewUnaryHandler(
		CurrencyServiceUpdateCurrencyProcedure,
		svc.UpdateCurrency,
		connect.WithSchema(currencyServiceMethods.ByName("UpdateCurrency")),
		connect.WithHandlerOptions(opts...),
	)
	currencyServiceDeleteCurrencyHandler := connect.NewUnaryHandler(
		CurrencyServiceDeleteCurrencyProcedure,
		svc.DeleteCurrency,
		connect.WithSchema(currencyServiceMethods.ByName("DeleteCurrency")),
		connect.WithHandlerOptions(opts...),
	)
	currencyServiceListCurrenciesHandler := connect.NewUnaryHandler(
		CurrencyServiceListCurrenciesProcedure,
		svc.ListCurrencies,
		connect.WithSchema(currencyServiceMethods.ByName("ListCurrencies")),
		connect.WithHandlerOptions(opts...),
	)
	return "/aethercore.v1.CurrencyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CurrencyServiceCreateCurrencyProcedure:
			currencyServiceCreateCurrencyHandler.ServeHTTP(w, r)
		case CurrencyServiceGetCurrencyProcedure:
			currencyServiceGetCurrencyHandler.ServeHTTP(w, r)
		case CurrencyServiceUpdateCurrencyProcedure:
			currencyServiceUpdateCurrencyHandler.ServeHTTP(w, r)
		case CurrencyServiceDeleteCurrencyProcedure:
			currencyServiceDeleteCurrencyHandler.ServeHTTP(w, r)
		case CurrencyServiceListCurrenciesProcedure:
			currencyServiceListCurrenciesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCurrencyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCurrencyServiceHandler struct{}

func (UnimplementedCurrencyServiceHandler) CreateCurrency(context.Context, *connect.Request[v1.CreateCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aethercore.v1.CurrencyService.CreateCurrency is not implemented"))
}

func (UnimplementedCurrencyServiceHandler) GetCurrency(context.Context, *connect.Request[v1.GetCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aethercore.v1.CurrencyService.GetCurrency is not implemented"))
}

func (UnimplementedCurrencyServiceHandler) UpdateCurrency(context.Context, *connect.Request[v1.UpdateCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aethercore.v1.CurrencyService.UpdateCurrency is not implemented"))
}

func (UnimplementedCurrencyServiceHandler) DeleteCurrency(context.Context, *connect.Request[v1.DeleteCurrencyRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aethercore.v1.CurrencyService.DeleteCurrency is not implemented"))
}

func (UnimplementedCurrencyServiceHandler) ListCurrencies(context.Context, *connect.Request[v1.ListCurrenciesRequest]) (*connect.Response[v1.ListCurrenciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aethercore.v1.CurrencyService.ListCurrencies is not implemented"))
}
