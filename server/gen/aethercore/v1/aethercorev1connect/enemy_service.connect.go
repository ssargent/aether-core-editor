// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: aethercore/v1/enemy_service.proto

package aethercorev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ssargent/aether-core-editor/gen/aethercore/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EnemyServiceName is the fully-qualified name of the EnemyService service.
	EnemyServiceName = "aethercore.v1.EnemyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EnemyServiceCreateEnemyProcedure is the fully-qualified name of the EnemyService's CreateEnemy
	// RPC.
	EnemyServiceCreateEnemyProcedure = "/aethercore.v1.EnemyService/CreateEnemy"
	// EnemyServiceGetEnemyProcedure is the fully-qualified name of the EnemyService's GetEnemy RPC.
	EnemyServiceGetEnemyProcedure = "/aethercore.v1.EnemyService/GetEnemy"
	// EnemyServiceUpdateEnemyProcedure is the fully-qualified name of the EnemyService's UpdateEnemy
	// RPC.
	EnemyServiceUpdateEnemyProcedure = "/aethercore.v1.EnemyService/UpdateEnemy"
	// EnemyServiceDeleteEnemyProcedure is the fully-qualified name of the EnemyService's DeleteEnemy
	// RPC.
	EnemyServiceDeleteEnemyProcedure = "/aethercore.v1.EnemyService/DeleteEnemy"
	// EnemyServiceListEnemiesProcedure is the fully-qualified name of the EnemyService's ListEnemies
	// RPC.
	EnemyServiceListEnemiesProcedure = "/aethercore.v1.EnemyService/ListEnemies"
)

// EnemyServiceClient is a client for the aethercore.v1.EnemyService service.
type EnemyServiceClient interface {
	CreateEnemy(context.Context, *connect.Request[v1.CreateEnemyRequest]) (*connect.Response[v1.EnemyResponse], error)
	GetEnemy(context.Context, *connect.Request[v1.GetEnemyRequest]) (*connect.Response[v1.EnemyResponse], error)
	UpdateEnemy(context.Context, *connect.Request[v1.UpdateEnemyRequest]) (*connect.Response[v1.EnemyResponse], error)
	DeleteEnemy(context.Context, *connect.Request[v1.DeleteEnemyRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListEnemies(context.Context, *connect.Request[v1.ListEnemiesRequest]) (*connect.Response[v1.ListEnemiesResponse], error)
}

// NewEnemyServiceClient constructs a client for the aethercore.v1.EnemyService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEnemyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EnemyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	enemyServiceMethods := v1.File_aethercore_v1_enemy_service_proto.Services().ByName("EnemyService").Methods()
	return &enemyServiceClient{
		createEnemy: connect.NewClient[v1.CreateEnemyRequest, v1.EnemyResponse](
			httpClient,
			baseURL+EnemyServiceCreateEnemyProcedure,
			connect.WithSchema(enemyServiceMethods.ByName("CreateEnemy")),
			connect.WithClientOptions(opts...),
		),
		getEnemy: connect.NewClient[v1.GetEnemyRequest, v1.EnemyResponse](
			httpClient,
			baseURL+EnemyServiceGetEnemyProcedure,
			connect.WithSchema(enemyServiceMethods.ByName("GetEnemy")),
			connect.WithClientOptions(opts...),
		),
		updateEnemy: connect.NewClient[v1.UpdateEnemyRequest, v1.EnemyResponse](
			httpClient,
			baseURL+EnemyServiceUpdateEnemyProcedure,
			connect.WithSchema(enemyServiceMethods.ByName("UpdateEnemy")),
			connect.WithClientOptions(opts...),
		),
		deleteEnemy: connect.NewClient[v1.DeleteEnemyRequest, v1.DeleteResponse](
			httpClient,
			baseURL+EnemyServiceDeleteEnemyProcedure,
			connect.WithSchema(enemyServiceMethods.ByName("DeleteEnemy")),
			connect.WithClientOptions(opts...),
		),
		listEnemies: connect.NewClient[v1.ListEnemiesRequest, v1.ListEnemiesResponse](
			httpClient,
			baseURL+EnemyServiceListEnemiesProcedure,
			connect.WithSchema(enemyServiceMethods.ByName("ListEnemies")),
			connect.WithClientOptions(opts...),
		),
	}
}

// enemyServiceClient implements EnemyServiceClient.
type enemyServiceClient struct {
	createEnemy *connect.Client[v1.CreateEnemyRequest, v1.EnemyResponse]
	getEnemy    *connect.Client[v1.GetEnemyRequest, v1.EnemyResponse]
	updateEnemy *connect.Client[v1.UpdateEnemyRequest, v1.EnemyResponse]
	deleteEnemy *connect.Client[v1.DeleteEnemyRequest, v1.DeleteResponse]
	listEnemies *connect.Client[v1.ListEnemiesRequest, v1.ListEnemiesResponse]
}

// CreateEnemy calls aethercore.v1.EnemyService.CreateEnemy.
func (c *enemyServiceClient) CreateEnemy(ctx context.Context, req *connect.Request[v1.CreateEnemyRequest]) (*connect.Response[v1.EnemyResponse], error) {
	return c.createEnemy.CallUnary(ctx, req)
}

// GetEnemy calls aethercore.v1.EnemyService.GetEnemy.
func (c *enemyServiceClient) GetEnemy(ctx context.Context, req *connect.Request[v1.GetEnemyRequest]) (*connect.Response[v1.EnemyResponse], error) {
	return c.getEnemy.CallUnary(ctx, req)
}

// UpdateEnemy calls aethercore.v1.EnemyService.UpdateEnemy.
func (c *enemyServiceClient) UpdateEnemy(ctx context.Context, req *connect.Request[v1.UpdateEnemyRequest]) (*connect.Response[v1.EnemyResponse], error) {
	return c.updateEnemy.CallUnary(ctx, req)
}

// DeleteEnemy calls aethercore.v1.EnemyService.DeleteEnemy.
func (c *enemyServiceClient) DeleteEnemy(ctx context.Context, req *connect.Request[v1.DeleteEnemyRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.deleteEnemy.CallUnary(ctx, req)
}

// ListEnemies calls aethercore.v1.EnemyService.ListEnemies.
func (c *enemyServiceClient) ListEnemies(ctx context.Context, req *connect.Request[v1.ListEnemiesRequest]) (*connect.Response[v1.ListEnemiesResponse], error) {
	return c.listEnemies.CallUnary(ctx, req)
}

// EnemyServiceHandler is an implementation of the aethercore.v1.EnemyService service.
type EnemyServiceHandler interface {
	CreateEnemy(context.Context, *connect.Request[v1.CreateEnemyRequest]) (*connect.Response[v1.EnemyResponse], error)
	GetEnemy(context.Context, *connect.Request[v1.GetEnemyRequest]) (*connect.Response[v1.EnemyResponse], error)
	UpdateEnemy(context.Context, *connect.Request[v1.UpdateEnemyRequest]) (*connect.Response[v1.EnemyResponse], error)
	DeleteEnemy(context.Context, *connect.Request[v1.DeleteEnemyRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListEnemies(context.Context, *connect.Request[v1.ListEnemiesRequest]) (*connect.Response[v1.ListEnemiesResponse], error)
}

// NewEnemyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEnemyServiceHandler(svc EnemyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	enemyServiceMethods := v1.File_aethercore_v1_enemy_service_proto.Services().ByName("EnemyService").Methods()
	enemyServiceCreateEnemyHandler := connect.NewUnaryHandler(
		EnemyServiceCreateEnemyProcedure,
		svc.CreateEnemy,
		connect.WithSchema(enemyServiceMethods.ByName("CreateEnemy")),
		connect.WithHandlerOptions(opts...),
	)
	enemyServiceGetEnemyHandler := connect.NewUnaryHandler(
		EnemyServiceGetEnemyProcedure,
		svc.GetEnemy,
		connect.WithSchema(enemyServiceMethods.ByName("GetEnemy")),
		connect.WithHandlerOptions(opts...),
	)
	enemyServiceUpdateEnemyHandler := connect.NewUnaryHandler(
		EnemyServiceUpdateEnemyProcedure,
		svc.UpdateEnemy,
		connect.WithSchema(enemyServiceMethods.ByName("UpdateEnemy")),
		connect.WithHandlerOptions(opts...),
	)
	enemyServiceDeleteEnemyHandler := connect.NewUnaryHandler(
		EnemyServiceDeleteEnemyProcedure,
		svc.DeleteEnemy,
		connect.WithSchema(enemyServiceMethods.ByName("DeleteEnemy")),
		connect.WithHandlerOptions(opts...),
	)
	enemyServiceListEnemiesHandler := connect.NewUnaryHandler(
		EnemyServiceListEnemiesProcedure,
		svc.ListEnemies,
		connect.WithSchema(enemyServiceMethods.ByName("ListEnemies")),
		connect.WithHandlerOptions(opts...),
	)
	return "/aethercore.v1.EnemyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EnemyServiceCreateEnemyProcedure:
			enemyServiceCreateEnemyHandler.ServeHTTP(w, r)
		case EnemyServiceGetEnemyProcedure:
			enemyServiceGetEnemyHandler.ServeHTTP(w, r)
		case EnemyServiceUpdateEnemyProcedure:
			enemyServiceUpdateEnemyHandler.ServeHTTP(w, r)
		case EnemyServiceDeleteEnemyProcedure:
			enemyServiceDeleteEnemyHandler.ServeHTTP(w, r)
		case EnemyServiceListEnemiesProcedure:
			enemyServiceListEnemiesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEnemyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEnemyServiceHandler struct{}

func (UnimplementedEnemyServiceHandler) CreateEnemy(context.Context, *connect.Request[v1.CreateEnemyRequest]) (*connect.Response[v1.EnemyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aethercore.v1.EnemyService.CreateEnemy is not implemented"))
}

func (UnimplementedEnemyServiceHandler) GetEnemy(context.Context, *connect.Request[v1.GetEnemyRequest]) (*connect.Response[v1.EnemyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aethercore.v1.EnemyService.GetEnemy is not implemented"))
}

func (UnimplementedEnemyServiceHandler) UpdateEnemy(context.Context, *connect.Request[v1.UpdateEnemyRequest]) (*connect.Response[v1.EnemyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aethercore.v1.EnemyService.UpdateEnemy is not implemented"))
}

func (UnimplementedEnemyServiceHandler) DeleteEnemy(context.Context, *connect.Request[v1.DeleteEnemyRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aethercore.v1.EnemyService.DeleteEnemy is not implemented"))
}

func (UnimplementedEnemyServiceHandler) ListEnemies(context.Context, *connect.Request[v1.ListEnemiesRequest]) (*connect.Response[v1.ListEnemiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aethercore.v1.EnemyService.ListEnemies is not implemented"))
}
