// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: aethercore/v1/race_service.proto

package aethercorev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ssargent/aether-core-editor/gen/aethercore/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RaceServiceName is the fully-qualified name of the RaceService service.
	RaceServiceName = "aethercore.v1.RaceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RaceServiceCreateRaceProcedure is the fully-qualified name of the RaceService's CreateRace RPC.
	RaceServiceCreateRaceProcedure = "/aethercore.v1.RaceService/CreateRace"
	// RaceServiceGetRaceProcedure is the fully-qualified name of the RaceService's GetRace RPC.
	RaceServiceGetRaceProcedure = "/aethercore.v1.RaceService/GetRace"
	// RaceServiceUpdateRaceProcedure is the fully-qualified name of the RaceService's UpdateRace RPC.
	RaceServiceUpdateRaceProcedure = "/aethercore.v1.RaceService/UpdateRace"
	// RaceServiceDeleteRaceProcedure is the fully-qualified name of the RaceService's DeleteRace RPC.
	RaceServiceDeleteRaceProcedure = "/aethercore.v1.RaceService/DeleteRace"
	// RaceServiceListRacesProcedure is the fully-qualified name of the RaceService's ListRaces RPC.
	RaceServiceListRacesProcedure = "/aethercore.v1.RaceService/ListRaces"
)

// RaceServiceClient is a client for the aethercore.v1.RaceService service.
type RaceServiceClient interface {
	CreateRace(context.Context, *connect.Request[v1.CreateRaceRequest]) (*connect.Response[v1.RaceResponse], error)
	GetRace(context.Context, *connect.Request[v1.GetRaceRequest]) (*connect.Response[v1.RaceResponse], error)
	UpdateRace(context.Context, *connect.Request[v1.UpdateRaceRequest]) (*connect.Response[v1.RaceResponse], error)
	DeleteRace(context.Context, *connect.Request[v1.DeleteRaceRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListRaces(context.Context, *connect.Request[v1.ListRacesRequest]) (*connect.Response[v1.ListRacesResponse], error)
}

// NewRaceServiceClient constructs a client for the aethercore.v1.RaceService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRaceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RaceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	raceServiceMethods := v1.File_aethercore_v1_race_service_proto.Services().ByName("RaceService").Methods()
	return &raceServiceClient{
		createRace: connect.NewClient[v1.CreateRaceRequest, v1.RaceResponse](
			httpClient,
			baseURL+RaceServiceCreateRaceProcedure,
			connect.WithSchema(raceServiceMethods.ByName("CreateRace")),
			connect.WithClientOptions(opts...),
		),
		getRace: connect.NewClient[v1.GetRaceRequest, v1.RaceResponse](
			httpClient,
			baseURL+RaceServiceGetRaceProcedure,
			connect.WithSchema(raceServiceMethods.ByName("GetRace")),
			connect.WithClientOptions(opts...),
		),
		updateRace: connect.NewClient[v1.UpdateRaceRequest, v1.RaceResponse](
			httpClient,
			baseURL+RaceServiceUpdateRaceProcedure,
			connect.WithSchema(raceServiceMethods.ByName("UpdateRace")),
			connect.WithClientOptions(opts...),
		),
		deleteRace: connect.NewClient[v1.DeleteRaceRequest, v1.DeleteResponse](
			httpClient,
			baseURL+RaceServiceDeleteRaceProcedure,
			connect.WithSchema(raceServiceMethods.ByName("DeleteRace")),
			connect.WithClientOptions(opts...),
		),
		listRaces: connect.NewClient[v1.ListRacesRequest, v1.ListRacesResponse](
			httpClient,
			baseURL+RaceServiceListRacesProcedure,
			connect.WithSchema(raceServiceMethods.ByName("ListRaces")),
			connect.WithClientOptions(opts...),
		),
	}
}

// raceServiceClient implements RaceServiceClient.
type raceServiceClient struct {
	createRace *connect.Client[v1.CreateRaceRequest, v1.RaceResponse]
	getRace    *connect.Client[v1.GetRaceRequest, v1.RaceResponse]
	updateRace *connect.Client[v1.UpdateRaceRequest, v1.RaceResponse]
	deleteRace *connect.Client[v1.DeleteRaceRequest, v1.DeleteResponse]
	listRaces  *connect.Client[v1.ListRacesRequest, v1.ListRacesResponse]
}

// CreateRace calls aethercore.v1.RaceService.CreateRace.
func (c *raceServiceClient) CreateRace(ctx context.Context, req *connect.Request[v1.CreateRaceRequest]) (*connect.Response[v1.RaceResponse], error) {
	return c.createRace.CallUnary(ctx, req)
}

// GetRace calls aethercore.v1.RaceService.GetRace.
func (c *raceServiceClient) GetRace(ctx context.Context, req *connect.Request[v1.GetRaceRequest]) (*connect.Response[v1.RaceResponse], error) {
	return c.getRace.CallUnary(ctx, req)
}

// UpdateRace calls aethercore.v1.RaceService.UpdateRace.
func (c *raceServiceClient) UpdateRace(ctx context.Context, req *connect.Request[v1.UpdateRaceRequest]) (*connect.Response[v1.RaceResponse], error) {
	return c.updateRace.CallUnary(ctx, req)
}

// DeleteRace calls aethercore.v1.RaceService.DeleteRace.
func (c *raceServiceClient) DeleteRace(ctx context.Context, req *connect.Request[v1.DeleteRaceRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.deleteRace.CallUnary(ctx, req)
}

// ListRaces calls aethercore.v1.RaceService.ListRaces.
func (c *raceServiceClient) ListRaces(ctx context.Context, req *connect.Request[v1.ListRacesRequest]) (*connect.Response[v1.ListRacesResponse], error) {
	return c.listRaces.CallUnary(ctx, req)
}

// RaceServiceHandler is an implementation of the aethercore.v1.RaceService service.
type RaceServiceHandler interface {
	CreateRace(context.Context, *connect.Request[v1.CreateRaceRequest]) (*connect.Response[v1.RaceResponse], error)
	GetRace(context.Context, *connect.Request[v1.GetRaceRequest]) (*connect.Response[v1.RaceResponse], error)
	UpdateRace(context.Context, *connect.Request[v1.UpdateRaceRequest]) (*connect.Response[v1.RaceResponse], error)
	DeleteRace(context.Context, *connect.Request[v1.DeleteRaceRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListRaces(context.Context, *connect.Request[v1.ListRacesRequest]) (*connect.Response[v1.ListRacesResponse], error)
}

// NewRaceServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRaceServiceHandler(svc RaceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	raceServiceMethods := v1.File_aethercore_v1_race_service_proto.Services().ByName("RaceService").Methods()
	raceServiceCreateRaceHandler := connect.NewUnaryHandler(
		RaceServiceCreateRaceProcedure,
		svc.CreateRace,
		connect.WithSchema(raceServiceMethods.ByName("CreateRace")),
		connect.WithHandlerOptions(opts...),
	)
	raceServiceGetRaceHandler := connect.NewUnaryHandler(
		RaceServiceGetRaceProcedure,
		svc.GetRace,
		connect.WithSchema(raceServiceMethods.ByName("GetRace")),
		connect.WithHandlerOptions(opts...),
	)
	raceServiceUpdateRaceHandler := connect.NewUnaryHandler(
		RaceServiceUpdateRaceProcedure,
		svc.UpdateRace,
		connect.WithSchema(raceServiceMethods.ByName("UpdateRace")),
		connect.WithHandlerOptions(opts...),
	)
	raceServiceDeleteRaceHandler := connect.NewUnaryHandler(
		RaceServiceDeleteRaceProcedure,
		svc.DeleteRace,
		connect.WithSchema(raceServiceMethods.ByName("DeleteRace")),
		connect.WithHandlerOptions(opts...),
	)
	raceServiceListRacesHandler := connect.NewUnaryHandler(
		RaceServiceListRacesProcedure,
		svc.ListRaces,
		connect.WithSchema(raceServiceMethods.ByName("ListRaces")),
		connect.WithHandlerOptions(opts...),
	)
	return "/aethercore.v1.RaceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RaceServiceCreateRaceProcedure:
			raceServiceCreateRaceHandler.ServeHTTP(w, r)
		case RaceServiceGetRaceProcedure:
			raceServiceGetRaceHandler.ServeHTTP(w, r)
		case RaceServiceUpdateRaceProcedure:
			raceServiceUpdateRaceHandler.ServeHTTP(w, r)
		case RaceServiceDeleteRaceProcedure:
			raceServiceDeleteRaceHandler.ServeHTTP(w, r)
		case RaceServiceListRacesProcedure:
			raceServiceListRacesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRaceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRaceServiceHandler struct{}

func (UnimplementedRaceServiceHandler) CreateRace(context.Context, *connect.Request[v1.CreateRaceRequest]) (*connect.Response[v1.RaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aethercore.v1.RaceService.CreateRace is not implemented"))
}

func (UnimplementedRaceServiceHandler) GetRace(context.Context, *connect.Request[v1.GetRaceRequest]) (*connect.Response[v1.RaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aethercore.v1.RaceService.GetRace is not implemented"))
}

func (UnimplementedRaceServiceHandler) UpdateRace(context.Context, *connect.Request[v1.UpdateRaceRequest]) (*connect.Response[v1.RaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aethercore.v1.RaceService.UpdateRace is not implemented"))
}

func (UnimplementedRaceServiceHandler) DeleteRace(context.Context, *connect.Request[v1.DeleteRaceRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aethercore.v1.RaceService.DeleteRace is not implemented"))
}

func (UnimplementedRaceServiceHandler) ListRaces(context.Context, *connect.Request[v1.ListRacesRequest]) (*connect.Response[v1.ListRacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aethercore.v1.RaceService.ListRaces is not implemented"))
}
