// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: aethercore/v1/npc_service.proto

package aethercorev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ssargent/aether-core-editor/gen/aethercore/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NpcTemplateServiceName is the fully-qualified name of the NpcTemplateService service.
	NpcTemplateServiceName = "aethercore.v1.NpcTemplateService"
	// NpcSpawnRuleServiceName is the fully-qualified name of the NpcSpawnRuleService service.
	NpcSpawnRuleServiceName = "aethercore.v1.NpcSpawnRuleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NpcTemplateServiceCreateNpcTemplateProcedure is the fully-qualified name of the
	// NpcTemplateService's CreateNpcTemplate RPC.
	NpcTemplateServiceCreateNpcTemplateProcedure = "/aethercore.v1.NpcTemplateService/CreateNpcTemplate"
	// NpcTemplateServiceGetNpcTemplateProcedure is the fully-qualified name of the NpcTemplateService's
	// GetNpcTemplate RPC.
	NpcTemplateServiceGetNpcTemplateProcedure = "/aethercore.v1.NpcTemplateService/GetNpcTemplate"
	// NpcTemplateServiceUpdateNpcTemplateProcedure is the fully-qualified name of the
	// NpcTemplateService's UpdateNpcTemplate RPC.
	NpcTemplateServiceUpdateNpcTemplateProcedure = "/aethercore.v1.NpcTemplateService/UpdateNpcTemplate"
	// NpcTemplateServiceDeleteNpcTemplateProcedure is the fully-qualified name of the
	// NpcTemplateService's DeleteNpcTemplate RPC.
	NpcTemplateServiceDeleteNpcTemplateProcedure = "/aethercore.v1.NpcTemplateService/DeleteNpcTemplate"
	// NpcTemplateServiceListNpcTemplatesProcedure is the fully-qualified name of the
	// NpcTemplateService's ListNpcTemplates RPC.
	NpcTemplateServiceListNpcTemplatesProcedure = "/aethercore.v1.NpcTemplateService/ListNpcTemplates"
	// NpcSpawnRuleServiceCreateNpcSpawnRuleProcedure is the fully-qualified name of the
	// NpcSpawnRuleService's CreateNpcSpawnRule RPC.
	NpcSpawnRuleServiceCreateNpcSpawnRuleProcedure = "/aethercore.v1.NpcSpawnRuleService/CreateNpcSpawnRule"
	// NpcSpawnRuleServiceGetNpcSpawnRuleProcedure is the fully-qualified name of the
	// NpcSpawnRuleService's GetNpcSpawnRule RPC.
	NpcSpawnRuleServiceGetNpcSpawnRuleProcedure = "/aethercore.v1.NpcSpawnRuleService/GetNpcSpawnRule"
	// NpcSpawnRuleServiceUpdateNpcSpawnRuleProcedure is the fully-qualified name of the
	// NpcSpawnRuleService's UpdateNpcSpawnRule RPC.
	NpcSpawnRuleServiceUpdateNpcSpawnRuleProcedure = "/aethercore.v1.NpcSpawnRuleService/UpdateNpcSpawnRule"
	// NpcSpawnRuleServiceDeleteNpcSpawnRuleProcedure is the fully-qualified name of the
	// NpcSpawnRuleService's DeleteNpcSpawnRule RPC.
	NpcSpawnRuleServiceDeleteNpcSpawnRuleProcedure = "/aethercore.v1.NpcSpawnRuleService/DeleteNpcSpawnRule"
	// NpcSpawnRuleServiceListNpcSpawnRulesProcedure is the fully-qualified name of the
	// NpcSpawnRuleService's ListNpcSpawnRules RPC.
	NpcSpawnRuleServiceListNpcSpawnRulesProcedure = "/aethercore.v1.NpcSpawnRuleService/ListNpcSpawnRules"
)

// NpcTemplateServiceClient is a client for the aethercore.v1.NpcTemplateService service.
type NpcTemplateServiceClient interface {
	CreateNpcTemplate(context.Context, *connect.Request[v1.CreateNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error)
	GetNpcTemplate(context.Context, *connect.Request[v1.GetNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error)
	UpdateNpcTemplate(context.Context, *connect.Request[v1.UpdateNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error)
	DeleteNpcTemplate(context.Context, *connect.Request[v1.DeleteNpcTemplateRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListNpcTemplates(context.Context, *connect.Request[v1.ListNpcTemplatesRequest]) (*connect.Response[v1.ListNpcTemplatesResponse], error)
}

// NewNpcTemplateServiceClient constructs a client for the aethercore.v1.NpcTemplateService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNpcTemplateServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NpcTemplateServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	npcTemplateServiceMethods := v1.File_aethercore_v1_npc_service_proto.Services().ByName("NpcTemplateService").Methods()
	return &npcTemplateServiceClient{
		createNpcTemplate: connect.NewClient[v1.CreateNpcTemplateRequest, v1.NpcTemplateResponse](
			httpClient,
			baseURL+NpcTemplateServiceCreateNpcTemplateProcedure,
			connect.WithSchema(npcTemplateServiceMethods.ByName("CreateNpcTemplate")),
			connect.WithClientOptions(opts...),
		),
		getNpcTemplate: connect.NewClient[v1.GetNpcTemplateRequest, v1.NpcTemplateResponse](
			httpClient,
			baseURL+NpcTemplateServiceGetNpcTemplateProcedure,
			connect.WithSchema(npcTemplateServiceMethods.ByName("GetNpcTemplate")),
			connect.WithClientOptions(opts...),
		),
		updateNpcTemplate: connect.NewClient[v1.UpdateNpcTemplateRequest, v1.NpcTemplateResponse](
			httpClient,
			baseURL+NpcTemplateServiceUpdateNpcTemplateProcedure,
			connect.WithSchema(npcTemplateServiceMethods.ByName("UpdateNpcTemplate")),
			connect.WithClientOptions(opts...),
		),
		deleteNpcTemplate: connect.NewClient[v1.DeleteNpcTemplateRequest, v1.DeleteResponse](
			httpClient,
			baseURL+NpcTemplateServiceDeleteNpcTemplateProcedure,
			connect.WithSchema(npcTemplateServiceMethods.ByName("DeleteNpcTemplate")),
			connect.WithClientOptions(opts...),
		),
		listNpcTemplates: connect.NewClient[v1.ListNpcTemplatesRequest, v1.ListNpcTemplatesResponse](
			httpClient,
			baseURL+NpcTemplateServiceListNpcTemplatesProcedure,
			connect.WithSchema(npcTemplateServiceMethods.ByName("ListNpcTemplates")),
			connect.WithClientOptions(opts...),
		),
	}
}

// npcTemplateServiceClient implements NpcTemplateServiceClient.
type npcTemplateServiceClient struct {
	createNpcTemplate *connect.Client[v1.CreateNpcTemplateRequest, v1.NpcTemplateResponse]
	getNpcTemplate    *connect.Client[v1.GetNpcTemplateRequest, v1.NpcTemplateResponse]
	updateNpcTemplate *connect.Client[v1.UpdateNpcTemplateRequest, v1.NpcTemplateResponse]
	deleteNpcTemplate *connect.Client[v1.DeleteNpcTemplateRequest, v1.DeleteResponse]
	listNpcTemplates  *connect.Client[v1.ListNpcTemplatesRequest, v1.ListNpcTemplatesResponse]
}

// CreateNpcTemplate calls aethercore.v1.NpcTemplateService.CreateNpcTemplate.
func (c *npcTemplateServiceClient) CreateNpcTemplate(ctx context.Context, req *connect.Request[v1.CreateNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error) {
	return c.createNpcTemplate.CallUnary(ctx, req)
}

// GetNpcTemplate calls aethercore.v1.NpcTemplateService.GetNpcTemplate.
func (c *npcTemplateServiceClient) GetNpcTemplate(ctx context.Context, req *connect.Request[v1.GetNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error) {
	return c.getNpcTemplate.CallUnary(ctx, req)
}

// UpdateNpcTemplate calls aethercore.v1.NpcTemplateService.UpdateNpcTemplate.
func (c *npcTemplateServiceClient) UpdateNpcTemplate(ctx context.Context, req *connect.Request[v1.UpdateNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error) {
	return c.updateNpcTemplate.CallUnary(ctx, req)
}

// DeleteNpcTemplate calls aethercore.v1.NpcTemplateService.DeleteNpcTemplate.
func (c *npcTemplateServiceClient) DeleteNpcTemplate(ctx context.Context, req *connect.Request[v1.DeleteNpcTemplateRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.deleteNpcTemplate.CallUnary(ctx, req)
}

// ListNpcTemplates calls aethercore.v1.NpcTemplateService.ListNpcTemplates.
func (c *npcTemplateServiceClient) ListNpcTemplates(ctx context.Context, req *connect.Request[v1.ListNpcTemplatesRequest]) (*connect.Response[v1.ListNpcTemplatesResponse], error) {
	return c.listNpcTemplates.CallUnary(ctx, req)
}

// NpcTemplateServiceHandler is an implementation of the aethercore.v1.NpcTemplateService service.
type NpcTemplateServiceHandler interface {
	CreateNpcTemplate(context.Context, *connect.Request[v1.CreateNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error)
	GetNpcTemplate(context.Context, *connect.Request[v1.GetNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error)
	UpdateNpcTemplate(context.Context, *connect.Request[v1.UpdateNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error)
	DeleteNpcTemplate(context.Context, *connect.Request[v1.DeleteNpcTemplateRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListNpcTemplates(context.Context, *connect.Request[v1.ListNpcTemplatesRequest]) (*connect.Response[v1.ListNpcTemplatesResponse], error)
}

// NewNpcTemplateServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNpcTemplateServiceHandler(svc NpcTemplateServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	npcTemplateServiceMethods := v1.File_aethercore_v1_npc_service_proto.Services().ByName("NpcTemplateService").Methods()
	npcTemplateServiceCreateNpcTemplateHandler := connect.NewUnaryHandler(
		NpcTemplateServiceCreateNpcTemplateProcedure,
		svc.CreateNpcTemplate,
		connect.WithSchema(npcTemplateServiceMethods.ByName("CreateNpcTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	npcTemplateServiceGetNpcTemplateHandler := connect.NewUnaryHandler(
		NpcTemplateServiceGetNpcTemplateProcedure,
		svc.GetNpcTemplate,
		connect.WithSchema(npcTemplateServiceMethods.ByName("GetNpcTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	npcTemplateServiceUpdateNpcTemplateHandler := connect.NewUnaryHandler(
		NpcTemplateServiceUpdateNpcTemplateProcedure,
		svc.UpdateNpcTemplate,
		connect.WithSchema(npcTemplateServiceMethods.ByName("UpdateNpcTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	npcTemplateServiceDeleteNpcTemplateHandler := connect.NewUnaryHandler(
		NpcTemplateServiceDeleteNpcTemplateProcedure,
		svc.DeleteNpcTemplate,
		connect.WithSchema(npcTemplateServiceMethods.ByName("DeleteNpcTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	npcTemplateServiceListNpcTemplatesHandler := connect.NewUnaryHandler(
		NpcTemplateServiceListNpcTemplatesProcedure,
		svc.ListNpcTemplates,
		connect.WithSchema(npcTemplateServiceMethods.ByName("ListNpcTemplates")),
		connect.WithHandlerOptions(opts...),
	)
	return "/aethercore.v1.NpcTemplateService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NpcTemplateServiceCreateNpcTemplateProcedure:
			npcTemplateServiceCreateNpcTemplateHandler.ServeHTTP(w, r)
		case NpcTemplateServiceGetNpcTemplateProcedure:
			npcTemplateServiceGetNpcTemplateHandler.ServeHTTP(w, r)
		case NpcTemplateServiceUpdateNpcTemplateProcedure:
			npcTemplateServiceUpdateNpcTemplateHandler.ServeHTTP(w, r)
		case NpcTemplateServiceDeleteNpcTemplateProcedure:
			npcTemplateServiceDeleteNpcTemplateHandler.ServeHTTP(w, r)
		case NpcTemplateServiceListNpcTemplatesProcedure:
			npcTemplateServiceListNpcTemplatesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNpcTemplateServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNpcTemplateServiceHandler struct{}

func (UnimplementedNpcTemplateServiceHandler) CreateNpcTemplate(context.Context, *connect.Request[v1.CreateNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aethercore.v1.NpcTemplateService.CreateNpcTemplate is not implemented"))
}

func (UnimplementedNpcTemplateServiceHandler) GetNpcTemplate(context.Context, *connect.Request[v1.GetNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aethercore.v1.NpcTemplateService.GetNpcTemplate is not implemented"))
}

func (UnimplementedNpcTemplateServiceHandler) UpdateNpcTemplate(context.Context, *connect.Request[v1.UpdateNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aethercore.v1.NpcTemplateService.UpdateNpcTemplate is not implemented"))
}

func (UnimplementedNpcTemplateServiceHandler) DeleteNpcTemplate(context.Context, *connect.Request[v1.DeleteNpcTemplateRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aethercore.v1.NpcTemplateService.DeleteNpcTemplate is not implemented"))
}

func (UnimplementedNpcTemplateServiceHandler) ListNpcTemplates(context.Context, *connect.Request[v1.ListNpcTemplatesRequest]) (*connect.Response[v1.ListNpcTemplatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aethercore.v1.NpcTemplateService.ListNpcTemplates is not implemented"))
}

// NpcSpawnRuleServiceClient is a client for the aethercore.v1.NpcSpawnRuleService service.
type NpcSpawnRuleServiceClient interface {
	CreateNpcSpawnRule(context.Context, *connect.Request[v1.CreateNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error)
	GetNpcSpawnRule(context.Context, *connect.Request[v1.GetNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error)
	UpdateNpcSpawnRule(context.Context, *connect.Request[v1.UpdateNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error)
	DeleteNpcSpawnRule(context.Context, *connect.Request[v1.DeleteNpcSpawnRuleRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListNpcSpawnRules(context.Context, *connect.Request[v1.ListNpcSpawnRulesRequest]) (*connect.Response[v1.ListNpcSpawnRulesResponse], error)
}

// NewNpcSpawnRuleServiceClient constructs a client for the aethercore.v1.NpcSpawnRuleService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNpcSpawnRuleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NpcSpawnRuleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	npcSpawnRuleServiceMethods := v1.File_aethercore_v1_npc_service_proto.Services().ByName("NpcSpawnRuleService").Methods()
	return &npcSpawnRuleServiceClient{
		createNpcSpawnRule: connect.NewClient[v1.CreateNpcSpawnRuleRequest, v1.NpcSpawnRuleResponse](
			httpClient,
			baseURL+NpcSpawnRuleServiceCreateNpcSpawnRuleProcedure,
			connect.WithSchema(npcSpawnRuleServiceMethods.ByName("CreateNpcSpawnRule")),
			connect.WithClientOptions(opts...),
		),
		getNpcSpawnRule: connect.NewClient[v1.GetNpcSpawnRuleRequest, v1.NpcSpawnRuleResponse](
			httpClient,
			baseURL+NpcSpawnRuleServiceGetNpcSpawnRuleProcedure,
			connect.WithSchema(npcSpawnRuleServiceMethods.ByName("GetNpcSpawnRule")),
			connect.WithClientOptions(opts...),
		),
		updateNpcSpawnRule: connect.NewClient[v1.UpdateNpcSpawnRuleRequest, v1.NpcSpawnRuleResponse](
			httpClient,
			baseURL+NpcSpawnRuleServiceUpdateNpcSpawnRuleProcedure,
			connect.WithSchema(npcSpawnRuleServiceMethods.ByName("UpdateNpcSpawnRule")),
			connect.WithClientOptions(opts...),
		),
		deleteNpcSpawnRule: connect.NewClient[v1.DeleteNpcSpawnRuleRequest, v1.DeleteResponse](
			httpClient,
			baseURL+NpcSpawnRuleServiceDeleteNpcSpawnRuleProcedure,
			connect.WithSchema(npcSpawnRuleServiceMethods.ByName("DeleteNpcSpawnRule")),
			connect.WithClientOptions(opts...),
		),
		listNpcSpawnRules: connect.NewClient[v1.ListNpcSpawnRulesRequest, v1.ListNpcSpawnRulesResponse](
			httpClient,
			baseURL+NpcSpawnRuleServiceListNpcSpawnRulesProcedure,
			connect.WithSchema(npcSpawnRuleServiceMethods.ByName("ListNpcSpawnRules")),
			connect.WithClientOptions(opts...),
		),
	}
}

// npcSpawnRuleServiceClient implements NpcSpawnRuleServiceClient.
type npcSpawnRuleServiceClient struct {
	createNpcSpawnRule *connect.Client[v1.CreateNpcSpawnRuleRequest, v1.NpcSpawnRuleResponse]
	getNpcSpawnRule    *connect.Client[v1.GetNpcSpawnRuleRequest, v1.NpcSpawnRuleResponse]
	updateNpcSpawnRule *connect.Client[v1.UpdateNpcSpawnRuleRequest, v1.NpcSpawnRuleResponse]
	deleteNpcSpawnRule *connect.Client[v1.DeleteNpcSpawnRuleRequest, v1.DeleteResponse]
	listNpcSpawnRules  *connect.Client[v1.ListNpcSpawnRulesRequest, v1.ListNpcSpawnRulesResponse]
}

// CreateNpcSpawnRule calls aethercore.v1.NpcSpawnRuleService.CreateNpcSpawnRule.
func (c *npcSpawnRuleServiceClient) CreateNpcSpawnRule(ctx context.Context, req *connect.Request[v1.CreateNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error) {
	return c.createNpcSpawnRule.CallUnary(ctx, req)
}

// GetNpcSpawnRule calls aethercore.v1.NpcSpawnRuleService.GetNpcSpawnRule.
func (c *npcSpawnRuleServiceClient) GetNpcSpawnRule(ctx context.Context, req *connect.Request[v1.GetNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error) {
	return c.getNpcSpawnRule.CallUnary(ctx, req)
}

// UpdateNpcSpawnRule calls aethercore.v1.NpcSpawnRuleService.UpdateNpcSpawnRule.
func (c *npcSpawnRuleServiceClient) UpdateNpcSpawnRule(ctx context.Context, req *connect.Request[v1.UpdateNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error) {
	return c.updateNpcSpawnRule.CallUnary(ctx, req)
}

// DeleteNpcSpawnRule calls aethercore.v1.NpcSpawnRuleService.DeleteNpcSpawnRule.
func (c *npcSpawnRuleServiceClient) DeleteNpcSpawnRule(ctx context.Context, req *connect.Request[v1.DeleteNpcSpawnRuleRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.deleteNpcSpawnRule.CallUnary(ctx, req)
}

// ListNpcSpawnRules calls aethercore.v1.NpcSpawnRuleService.ListNpcSpawnRules.
func (c *npcSpawnRuleServiceClient) ListNpcSpawnRules(ctx context.Context, req *connect.Request[v1.ListNpcSpawnRulesRequest]) (*connect.Response[v1.ListNpcSpawnRulesResponse], error) {
	return c.listNpcSpawnRules.CallUnary(ctx, req)
}

// NpcSpawnRuleServiceHandler is an implementation of the aethercore.v1.NpcSpawnRuleService service.
type NpcSpawnRuleServiceHandler interface {
	CreateNpcSpawnRule(context.Context, *connect.Request[v1.CreateNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error)
	GetNpcSpawnRule(context.Context, *connect.Request[v1.GetNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error)
	UpdateNpcSpawnRule(context.Context, *connect.Request[v1.UpdateNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error)
	DeleteNpcSpawnRule(context.Context, *connect.Request[v1.DeleteNpcSpawnRuleRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListNpcSpawnRules(context.Context, *connect.Request[v1.ListNpcSpawnRulesRequest]) (*connect.Response[v1.ListNpcSpawnRulesResponse], error)
}

// NewNpcSpawnRuleServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNpcSpawnRuleServiceHandler(svc NpcSpawnRuleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	npcSpawnRuleServiceMethods := v1.File_aethercore_v1_npc_service_proto.Services().ByName("NpcSpawnRuleService").Methods()
	npcSpawnRuleServiceCreateNpcSpawnRuleHandler := connect.NewUnaryHandler(
		NpcSpawnRuleServiceCreateNpcSpawnRuleProcedure,
		svc.CreateNpcSpawnRule,
		connect.WithSchema(npcSpawnRuleServiceMethods.ByName("CreateNpcSpawnRule")),
		connect.WithHandlerOptions(opts...),
	)
	npcSpawnRuleServiceGetNpcSpawnRuleHandler := connect.NewUnaryHandler(
		NpcSpawnRuleServiceGetNpcSpawnRuleProcedure,
		svc.GetNpcSpawnRule,
		connect.WithSchema(npcSpawnRuleServiceMethods.ByName("GetNpcSpawnRule")),
		connect.WithHandlerOptions(opts...),
	)
	npcSpawnRuleServiceUpdateNpcSpawnRuleHandler := connect.NewUnaryHandler(
		NpcSpawnRuleServiceUpdateNpcSpawnRuleProcedure,
		svc.UpdateNpcSpawnRule,
		connect.WithSchema(npcSpawnRuleServiceMethods.ByName("UpdateNpcSpawnRule")),
		connect.WithHandlerOptions(opts...),
	)
	npcSpawnRuleServiceDeleteNpcSpawnRuleHandler := connect.NewUnaryHandler(
		NpcSpawnRuleServiceDeleteNpcSpawnRuleProcedure,
		svc.DeleteNpcSpawnRule,
		connect.WithSchema(npcSpawnRuleServiceMethods.ByName("DeleteNpcSpawnRule")),
		connect.WithHandlerOptions(opts...),
	)
	npcSpawnRuleServiceListNpcSpawnRulesHandler := connect.NewUnaryHandler(
		NpcSpawnRuleServiceListNpcSpawnRulesProcedure,
		svc.ListNpcSpawnRules,
		connect.WithSchema(npcSpawnRuleServiceMethods.ByName("ListNpcSpawnRules")),
		connect.WithHandlerOptions(opts...),
	)
	return "/aethercore.v1.NpcSpawnRuleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NpcSpawnRuleServiceCreateNpcSpawnRuleProcedure:
			npcSpawnRuleServiceCreateNpcSpawnRuleHandler.ServeHTTP(w, r)
		case NpcSpawnRuleServiceGetNpcSpawnRuleProcedure:
			npcSpawnRuleServiceGetNpcSpawnRuleHandler.ServeHTTP(w, r)
		case NpcSpawnRuleServiceUpdateNpcSpawnRuleProcedure:
			npcSpawnRuleServiceUpdateNpcSpawnRuleHandler.ServeHTTP(w, r)
		case NpcSpawnRuleServiceDeleteNpcSpawnRuleProcedure:
			npcSpawnRuleServiceDeleteNpcSpawnRuleHandler.ServeHTTP(w, r)
		case NpcSpawnRuleServiceListNpcSpawnRulesProcedure:
			npcSpawnRuleServiceListNpcSpawnRulesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNpcSpawnRuleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNpcSpawnRuleServiceHandler struct{}

func (UnimplementedNpcSpawnRuleServiceHandler) CreateNpcSpawnRule(context.Context, *connect.Request[v1.CreateNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aethercore.v1.NpcSpawnRuleService.CreateNpcSpawnRule is not implemented"))
}

func (UnimplementedNpcSpawnRuleServiceHandler) GetNpcSpawnRule(context.Context, *connect.Request[v1.GetNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aethercore.v1.NpcSpawnRuleService.GetNpcSpawnRule is not implemented"))
}

func (UnimplementedNpcSpawnRuleServiceHandler) UpdateNpcSpawnRule(context.Context, *connect.Request[v1.UpdateNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aethercore.v1.NpcSpawnRuleService.UpdateNpcSpawnRule is not implemented"))
}

func (UnimplementedNpcSpawnRuleServiceHandler) DeleteNpcSpawnRule(context.Context, *connect.Request[v1.DeleteNpcSpawnRuleRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aethercore.v1.NpcSpawnRuleService.DeleteNpcSpawnRule is not implemented"))
}

func (UnimplementedNpcSpawnRuleServiceHandler) ListNpcSpawnRules(context.Context, *connect.Request[v1.ListNpcSpawnRulesRequest]) (*connect.Response[v1.ListNpcSpawnRulesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aethercore.v1.NpcSpawnRuleService.ListNpcSpawnRules is not implemented"))
}
