// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: game/v1/capability_service.proto

package gamev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ssargent/aether-core-editor/gen/game/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CapabilityServiceName is the fully-qualified name of the CapabilityService service.
	CapabilityServiceName = "game.v1.CapabilityService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CapabilityServiceCreateCapabilityProcedure is the fully-qualified name of the CapabilityService's
	// CreateCapability RPC.
	CapabilityServiceCreateCapabilityProcedure = "/game.v1.CapabilityService/CreateCapability"
	// CapabilityServiceGetCapabilityProcedure is the fully-qualified name of the CapabilityService's
	// GetCapability RPC.
	CapabilityServiceGetCapabilityProcedure = "/game.v1.CapabilityService/GetCapability"
	// CapabilityServiceUpdateCapabilityProcedure is the fully-qualified name of the CapabilityService's
	// UpdateCapability RPC.
	CapabilityServiceUpdateCapabilityProcedure = "/game.v1.CapabilityService/UpdateCapability"
	// CapabilityServiceDeleteCapabilityProcedure is the fully-qualified name of the CapabilityService's
	// DeleteCapability RPC.
	CapabilityServiceDeleteCapabilityProcedure = "/game.v1.CapabilityService/DeleteCapability"
	// CapabilityServiceListCapabilitiesProcedure is the fully-qualified name of the CapabilityService's
	// ListCapabilities RPC.
	CapabilityServiceListCapabilitiesProcedure = "/game.v1.CapabilityService/ListCapabilities"
)

// CapabilityServiceClient is a client for the game.v1.CapabilityService service.
type CapabilityServiceClient interface {
	CreateCapability(context.Context, *connect.Request[v1.CreateCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error)
	GetCapability(context.Context, *connect.Request[v1.GetCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error)
	UpdateCapability(context.Context, *connect.Request[v1.UpdateCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error)
	DeleteCapability(context.Context, *connect.Request[v1.DeleteCapabilityRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListCapabilities(context.Context, *connect.Request[v1.ListCapabilitiesRequest]) (*connect.Response[v1.ListCapabilitiesResponse], error)
}

// NewCapabilityServiceClient constructs a client for the game.v1.CapabilityService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCapabilityServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CapabilityServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	capabilityServiceMethods := v1.File_game_v1_capability_service_proto.Services().ByName("CapabilityService").Methods()
	return &capabilityServiceClient{
		createCapability: connect.NewClient[v1.CreateCapabilityRequest, v1.CapabilityResponse](
			httpClient,
			baseURL+CapabilityServiceCreateCapabilityProcedure,
			connect.WithSchema(capabilityServiceMethods.ByName("CreateCapability")),
			connect.WithClientOptions(opts...),
		),
		getCapability: connect.NewClient[v1.GetCapabilityRequest, v1.CapabilityResponse](
			httpClient,
			baseURL+CapabilityServiceGetCapabilityProcedure,
			connect.WithSchema(capabilityServiceMethods.ByName("GetCapability")),
			connect.WithClientOptions(opts...),
		),
		updateCapability: connect.NewClient[v1.UpdateCapabilityRequest, v1.CapabilityResponse](
			httpClient,
			baseURL+CapabilityServiceUpdateCapabilityProcedure,
			connect.WithSchema(capabilityServiceMethods.ByName("UpdateCapability")),
			connect.WithClientOptions(opts...),
		),
		deleteCapability: connect.NewClient[v1.DeleteCapabilityRequest, v1.DeleteResponse](
			httpClient,
			baseURL+CapabilityServiceDeleteCapabilityProcedure,
			connect.WithSchema(capabilityServiceMethods.ByName("DeleteCapability")),
			connect.WithClientOptions(opts...),
		),
		listCapabilities: connect.NewClient[v1.ListCapabilitiesRequest, v1.ListCapabilitiesResponse](
			httpClient,
			baseURL+CapabilityServiceListCapabilitiesProcedure,
			connect.WithSchema(capabilityServiceMethods.ByName("ListCapabilities")),
			connect.WithClientOptions(opts...),
		),
	}
}

// capabilityServiceClient implements CapabilityServiceClient.
type capabilityServiceClient struct {
	createCapability *connect.Client[v1.CreateCapabilityRequest, v1.CapabilityResponse]
	getCapability    *connect.Client[v1.GetCapabilityRequest, v1.CapabilityResponse]
	updateCapability *connect.Client[v1.UpdateCapabilityRequest, v1.CapabilityResponse]
	deleteCapability *connect.Client[v1.DeleteCapabilityRequest, v1.DeleteResponse]
	listCapabilities *connect.Client[v1.ListCapabilitiesRequest, v1.ListCapabilitiesResponse]
}

// CreateCapability calls game.v1.CapabilityService.CreateCapability.
func (c *capabilityServiceClient) CreateCapability(ctx context.Context, req *connect.Request[v1.CreateCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error) {
	return c.createCapability.CallUnary(ctx, req)
}

// GetCapability calls game.v1.CapabilityService.GetCapability.
func (c *capabilityServiceClient) GetCapability(ctx context.Context, req *connect.Request[v1.GetCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error) {
	return c.getCapability.CallUnary(ctx, req)
}

// UpdateCapability calls game.v1.CapabilityService.UpdateCapability.
func (c *capabilityServiceClient) UpdateCapability(ctx context.Context, req *connect.Request[v1.UpdateCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error) {
	return c.updateCapability.CallUnary(ctx, req)
}

// DeleteCapability calls game.v1.CapabilityService.DeleteCapability.
func (c *capabilityServiceClient) DeleteCapability(ctx context.Context, req *connect.Request[v1.DeleteCapabilityRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.deleteCapability.CallUnary(ctx, req)
}

// ListCapabilities calls game.v1.CapabilityService.ListCapabilities.
func (c *capabilityServiceClient) ListCapabilities(ctx context.Context, req *connect.Request[v1.ListCapabilitiesRequest]) (*connect.Response[v1.ListCapabilitiesResponse], error) {
	return c.listCapabilities.CallUnary(ctx, req)
}

// CapabilityServiceHandler is an implementation of the game.v1.CapabilityService service.
type CapabilityServiceHandler interface {
	CreateCapability(context.Context, *connect.Request[v1.CreateCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error)
	GetCapability(context.Context, *connect.Request[v1.GetCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error)
	UpdateCapability(context.Context, *connect.Request[v1.UpdateCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error)
	DeleteCapability(context.Context, *connect.Request[v1.DeleteCapabilityRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListCapabilities(context.Context, *connect.Request[v1.ListCapabilitiesRequest]) (*connect.Response[v1.ListCapabilitiesResponse], error)
}

// NewCapabilityServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCapabilityServiceHandler(svc CapabilityServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	capabilityServiceMethods := v1.File_game_v1_capability_service_proto.Services().ByName("CapabilityService").Methods()
	capabilityServiceCreateCapabilityHandler := connect.NewUnaryHandler(
		CapabilityServiceCreateCapabilityProcedure,
		svc.CreateCapability,
		connect.WithSchema(capabilityServiceMethods.ByName("CreateCapability")),
		connect.WithHandlerOptions(opts...),
	)
	capabilityServiceGetCapabilityHandler := connect.NewUnaryHandler(
		CapabilityServiceGetCapabilityProcedure,
		svc.GetCapability,
		connect.WithSchema(capabilityServiceMethods.ByName("GetCapability")),
		connect.WithHandlerOptions(opts...),
	)
	capabilityServiceUpdateCapabilityHandler := connect.NewUnaryHandler(
		CapabilityServiceUpdateCapabilityProcedure,
		svc.UpdateCapability,
		connect.WithSchema(capabilityServiceMethods.ByName("UpdateCapability")),
		connect.WithHandlerOptions(opts...),
	)
	capabilityServiceDeleteCapabilityHandler := connect.NewUnaryHandler(
		CapabilityServiceDeleteCapabilityProcedure,
		svc.DeleteCapability,
		connect.WithSchema(capabilityServiceMethods.ByName("DeleteCapability")),
		connect.WithHandlerOptions(opts...),
	)
	capabilityServiceListCapabilitiesHandler := connect.NewUnaryHandler(
		CapabilityServiceListCapabilitiesProcedure,
		svc.ListCapabilities,
		connect.WithSchema(capabilityServiceMethods.ByName("ListCapabilities")),
		connect.WithHandlerOptions(opts...),
	)
	return "/game.v1.CapabilityService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CapabilityServiceCreateCapabilityProcedure:
			capabilityServiceCreateCapabilityHandler.ServeHTTP(w, r)
		case CapabilityServiceGetCapabilityProcedure:
			capabilityServiceGetCapabilityHandler.ServeHTTP(w, r)
		case CapabilityServiceUpdateCapabilityProcedure:
			capabilityServiceUpdateCapabilityHandler.ServeHTTP(w, r)
		case CapabilityServiceDeleteCapabilityProcedure:
			capabilityServiceDeleteCapabilityHandler.ServeHTTP(w, r)
		case CapabilityServiceListCapabilitiesProcedure:
			capabilityServiceListCapabilitiesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCapabilityServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCapabilityServiceHandler struct{}

func (UnimplementedCapabilityServiceHandler) CreateCapability(context.Context, *connect.Request[v1.CreateCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CapabilityService.CreateCapability is not implemented"))
}

func (UnimplementedCapabilityServiceHandler) GetCapability(context.Context, *connect.Request[v1.GetCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CapabilityService.GetCapability is not implemented"))
}

func (UnimplementedCapabilityServiceHandler) UpdateCapability(context.Context, *connect.Request[v1.UpdateCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CapabilityService.UpdateCapability is not implemented"))
}

func (UnimplementedCapabilityServiceHandler) DeleteCapability(context.Context, *connect.Request[v1.DeleteCapabilityRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CapabilityService.DeleteCapability is not implemented"))
}

func (UnimplementedCapabilityServiceHandler) ListCapabilities(context.Context, *connect.Request[v1.ListCapabilitiesRequest]) (*connect.Response[v1.ListCapabilitiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CapabilityService.ListCapabilities is not implemented"))
}
