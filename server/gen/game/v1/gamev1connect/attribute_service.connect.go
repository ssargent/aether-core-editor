// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: game/v1/attribute_service.proto

package gamev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ssargent/aether-core-editor/gen/game/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AttributeServiceName is the fully-qualified name of the AttributeService service.
	AttributeServiceName = "game.v1.AttributeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AttributeServiceCreateAttributeProcedure is the fully-qualified name of the AttributeService's
	// CreateAttribute RPC.
	AttributeServiceCreateAttributeProcedure = "/game.v1.AttributeService/CreateAttribute"
	// AttributeServiceGetAttributeProcedure is the fully-qualified name of the AttributeService's
	// GetAttribute RPC.
	AttributeServiceGetAttributeProcedure = "/game.v1.AttributeService/GetAttribute"
	// AttributeServiceUpdateAttributeProcedure is the fully-qualified name of the AttributeService's
	// UpdateAttribute RPC.
	AttributeServiceUpdateAttributeProcedure = "/game.v1.AttributeService/UpdateAttribute"
	// AttributeServiceDeleteAttributeProcedure is the fully-qualified name of the AttributeService's
	// DeleteAttribute RPC.
	AttributeServiceDeleteAttributeProcedure = "/game.v1.AttributeService/DeleteAttribute"
	// AttributeServiceListAttributesProcedure is the fully-qualified name of the AttributeService's
	// ListAttributes RPC.
	AttributeServiceListAttributesProcedure = "/game.v1.AttributeService/ListAttributes"
)

// AttributeServiceClient is a client for the game.v1.AttributeService service.
type AttributeServiceClient interface {
	CreateAttribute(context.Context, *connect.Request[v1.CreateAttributeRequest]) (*connect.Response[v1.AttributeResponse], error)
	GetAttribute(context.Context, *connect.Request[v1.GetAttributeRequest]) (*connect.Response[v1.AttributeResponse], error)
	UpdateAttribute(context.Context, *connect.Request[v1.UpdateAttributeRequest]) (*connect.Response[v1.AttributeResponse], error)
	DeleteAttribute(context.Context, *connect.Request[v1.DeleteAttributeRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListAttributes(context.Context, *connect.Request[v1.ListAttributesRequest]) (*connect.Response[v1.ListAttributesResponse], error)
}

// NewAttributeServiceClient constructs a client for the game.v1.AttributeService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAttributeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AttributeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	attributeServiceMethods := v1.File_game_v1_attribute_service_proto.Services().ByName("AttributeService").Methods()
	return &attributeServiceClient{
		createAttribute: connect.NewClient[v1.CreateAttributeRequest, v1.AttributeResponse](
			httpClient,
			baseURL+AttributeServiceCreateAttributeProcedure,
			connect.WithSchema(attributeServiceMethods.ByName("CreateAttribute")),
			connect.WithClientOptions(opts...),
		),
		getAttribute: connect.NewClient[v1.GetAttributeRequest, v1.AttributeResponse](
			httpClient,
			baseURL+AttributeServiceGetAttributeProcedure,
			connect.WithSchema(attributeServiceMethods.ByName("GetAttribute")),
			connect.WithClientOptions(opts...),
		),
		updateAttribute: connect.NewClient[v1.UpdateAttributeRequest, v1.AttributeResponse](
			httpClient,
			baseURL+AttributeServiceUpdateAttributeProcedure,
			connect.WithSchema(attributeServiceMethods.ByName("UpdateAttribute")),
			connect.WithClientOptions(opts...),
		),
		deleteAttribute: connect.NewClient[v1.DeleteAttributeRequest, v1.DeleteResponse](
			httpClient,
			baseURL+AttributeServiceDeleteAttributeProcedure,
			connect.WithSchema(attributeServiceMethods.ByName("DeleteAttribute")),
			connect.WithClientOptions(opts...),
		),
		listAttributes: connect.NewClient[v1.ListAttributesRequest, v1.ListAttributesResponse](
			httpClient,
			baseURL+AttributeServiceListAttributesProcedure,
			connect.WithSchema(attributeServiceMethods.ByName("ListAttributes")),
			connect.WithClientOptions(opts...),
		),
	}
}

// attributeServiceClient implements AttributeServiceClient.
type attributeServiceClient struct {
	createAttribute *connect.Client[v1.CreateAttributeRequest, v1.AttributeResponse]
	getAttribute    *connect.Client[v1.GetAttributeRequest, v1.AttributeResponse]
	updateAttribute *connect.Client[v1.UpdateAttributeRequest, v1.AttributeResponse]
	deleteAttribute *connect.Client[v1.DeleteAttributeRequest, v1.DeleteResponse]
	listAttributes  *connect.Client[v1.ListAttributesRequest, v1.ListAttributesResponse]
}

// CreateAttribute calls game.v1.AttributeService.CreateAttribute.
func (c *attributeServiceClient) CreateAttribute(ctx context.Context, req *connect.Request[v1.CreateAttributeRequest]) (*connect.Response[v1.AttributeResponse], error) {
	return c.createAttribute.CallUnary(ctx, req)
}

// GetAttribute calls game.v1.AttributeService.GetAttribute.
func (c *attributeServiceClient) GetAttribute(ctx context.Context, req *connect.Request[v1.GetAttributeRequest]) (*connect.Response[v1.AttributeResponse], error) {
	return c.getAttribute.CallUnary(ctx, req)
}

// UpdateAttribute calls game.v1.AttributeService.UpdateAttribute.
func (c *attributeServiceClient) UpdateAttribute(ctx context.Context, req *connect.Request[v1.UpdateAttributeRequest]) (*connect.Response[v1.AttributeResponse], error) {
	return c.updateAttribute.CallUnary(ctx, req)
}

// DeleteAttribute calls game.v1.AttributeService.DeleteAttribute.
func (c *attributeServiceClient) DeleteAttribute(ctx context.Context, req *connect.Request[v1.DeleteAttributeRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.deleteAttribute.CallUnary(ctx, req)
}

// ListAttributes calls game.v1.AttributeService.ListAttributes.
func (c *attributeServiceClient) ListAttributes(ctx context.Context, req *connect.Request[v1.ListAttributesRequest]) (*connect.Response[v1.ListAttributesResponse], error) {
	return c.listAttributes.CallUnary(ctx, req)
}

// AttributeServiceHandler is an implementation of the game.v1.AttributeService service.
type AttributeServiceHandler interface {
	CreateAttribute(context.Context, *connect.Request[v1.CreateAttributeRequest]) (*connect.Response[v1.AttributeResponse], error)
	GetAttribute(context.Context, *connect.Request[v1.GetAttributeRequest]) (*connect.Response[v1.AttributeResponse], error)
	UpdateAttribute(context.Context, *connect.Request[v1.UpdateAttributeRequest]) (*connect.Response[v1.AttributeResponse], error)
	DeleteAttribute(context.Context, *connect.Request[v1.DeleteAttributeRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListAttributes(context.Context, *connect.Request[v1.ListAttributesRequest]) (*connect.Response[v1.ListAttributesResponse], error)
}

// NewAttributeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAttributeServiceHandler(svc AttributeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	attributeServiceMethods := v1.File_game_v1_attribute_service_proto.Services().ByName("AttributeService").Methods()
	attributeServiceCreateAttributeHandler := connect.NewUnaryHandler(
		AttributeServiceCreateAttributeProcedure,
		svc.CreateAttribute,
		connect.WithSchema(attributeServiceMethods.ByName("CreateAttribute")),
		connect.WithHandlerOptions(opts...),
	)
	attributeServiceGetAttributeHandler := connect.NewUnaryHandler(
		AttributeServiceGetAttributeProcedure,
		svc.GetAttribute,
		connect.WithSchema(attributeServiceMethods.ByName("GetAttribute")),
		connect.WithHandlerOptions(opts...),
	)
	attributeServiceUpdateAttributeHandler := connect.NewUnaryHandler(
		AttributeServiceUpdateAttributeProcedure,
		svc.UpdateAttribute,
		connect.WithSchema(attributeServiceMethods.ByName("UpdateAttribute")),
		connect.WithHandlerOptions(opts...),
	)
	attributeServiceDeleteAttributeHandler := connect.NewUnaryHandler(
		AttributeServiceDeleteAttributeProcedure,
		svc.DeleteAttribute,
		connect.WithSchema(attributeServiceMethods.ByName("DeleteAttribute")),
		connect.WithHandlerOptions(opts...),
	)
	attributeServiceListAttributesHandler := connect.NewUnaryHandler(
		AttributeServiceListAttributesProcedure,
		svc.ListAttributes,
		connect.WithSchema(attributeServiceMethods.ByName("ListAttributes")),
		connect.WithHandlerOptions(opts...),
	)
	return "/game.v1.AttributeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AttributeServiceCreateAttributeProcedure:
			attributeServiceCreateAttributeHandler.ServeHTTP(w, r)
		case AttributeServiceGetAttributeProcedure:
			attributeServiceGetAttributeHandler.ServeHTTP(w, r)
		case AttributeServiceUpdateAttributeProcedure:
			attributeServiceUpdateAttributeHandler.ServeHTTP(w, r)
		case AttributeServiceDeleteAttributeProcedure:
			attributeServiceDeleteAttributeHandler.ServeHTTP(w, r)
		case AttributeServiceListAttributesProcedure:
			attributeServiceListAttributesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAttributeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAttributeServiceHandler struct{}

func (UnimplementedAttributeServiceHandler) CreateAttribute(context.Context, *connect.Request[v1.CreateAttributeRequest]) (*connect.Response[v1.AttributeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.AttributeService.CreateAttribute is not implemented"))
}

func (UnimplementedAttributeServiceHandler) GetAttribute(context.Context, *connect.Request[v1.GetAttributeRequest]) (*connect.Response[v1.AttributeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.AttributeService.GetAttribute is not implemented"))
}

func (UnimplementedAttributeServiceHandler) UpdateAttribute(context.Context, *connect.Request[v1.UpdateAttributeRequest]) (*connect.Response[v1.AttributeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.AttributeService.UpdateAttribute is not implemented"))
}

func (UnimplementedAttributeServiceHandler) DeleteAttribute(context.Context, *connect.Request[v1.DeleteAttributeRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.AttributeService.DeleteAttribute is not implemented"))
}

func (UnimplementedAttributeServiceHandler) ListAttributes(context.Context, *connect.Request[v1.ListAttributesRequest]) (*connect.Response[v1.ListAttributesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.AttributeService.ListAttributes is not implemented"))
}
