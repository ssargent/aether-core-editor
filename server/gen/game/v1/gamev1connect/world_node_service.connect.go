// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: game/v1/world_node_service.proto

package gamev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ssargent/aether-core-editor/gen/game/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WorldNodeServiceName is the fully-qualified name of the WorldNodeService service.
	WorldNodeServiceName = "game.v1.WorldNodeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WorldNodeServiceCreateWorldNodeProcedure is the fully-qualified name of the WorldNodeService's
	// CreateWorldNode RPC.
	WorldNodeServiceCreateWorldNodeProcedure = "/game.v1.WorldNodeService/CreateWorldNode"
	// WorldNodeServiceGetWorldNodeProcedure is the fully-qualified name of the WorldNodeService's
	// GetWorldNode RPC.
	WorldNodeServiceGetWorldNodeProcedure = "/game.v1.WorldNodeService/GetWorldNode"
	// WorldNodeServiceUpdateWorldNodeProcedure is the fully-qualified name of the WorldNodeService's
	// UpdateWorldNode RPC.
	WorldNodeServiceUpdateWorldNodeProcedure = "/game.v1.WorldNodeService/UpdateWorldNode"
	// WorldNodeServiceDeleteWorldNodeProcedure is the fully-qualified name of the WorldNodeService's
	// DeleteWorldNode RPC.
	WorldNodeServiceDeleteWorldNodeProcedure = "/game.v1.WorldNodeService/DeleteWorldNode"
	// WorldNodeServiceListWorldNodesProcedure is the fully-qualified name of the WorldNodeService's
	// ListWorldNodes RPC.
	WorldNodeServiceListWorldNodesProcedure = "/game.v1.WorldNodeService/ListWorldNodes"
	// WorldNodeServiceCreateWorldNodeFeatureProcedure is the fully-qualified name of the
	// WorldNodeService's CreateWorldNodeFeature RPC.
	WorldNodeServiceCreateWorldNodeFeatureProcedure = "/game.v1.WorldNodeService/CreateWorldNodeFeature"
	// WorldNodeServiceGetWorldNodeFeatureProcedure is the fully-qualified name of the
	// WorldNodeService's GetWorldNodeFeature RPC.
	WorldNodeServiceGetWorldNodeFeatureProcedure = "/game.v1.WorldNodeService/GetWorldNodeFeature"
	// WorldNodeServiceUpdateWorldNodeFeatureProcedure is the fully-qualified name of the
	// WorldNodeService's UpdateWorldNodeFeature RPC.
	WorldNodeServiceUpdateWorldNodeFeatureProcedure = "/game.v1.WorldNodeService/UpdateWorldNodeFeature"
	// WorldNodeServiceDeleteWorldNodeFeatureProcedure is the fully-qualified name of the
	// WorldNodeService's DeleteWorldNodeFeature RPC.
	WorldNodeServiceDeleteWorldNodeFeatureProcedure = "/game.v1.WorldNodeService/DeleteWorldNodeFeature"
	// WorldNodeServiceListWorldNodeFeaturesProcedure is the fully-qualified name of the
	// WorldNodeService's ListWorldNodeFeatures RPC.
	WorldNodeServiceListWorldNodeFeaturesProcedure = "/game.v1.WorldNodeService/ListWorldNodeFeatures"
)

// WorldNodeServiceClient is a client for the game.v1.WorldNodeService service.
type WorldNodeServiceClient interface {
	CreateWorldNode(context.Context, *connect.Request[v1.CreateWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error)
	GetWorldNode(context.Context, *connect.Request[v1.GetWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error)
	UpdateWorldNode(context.Context, *connect.Request[v1.UpdateWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error)
	DeleteWorldNode(context.Context, *connect.Request[v1.DeleteWorldNodeRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListWorldNodes(context.Context, *connect.Request[v1.ListWorldNodesRequest]) (*connect.Response[v1.ListWorldNodesResponse], error)
	CreateWorldNodeFeature(context.Context, *connect.Request[v1.CreateWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error)
	GetWorldNodeFeature(context.Context, *connect.Request[v1.GetWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error)
	UpdateWorldNodeFeature(context.Context, *connect.Request[v1.UpdateWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error)
	DeleteWorldNodeFeature(context.Context, *connect.Request[v1.DeleteWorldNodeFeatureRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListWorldNodeFeatures(context.Context, *connect.Request[v1.ListWorldNodeFeaturesRequest]) (*connect.Response[v1.ListWorldNodeFeaturesResponse], error)
}

// NewWorldNodeServiceClient constructs a client for the game.v1.WorldNodeService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorldNodeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WorldNodeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	worldNodeServiceMethods := v1.File_game_v1_world_node_service_proto.Services().ByName("WorldNodeService").Methods()
	return &worldNodeServiceClient{
		createWorldNode: connect.NewClient[v1.CreateWorldNodeRequest, v1.WorldNodeResponse](
			httpClient,
			baseURL+WorldNodeServiceCreateWorldNodeProcedure,
			connect.WithSchema(worldNodeServiceMethods.ByName("CreateWorldNode")),
			connect.WithClientOptions(opts...),
		),
		getWorldNode: connect.NewClient[v1.GetWorldNodeRequest, v1.WorldNodeResponse](
			httpClient,
			baseURL+WorldNodeServiceGetWorldNodeProcedure,
			connect.WithSchema(worldNodeServiceMethods.ByName("GetWorldNode")),
			connect.WithClientOptions(opts...),
		),
		updateWorldNode: connect.NewClient[v1.UpdateWorldNodeRequest, v1.WorldNodeResponse](
			httpClient,
			baseURL+WorldNodeServiceUpdateWorldNodeProcedure,
			connect.WithSchema(worldNodeServiceMethods.ByName("UpdateWorldNode")),
			connect.WithClientOptions(opts...),
		),
		deleteWorldNode: connect.NewClient[v1.DeleteWorldNodeRequest, v1.DeleteResponse](
			httpClient,
			baseURL+WorldNodeServiceDeleteWorldNodeProcedure,
			connect.WithSchema(worldNodeServiceMethods.ByName("DeleteWorldNode")),
			connect.WithClientOptions(opts...),
		),
		listWorldNodes: connect.NewClient[v1.ListWorldNodesRequest, v1.ListWorldNodesResponse](
			httpClient,
			baseURL+WorldNodeServiceListWorldNodesProcedure,
			connect.WithSchema(worldNodeServiceMethods.ByName("ListWorldNodes")),
			connect.WithClientOptions(opts...),
		),
		createWorldNodeFeature: connect.NewClient[v1.CreateWorldNodeFeatureRequest, v1.WorldNodeFeatureResponse](
			httpClient,
			baseURL+WorldNodeServiceCreateWorldNodeFeatureProcedure,
			connect.WithSchema(worldNodeServiceMethods.ByName("CreateWorldNodeFeature")),
			connect.WithClientOptions(opts...),
		),
		getWorldNodeFeature: connect.NewClient[v1.GetWorldNodeFeatureRequest, v1.WorldNodeFeatureResponse](
			httpClient,
			baseURL+WorldNodeServiceGetWorldNodeFeatureProcedure,
			connect.WithSchema(worldNodeServiceMethods.ByName("GetWorldNodeFeature")),
			connect.WithClientOptions(opts...),
		),
		updateWorldNodeFeature: connect.NewClient[v1.UpdateWorldNodeFeatureRequest, v1.WorldNodeFeatureResponse](
			httpClient,
			baseURL+WorldNodeServiceUpdateWorldNodeFeatureProcedure,
			connect.WithSchema(worldNodeServiceMethods.ByName("UpdateWorldNodeFeature")),
			connect.WithClientOptions(opts...),
		),
		deleteWorldNodeFeature: connect.NewClient[v1.DeleteWorldNodeFeatureRequest, v1.DeleteResponse](
			httpClient,
			baseURL+WorldNodeServiceDeleteWorldNodeFeatureProcedure,
			connect.WithSchema(worldNodeServiceMethods.ByName("DeleteWorldNodeFeature")),
			connect.WithClientOptions(opts...),
		),
		listWorldNodeFeatures: connect.NewClient[v1.ListWorldNodeFeaturesRequest, v1.ListWorldNodeFeaturesResponse](
			httpClient,
			baseURL+WorldNodeServiceListWorldNodeFeaturesProcedure,
			connect.WithSchema(worldNodeServiceMethods.ByName("ListWorldNodeFeatures")),
			connect.WithClientOptions(opts...),
		),
	}
}

// worldNodeServiceClient implements WorldNodeServiceClient.
type worldNodeServiceClient struct {
	createWorldNode        *connect.Client[v1.CreateWorldNodeRequest, v1.WorldNodeResponse]
	getWorldNode           *connect.Client[v1.GetWorldNodeRequest, v1.WorldNodeResponse]
	updateWorldNode        *connect.Client[v1.UpdateWorldNodeRequest, v1.WorldNodeResponse]
	deleteWorldNode        *connect.Client[v1.DeleteWorldNodeRequest, v1.DeleteResponse]
	listWorldNodes         *connect.Client[v1.ListWorldNodesRequest, v1.ListWorldNodesResponse]
	createWorldNodeFeature *connect.Client[v1.CreateWorldNodeFeatureRequest, v1.WorldNodeFeatureResponse]
	getWorldNodeFeature    *connect.Client[v1.GetWorldNodeFeatureRequest, v1.WorldNodeFeatureResponse]
	updateWorldNodeFeature *connect.Client[v1.UpdateWorldNodeFeatureRequest, v1.WorldNodeFeatureResponse]
	deleteWorldNodeFeature *connect.Client[v1.DeleteWorldNodeFeatureRequest, v1.DeleteResponse]
	listWorldNodeFeatures  *connect.Client[v1.ListWorldNodeFeaturesRequest, v1.ListWorldNodeFeaturesResponse]
}

// CreateWorldNode calls game.v1.WorldNodeService.CreateWorldNode.
func (c *worldNodeServiceClient) CreateWorldNode(ctx context.Context, req *connect.Request[v1.CreateWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error) {
	return c.createWorldNode.CallUnary(ctx, req)
}

// GetWorldNode calls game.v1.WorldNodeService.GetWorldNode.
func (c *worldNodeServiceClient) GetWorldNode(ctx context.Context, req *connect.Request[v1.GetWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error) {
	return c.getWorldNode.CallUnary(ctx, req)
}

// UpdateWorldNode calls game.v1.WorldNodeService.UpdateWorldNode.
func (c *worldNodeServiceClient) UpdateWorldNode(ctx context.Context, req *connect.Request[v1.UpdateWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error) {
	return c.updateWorldNode.CallUnary(ctx, req)
}

// DeleteWorldNode calls game.v1.WorldNodeService.DeleteWorldNode.
func (c *worldNodeServiceClient) DeleteWorldNode(ctx context.Context, req *connect.Request[v1.DeleteWorldNodeRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.deleteWorldNode.CallUnary(ctx, req)
}

// ListWorldNodes calls game.v1.WorldNodeService.ListWorldNodes.
func (c *worldNodeServiceClient) ListWorldNodes(ctx context.Context, req *connect.Request[v1.ListWorldNodesRequest]) (*connect.Response[v1.ListWorldNodesResponse], error) {
	return c.listWorldNodes.CallUnary(ctx, req)
}

// CreateWorldNodeFeature calls game.v1.WorldNodeService.CreateWorldNodeFeature.
func (c *worldNodeServiceClient) CreateWorldNodeFeature(ctx context.Context, req *connect.Request[v1.CreateWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error) {
	return c.createWorldNodeFeature.CallUnary(ctx, req)
}

// GetWorldNodeFeature calls game.v1.WorldNodeService.GetWorldNodeFeature.
func (c *worldNodeServiceClient) GetWorldNodeFeature(ctx context.Context, req *connect.Request[v1.GetWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error) {
	return c.getWorldNodeFeature.CallUnary(ctx, req)
}

// UpdateWorldNodeFeature calls game.v1.WorldNodeService.UpdateWorldNodeFeature.
func (c *worldNodeServiceClient) UpdateWorldNodeFeature(ctx context.Context, req *connect.Request[v1.UpdateWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error) {
	return c.updateWorldNodeFeature.CallUnary(ctx, req)
}

// DeleteWorldNodeFeature calls game.v1.WorldNodeService.DeleteWorldNodeFeature.
func (c *worldNodeServiceClient) DeleteWorldNodeFeature(ctx context.Context, req *connect.Request[v1.DeleteWorldNodeFeatureRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.deleteWorldNodeFeature.CallUnary(ctx, req)
}

// ListWorldNodeFeatures calls game.v1.WorldNodeService.ListWorldNodeFeatures.
func (c *worldNodeServiceClient) ListWorldNodeFeatures(ctx context.Context, req *connect.Request[v1.ListWorldNodeFeaturesRequest]) (*connect.Response[v1.ListWorldNodeFeaturesResponse], error) {
	return c.listWorldNodeFeatures.CallUnary(ctx, req)
}

// WorldNodeServiceHandler is an implementation of the game.v1.WorldNodeService service.
type WorldNodeServiceHandler interface {
	CreateWorldNode(context.Context, *connect.Request[v1.CreateWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error)
	GetWorldNode(context.Context, *connect.Request[v1.GetWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error)
	UpdateWorldNode(context.Context, *connect.Request[v1.UpdateWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error)
	DeleteWorldNode(context.Context, *connect.Request[v1.DeleteWorldNodeRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListWorldNodes(context.Context, *connect.Request[v1.ListWorldNodesRequest]) (*connect.Response[v1.ListWorldNodesResponse], error)
	CreateWorldNodeFeature(context.Context, *connect.Request[v1.CreateWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error)
	GetWorldNodeFeature(context.Context, *connect.Request[v1.GetWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error)
	UpdateWorldNodeFeature(context.Context, *connect.Request[v1.UpdateWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error)
	DeleteWorldNodeFeature(context.Context, *connect.Request[v1.DeleteWorldNodeFeatureRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListWorldNodeFeatures(context.Context, *connect.Request[v1.ListWorldNodeFeaturesRequest]) (*connect.Response[v1.ListWorldNodeFeaturesResponse], error)
}

// NewWorldNodeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorldNodeServiceHandler(svc WorldNodeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	worldNodeServiceMethods := v1.File_game_v1_world_node_service_proto.Services().ByName("WorldNodeService").Methods()
	worldNodeServiceCreateWorldNodeHandler := connect.NewUnaryHandler(
		WorldNodeServiceCreateWorldNodeProcedure,
		svc.CreateWorldNode,
		connect.WithSchema(worldNodeServiceMethods.ByName("CreateWorldNode")),
		connect.WithHandlerOptions(opts...),
	)
	worldNodeServiceGetWorldNodeHandler := connect.NewUnaryHandler(
		WorldNodeServiceGetWorldNodeProcedure,
		svc.GetWorldNode,
		connect.WithSchema(worldNodeServiceMethods.ByName("GetWorldNode")),
		connect.WithHandlerOptions(opts...),
	)
	worldNodeServiceUpdateWorldNodeHandler := connect.NewUnaryHandler(
		WorldNodeServiceUpdateWorldNodeProcedure,
		svc.UpdateWorldNode,
		connect.WithSchema(worldNodeServiceMethods.ByName("UpdateWorldNode")),
		connect.WithHandlerOptions(opts...),
	)
	worldNodeServiceDeleteWorldNodeHandler := connect.NewUnaryHandler(
		WorldNodeServiceDeleteWorldNodeProcedure,
		svc.DeleteWorldNode,
		connect.WithSchema(worldNodeServiceMethods.ByName("DeleteWorldNode")),
		connect.WithHandlerOptions(opts...),
	)
	worldNodeServiceListWorldNodesHandler := connect.NewUnaryHandler(
		WorldNodeServiceListWorldNodesProcedure,
		svc.ListWorldNodes,
		connect.WithSchema(worldNodeServiceMethods.ByName("ListWorldNodes")),
		connect.WithHandlerOptions(opts...),
	)
	worldNodeServiceCreateWorldNodeFeatureHandler := connect.NewUnaryHandler(
		WorldNodeServiceCreateWorldNodeFeatureProcedure,
		svc.CreateWorldNodeFeature,
		connect.WithSchema(worldNodeServiceMethods.ByName("CreateWorldNodeFeature")),
		connect.WithHandlerOptions(opts...),
	)
	worldNodeServiceGetWorldNodeFeatureHandler := connect.NewUnaryHandler(
		WorldNodeServiceGetWorldNodeFeatureProcedure,
		svc.GetWorldNodeFeature,
		connect.WithSchema(worldNodeServiceMethods.ByName("GetWorldNodeFeature")),
		connect.WithHandlerOptions(opts...),
	)
	worldNodeServiceUpdateWorldNodeFeatureHandler := connect.NewUnaryHandler(
		WorldNodeServiceUpdateWorldNodeFeatureProcedure,
		svc.UpdateWorldNodeFeature,
		connect.WithSchema(worldNodeServiceMethods.ByName("UpdateWorldNodeFeature")),
		connect.WithHandlerOptions(opts...),
	)
	worldNodeServiceDeleteWorldNodeFeatureHandler := connect.NewUnaryHandler(
		WorldNodeServiceDeleteWorldNodeFeatureProcedure,
		svc.DeleteWorldNodeFeature,
		connect.WithSchema(worldNodeServiceMethods.ByName("DeleteWorldNodeFeature")),
		connect.WithHandlerOptions(opts...),
	)
	worldNodeServiceListWorldNodeFeaturesHandler := connect.NewUnaryHandler(
		WorldNodeServiceListWorldNodeFeaturesProcedure,
		svc.ListWorldNodeFeatures,
		connect.WithSchema(worldNodeServiceMethods.ByName("ListWorldNodeFeatures")),
		connect.WithHandlerOptions(opts...),
	)
	return "/game.v1.WorldNodeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorldNodeServiceCreateWorldNodeProcedure:
			worldNodeServiceCreateWorldNodeHandler.ServeHTTP(w, r)
		case WorldNodeServiceGetWorldNodeProcedure:
			worldNodeServiceGetWorldNodeHandler.ServeHTTP(w, r)
		case WorldNodeServiceUpdateWorldNodeProcedure:
			worldNodeServiceUpdateWorldNodeHandler.ServeHTTP(w, r)
		case WorldNodeServiceDeleteWorldNodeProcedure:
			worldNodeServiceDeleteWorldNodeHandler.ServeHTTP(w, r)
		case WorldNodeServiceListWorldNodesProcedure:
			worldNodeServiceListWorldNodesHandler.ServeHTTP(w, r)
		case WorldNodeServiceCreateWorldNodeFeatureProcedure:
			worldNodeServiceCreateWorldNodeFeatureHandler.ServeHTTP(w, r)
		case WorldNodeServiceGetWorldNodeFeatureProcedure:
			worldNodeServiceGetWorldNodeFeatureHandler.ServeHTTP(w, r)
		case WorldNodeServiceUpdateWorldNodeFeatureProcedure:
			worldNodeServiceUpdateWorldNodeFeatureHandler.ServeHTTP(w, r)
		case WorldNodeServiceDeleteWorldNodeFeatureProcedure:
			worldNodeServiceDeleteWorldNodeFeatureHandler.ServeHTTP(w, r)
		case WorldNodeServiceListWorldNodeFeaturesProcedure:
			worldNodeServiceListWorldNodeFeaturesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorldNodeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorldNodeServiceHandler struct{}

func (UnimplementedWorldNodeServiceHandler) CreateWorldNode(context.Context, *connect.Request[v1.CreateWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldNodeService.CreateWorldNode is not implemented"))
}

func (UnimplementedWorldNodeServiceHandler) GetWorldNode(context.Context, *connect.Request[v1.GetWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldNodeService.GetWorldNode is not implemented"))
}

func (UnimplementedWorldNodeServiceHandler) UpdateWorldNode(context.Context, *connect.Request[v1.UpdateWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldNodeService.UpdateWorldNode is not implemented"))
}

func (UnimplementedWorldNodeServiceHandler) DeleteWorldNode(context.Context, *connect.Request[v1.DeleteWorldNodeRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldNodeService.DeleteWorldNode is not implemented"))
}

func (UnimplementedWorldNodeServiceHandler) ListWorldNodes(context.Context, *connect.Request[v1.ListWorldNodesRequest]) (*connect.Response[v1.ListWorldNodesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldNodeService.ListWorldNodes is not implemented"))
}

func (UnimplementedWorldNodeServiceHandler) CreateWorldNodeFeature(context.Context, *connect.Request[v1.CreateWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldNodeService.CreateWorldNodeFeature is not implemented"))
}

func (UnimplementedWorldNodeServiceHandler) GetWorldNodeFeature(context.Context, *connect.Request[v1.GetWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldNodeService.GetWorldNodeFeature is not implemented"))
}

func (UnimplementedWorldNodeServiceHandler) UpdateWorldNodeFeature(context.Context, *connect.Request[v1.UpdateWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldNodeService.UpdateWorldNodeFeature is not implemented"))
}

func (UnimplementedWorldNodeServiceHandler) DeleteWorldNodeFeature(context.Context, *connect.Request[v1.DeleteWorldNodeFeatureRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldNodeService.DeleteWorldNodeFeature is not implemented"))
}

func (UnimplementedWorldNodeServiceHandler) ListWorldNodeFeatures(context.Context, *connect.Request[v1.ListWorldNodeFeaturesRequest]) (*connect.Response[v1.ListWorldNodeFeaturesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldNodeService.ListWorldNodeFeatures is not implemented"))
}
