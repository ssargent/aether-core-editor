// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protos/game/v1/item_service.proto

package gamev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ssargent/aether-core-editor/gen/game/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ItemCategoryServiceName is the fully-qualified name of the ItemCategoryService service.
	ItemCategoryServiceName = "game.v1.ItemCategoryService"
	// ItemServiceName is the fully-qualified name of the ItemService service.
	ItemServiceName = "game.v1.ItemService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ItemCategoryServiceCreateItemCategoryProcedure is the fully-qualified name of the
	// ItemCategoryService's CreateItemCategory RPC.
	ItemCategoryServiceCreateItemCategoryProcedure = "/game.v1.ItemCategoryService/CreateItemCategory"
	// ItemCategoryServiceGetItemCategoryProcedure is the fully-qualified name of the
	// ItemCategoryService's GetItemCategory RPC.
	ItemCategoryServiceGetItemCategoryProcedure = "/game.v1.ItemCategoryService/GetItemCategory"
	// ItemCategoryServiceUpdateItemCategoryProcedure is the fully-qualified name of the
	// ItemCategoryService's UpdateItemCategory RPC.
	ItemCategoryServiceUpdateItemCategoryProcedure = "/game.v1.ItemCategoryService/UpdateItemCategory"
	// ItemCategoryServiceDeleteItemCategoryProcedure is the fully-qualified name of the
	// ItemCategoryService's DeleteItemCategory RPC.
	ItemCategoryServiceDeleteItemCategoryProcedure = "/game.v1.ItemCategoryService/DeleteItemCategory"
	// ItemCategoryServiceListItemCategoriesProcedure is the fully-qualified name of the
	// ItemCategoryService's ListItemCategories RPC.
	ItemCategoryServiceListItemCategoriesProcedure = "/game.v1.ItemCategoryService/ListItemCategories"
	// ItemServiceCreateItemProcedure is the fully-qualified name of the ItemService's CreateItem RPC.
	ItemServiceCreateItemProcedure = "/game.v1.ItemService/CreateItem"
	// ItemServiceGetItemProcedure is the fully-qualified name of the ItemService's GetItem RPC.
	ItemServiceGetItemProcedure = "/game.v1.ItemService/GetItem"
	// ItemServiceUpdateItemProcedure is the fully-qualified name of the ItemService's UpdateItem RPC.
	ItemServiceUpdateItemProcedure = "/game.v1.ItemService/UpdateItem"
	// ItemServiceDeleteItemProcedure is the fully-qualified name of the ItemService's DeleteItem RPC.
	ItemServiceDeleteItemProcedure = "/game.v1.ItemService/DeleteItem"
	// ItemServiceListItemsProcedure is the fully-qualified name of the ItemService's ListItems RPC.
	ItemServiceListItemsProcedure = "/game.v1.ItemService/ListItems"
)

// ItemCategoryServiceClient is a client for the game.v1.ItemCategoryService service.
type ItemCategoryServiceClient interface {
	CreateItemCategory(context.Context, *connect.Request[v1.CreateItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error)
	GetItemCategory(context.Context, *connect.Request[v1.GetItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error)
	UpdateItemCategory(context.Context, *connect.Request[v1.UpdateItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error)
	DeleteItemCategory(context.Context, *connect.Request[v1.DeleteItemCategoryRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListItemCategories(context.Context, *connect.Request[v1.ListItemCategoriesRequest]) (*connect.Response[v1.ListItemCategoriesResponse], error)
}

// NewItemCategoryServiceClient constructs a client for the game.v1.ItemCategoryService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewItemCategoryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ItemCategoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	itemCategoryServiceMethods := v1.File_protos_game_v1_item_service_proto.Services().ByName("ItemCategoryService").Methods()
	return &itemCategoryServiceClient{
		createItemCategory: connect.NewClient[v1.CreateItemCategoryRequest, v1.ItemCategoryResponse](
			httpClient,
			baseURL+ItemCategoryServiceCreateItemCategoryProcedure,
			connect.WithSchema(itemCategoryServiceMethods.ByName("CreateItemCategory")),
			connect.WithClientOptions(opts...),
		),
		getItemCategory: connect.NewClient[v1.GetItemCategoryRequest, v1.ItemCategoryResponse](
			httpClient,
			baseURL+ItemCategoryServiceGetItemCategoryProcedure,
			connect.WithSchema(itemCategoryServiceMethods.ByName("GetItemCategory")),
			connect.WithClientOptions(opts...),
		),
		updateItemCategory: connect.NewClient[v1.UpdateItemCategoryRequest, v1.ItemCategoryResponse](
			httpClient,
			baseURL+ItemCategoryServiceUpdateItemCategoryProcedure,
			connect.WithSchema(itemCategoryServiceMethods.ByName("UpdateItemCategory")),
			connect.WithClientOptions(opts...),
		),
		deleteItemCategory: connect.NewClient[v1.DeleteItemCategoryRequest, v1.DeleteResponse](
			httpClient,
			baseURL+ItemCategoryServiceDeleteItemCategoryProcedure,
			connect.WithSchema(itemCategoryServiceMethods.ByName("DeleteItemCategory")),
			connect.WithClientOptions(opts...),
		),
		listItemCategories: connect.NewClient[v1.ListItemCategoriesRequest, v1.ListItemCategoriesResponse](
			httpClient,
			baseURL+ItemCategoryServiceListItemCategoriesProcedure,
			connect.WithSchema(itemCategoryServiceMethods.ByName("ListItemCategories")),
			connect.WithClientOptions(opts...),
		),
	}
}

// itemCategoryServiceClient implements ItemCategoryServiceClient.
type itemCategoryServiceClient struct {
	createItemCategory *connect.Client[v1.CreateItemCategoryRequest, v1.ItemCategoryResponse]
	getItemCategory    *connect.Client[v1.GetItemCategoryRequest, v1.ItemCategoryResponse]
	updateItemCategory *connect.Client[v1.UpdateItemCategoryRequest, v1.ItemCategoryResponse]
	deleteItemCategory *connect.Client[v1.DeleteItemCategoryRequest, v1.DeleteResponse]
	listItemCategories *connect.Client[v1.ListItemCategoriesRequest, v1.ListItemCategoriesResponse]
}

// CreateItemCategory calls game.v1.ItemCategoryService.CreateItemCategory.
func (c *itemCategoryServiceClient) CreateItemCategory(ctx context.Context, req *connect.Request[v1.CreateItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error) {
	return c.createItemCategory.CallUnary(ctx, req)
}

// GetItemCategory calls game.v1.ItemCategoryService.GetItemCategory.
func (c *itemCategoryServiceClient) GetItemCategory(ctx context.Context, req *connect.Request[v1.GetItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error) {
	return c.getItemCategory.CallUnary(ctx, req)
}

// UpdateItemCategory calls game.v1.ItemCategoryService.UpdateItemCategory.
func (c *itemCategoryServiceClient) UpdateItemCategory(ctx context.Context, req *connect.Request[v1.UpdateItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error) {
	return c.updateItemCategory.CallUnary(ctx, req)
}

// DeleteItemCategory calls game.v1.ItemCategoryService.DeleteItemCategory.
func (c *itemCategoryServiceClient) DeleteItemCategory(ctx context.Context, req *connect.Request[v1.DeleteItemCategoryRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.deleteItemCategory.CallUnary(ctx, req)
}

// ListItemCategories calls game.v1.ItemCategoryService.ListItemCategories.
func (c *itemCategoryServiceClient) ListItemCategories(ctx context.Context, req *connect.Request[v1.ListItemCategoriesRequest]) (*connect.Response[v1.ListItemCategoriesResponse], error) {
	return c.listItemCategories.CallUnary(ctx, req)
}

// ItemCategoryServiceHandler is an implementation of the game.v1.ItemCategoryService service.
type ItemCategoryServiceHandler interface {
	CreateItemCategory(context.Context, *connect.Request[v1.CreateItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error)
	GetItemCategory(context.Context, *connect.Request[v1.GetItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error)
	UpdateItemCategory(context.Context, *connect.Request[v1.UpdateItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error)
	DeleteItemCategory(context.Context, *connect.Request[v1.DeleteItemCategoryRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListItemCategories(context.Context, *connect.Request[v1.ListItemCategoriesRequest]) (*connect.Response[v1.ListItemCategoriesResponse], error)
}

// NewItemCategoryServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewItemCategoryServiceHandler(svc ItemCategoryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	itemCategoryServiceMethods := v1.File_protos_game_v1_item_service_proto.Services().ByName("ItemCategoryService").Methods()
	itemCategoryServiceCreateItemCategoryHandler := connect.NewUnaryHandler(
		ItemCategoryServiceCreateItemCategoryProcedure,
		svc.CreateItemCategory,
		connect.WithSchema(itemCategoryServiceMethods.ByName("CreateItemCategory")),
		connect.WithHandlerOptions(opts...),
	)
	itemCategoryServiceGetItemCategoryHandler := connect.NewUnaryHandler(
		ItemCategoryServiceGetItemCategoryProcedure,
		svc.GetItemCategory,
		connect.WithSchema(itemCategoryServiceMethods.ByName("GetItemCategory")),
		connect.WithHandlerOptions(opts...),
	)
	itemCategoryServiceUpdateItemCategoryHandler := connect.NewUnaryHandler(
		ItemCategoryServiceUpdateItemCategoryProcedure,
		svc.UpdateItemCategory,
		connect.WithSchema(itemCategoryServiceMethods.ByName("UpdateItemCategory")),
		connect.WithHandlerOptions(opts...),
	)
	itemCategoryServiceDeleteItemCategoryHandler := connect.NewUnaryHandler(
		ItemCategoryServiceDeleteItemCategoryProcedure,
		svc.DeleteItemCategory,
		connect.WithSchema(itemCategoryServiceMethods.ByName("DeleteItemCategory")),
		connect.WithHandlerOptions(opts...),
	)
	itemCategoryServiceListItemCategoriesHandler := connect.NewUnaryHandler(
		ItemCategoryServiceListItemCategoriesProcedure,
		svc.ListItemCategories,
		connect.WithSchema(itemCategoryServiceMethods.ByName("ListItemCategories")),
		connect.WithHandlerOptions(opts...),
	)
	return "/game.v1.ItemCategoryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ItemCategoryServiceCreateItemCategoryProcedure:
			itemCategoryServiceCreateItemCategoryHandler.ServeHTTP(w, r)
		case ItemCategoryServiceGetItemCategoryProcedure:
			itemCategoryServiceGetItemCategoryHandler.ServeHTTP(w, r)
		case ItemCategoryServiceUpdateItemCategoryProcedure:
			itemCategoryServiceUpdateItemCategoryHandler.ServeHTTP(w, r)
		case ItemCategoryServiceDeleteItemCategoryProcedure:
			itemCategoryServiceDeleteItemCategoryHandler.ServeHTTP(w, r)
		case ItemCategoryServiceListItemCategoriesProcedure:
			itemCategoryServiceListItemCategoriesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedItemCategoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedItemCategoryServiceHandler struct{}

func (UnimplementedItemCategoryServiceHandler) CreateItemCategory(context.Context, *connect.Request[v1.CreateItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.ItemCategoryService.CreateItemCategory is not implemented"))
}

func (UnimplementedItemCategoryServiceHandler) GetItemCategory(context.Context, *connect.Request[v1.GetItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.ItemCategoryService.GetItemCategory is not implemented"))
}

func (UnimplementedItemCategoryServiceHandler) UpdateItemCategory(context.Context, *connect.Request[v1.UpdateItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.ItemCategoryService.UpdateItemCategory is not implemented"))
}

func (UnimplementedItemCategoryServiceHandler) DeleteItemCategory(context.Context, *connect.Request[v1.DeleteItemCategoryRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.ItemCategoryService.DeleteItemCategory is not implemented"))
}

func (UnimplementedItemCategoryServiceHandler) ListItemCategories(context.Context, *connect.Request[v1.ListItemCategoriesRequest]) (*connect.Response[v1.ListItemCategoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.ItemCategoryService.ListItemCategories is not implemented"))
}

// ItemServiceClient is a client for the game.v1.ItemService service.
type ItemServiceClient interface {
	CreateItem(context.Context, *connect.Request[v1.CreateItemRequest]) (*connect.Response[v1.ItemResponse], error)
	GetItem(context.Context, *connect.Request[v1.GetItemRequest]) (*connect.Response[v1.ItemResponse], error)
	UpdateItem(context.Context, *connect.Request[v1.UpdateItemRequest]) (*connect.Response[v1.ItemResponse], error)
	DeleteItem(context.Context, *connect.Request[v1.DeleteItemRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListItems(context.Context, *connect.Request[v1.ListItemsRequest]) (*connect.Response[v1.ListItemsResponse], error)
}

// NewItemServiceClient constructs a client for the game.v1.ItemService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewItemServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ItemServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	itemServiceMethods := v1.File_protos_game_v1_item_service_proto.Services().ByName("ItemService").Methods()
	return &itemServiceClient{
		createItem: connect.NewClient[v1.CreateItemRequest, v1.ItemResponse](
			httpClient,
			baseURL+ItemServiceCreateItemProcedure,
			connect.WithSchema(itemServiceMethods.ByName("CreateItem")),
			connect.WithClientOptions(opts...),
		),
		getItem: connect.NewClient[v1.GetItemRequest, v1.ItemResponse](
			httpClient,
			baseURL+ItemServiceGetItemProcedure,
			connect.WithSchema(itemServiceMethods.ByName("GetItem")),
			connect.WithClientOptions(opts...),
		),
		updateItem: connect.NewClient[v1.UpdateItemRequest, v1.ItemResponse](
			httpClient,
			baseURL+ItemServiceUpdateItemProcedure,
			connect.WithSchema(itemServiceMethods.ByName("UpdateItem")),
			connect.WithClientOptions(opts...),
		),
		deleteItem: connect.NewClient[v1.DeleteItemRequest, v1.DeleteResponse](
			httpClient,
			baseURL+ItemServiceDeleteItemProcedure,
			connect.WithSchema(itemServiceMethods.ByName("DeleteItem")),
			connect.WithClientOptions(opts...),
		),
		listItems: connect.NewClient[v1.ListItemsRequest, v1.ListItemsResponse](
			httpClient,
			baseURL+ItemServiceListItemsProcedure,
			connect.WithSchema(itemServiceMethods.ByName("ListItems")),
			connect.WithClientOptions(opts...),
		),
	}
}

// itemServiceClient implements ItemServiceClient.
type itemServiceClient struct {
	createItem *connect.Client[v1.CreateItemRequest, v1.ItemResponse]
	getItem    *connect.Client[v1.GetItemRequest, v1.ItemResponse]
	updateItem *connect.Client[v1.UpdateItemRequest, v1.ItemResponse]
	deleteItem *connect.Client[v1.DeleteItemRequest, v1.DeleteResponse]
	listItems  *connect.Client[v1.ListItemsRequest, v1.ListItemsResponse]
}

// CreateItem calls game.v1.ItemService.CreateItem.
func (c *itemServiceClient) CreateItem(ctx context.Context, req *connect.Request[v1.CreateItemRequest]) (*connect.Response[v1.ItemResponse], error) {
	return c.createItem.CallUnary(ctx, req)
}

// GetItem calls game.v1.ItemService.GetItem.
func (c *itemServiceClient) GetItem(ctx context.Context, req *connect.Request[v1.GetItemRequest]) (*connect.Response[v1.ItemResponse], error) {
	return c.getItem.CallUnary(ctx, req)
}

// UpdateItem calls game.v1.ItemService.UpdateItem.
func (c *itemServiceClient) UpdateItem(ctx context.Context, req *connect.Request[v1.UpdateItemRequest]) (*connect.Response[v1.ItemResponse], error) {
	return c.updateItem.CallUnary(ctx, req)
}

// DeleteItem calls game.v1.ItemService.DeleteItem.
func (c *itemServiceClient) DeleteItem(ctx context.Context, req *connect.Request[v1.DeleteItemRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.deleteItem.CallUnary(ctx, req)
}

// ListItems calls game.v1.ItemService.ListItems.
func (c *itemServiceClient) ListItems(ctx context.Context, req *connect.Request[v1.ListItemsRequest]) (*connect.Response[v1.ListItemsResponse], error) {
	return c.listItems.CallUnary(ctx, req)
}

// ItemServiceHandler is an implementation of the game.v1.ItemService service.
type ItemServiceHandler interface {
	CreateItem(context.Context, *connect.Request[v1.CreateItemRequest]) (*connect.Response[v1.ItemResponse], error)
	GetItem(context.Context, *connect.Request[v1.GetItemRequest]) (*connect.Response[v1.ItemResponse], error)
	UpdateItem(context.Context, *connect.Request[v1.UpdateItemRequest]) (*connect.Response[v1.ItemResponse], error)
	DeleteItem(context.Context, *connect.Request[v1.DeleteItemRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListItems(context.Context, *connect.Request[v1.ListItemsRequest]) (*connect.Response[v1.ListItemsResponse], error)
}

// NewItemServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewItemServiceHandler(svc ItemServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	itemServiceMethods := v1.File_protos_game_v1_item_service_proto.Services().ByName("ItemService").Methods()
	itemServiceCreateItemHandler := connect.NewUnaryHandler(
		ItemServiceCreateItemProcedure,
		svc.CreateItem,
		connect.WithSchema(itemServiceMethods.ByName("CreateItem")),
		connect.WithHandlerOptions(opts...),
	)
	itemServiceGetItemHandler := connect.NewUnaryHandler(
		ItemServiceGetItemProcedure,
		svc.GetItem,
		connect.WithSchema(itemServiceMethods.ByName("GetItem")),
		connect.WithHandlerOptions(opts...),
	)
	itemServiceUpdateItemHandler := connect.NewUnaryHandler(
		ItemServiceUpdateItemProcedure,
		svc.UpdateItem,
		connect.WithSchema(itemServiceMethods.ByName("UpdateItem")),
		connect.WithHandlerOptions(opts...),
	)
	itemServiceDeleteItemHandler := connect.NewUnaryHandler(
		ItemServiceDeleteItemProcedure,
		svc.DeleteItem,
		connect.WithSchema(itemServiceMethods.ByName("DeleteItem")),
		connect.WithHandlerOptions(opts...),
	)
	itemServiceListItemsHandler := connect.NewUnaryHandler(
		ItemServiceListItemsProcedure,
		svc.ListItems,
		connect.WithSchema(itemServiceMethods.ByName("ListItems")),
		connect.WithHandlerOptions(opts...),
	)
	return "/game.v1.ItemService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ItemServiceCreateItemProcedure:
			itemServiceCreateItemHandler.ServeHTTP(w, r)
		case ItemServiceGetItemProcedure:
			itemServiceGetItemHandler.ServeHTTP(w, r)
		case ItemServiceUpdateItemProcedure:
			itemServiceUpdateItemHandler.ServeHTTP(w, r)
		case ItemServiceDeleteItemProcedure:
			itemServiceDeleteItemHandler.ServeHTTP(w, r)
		case ItemServiceListItemsProcedure:
			itemServiceListItemsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedItemServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedItemServiceHandler struct{}

func (UnimplementedItemServiceHandler) CreateItem(context.Context, *connect.Request[v1.CreateItemRequest]) (*connect.Response[v1.ItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.ItemService.CreateItem is not implemented"))
}

func (UnimplementedItemServiceHandler) GetItem(context.Context, *connect.Request[v1.GetItemRequest]) (*connect.Response[v1.ItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.ItemService.GetItem is not implemented"))
}

func (UnimplementedItemServiceHandler) UpdateItem(context.Context, *connect.Request[v1.UpdateItemRequest]) (*connect.Response[v1.ItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.ItemService.UpdateItem is not implemented"))
}

func (UnimplementedItemServiceHandler) DeleteItem(context.Context, *connect.Request[v1.DeleteItemRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.ItemService.DeleteItem is not implemented"))
}

func (UnimplementedItemServiceHandler) ListItems(context.Context, *connect.Request[v1.ListItemsRequest]) (*connect.Response[v1.ListItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.ItemService.ListItems is not implemented"))
}
