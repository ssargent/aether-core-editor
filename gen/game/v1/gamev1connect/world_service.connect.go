// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protos/game/v1/world_service.proto

package gamev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ssargent/aether-core-editor/gen/game/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WorldServiceName is the fully-qualified name of the WorldService service.
	WorldServiceName = "game.v1.WorldService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WorldServiceCreateWorldProcedure is the fully-qualified name of the WorldService's CreateWorld
	// RPC.
	WorldServiceCreateWorldProcedure = "/game.v1.WorldService/CreateWorld"
	// WorldServiceGetWorldProcedure is the fully-qualified name of the WorldService's GetWorld RPC.
	WorldServiceGetWorldProcedure = "/game.v1.WorldService/GetWorld"
	// WorldServiceUpdateWorldProcedure is the fully-qualified name of the WorldService's UpdateWorld
	// RPC.
	WorldServiceUpdateWorldProcedure = "/game.v1.WorldService/UpdateWorld"
	// WorldServiceDeleteWorldProcedure is the fully-qualified name of the WorldService's DeleteWorld
	// RPC.
	WorldServiceDeleteWorldProcedure = "/game.v1.WorldService/DeleteWorld"
	// WorldServiceListWorldsProcedure is the fully-qualified name of the WorldService's ListWorlds RPC.
	WorldServiceListWorldsProcedure = "/game.v1.WorldService/ListWorlds"
)

// WorldServiceClient is a client for the game.v1.WorldService service.
type WorldServiceClient interface {
	CreateWorld(context.Context, *connect.Request[v1.CreateWorldRequest]) (*connect.Response[v1.WorldResponse], error)
	GetWorld(context.Context, *connect.Request[v1.GetWorldRequest]) (*connect.Response[v1.WorldResponse], error)
	UpdateWorld(context.Context, *connect.Request[v1.UpdateWorldRequest]) (*connect.Response[v1.WorldResponse], error)
	DeleteWorld(context.Context, *connect.Request[v1.DeleteWorldRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListWorlds(context.Context, *connect.Request[v1.ListWorldsRequest]) (*connect.Response[v1.ListWorldsResponse], error)
}

// NewWorldServiceClient constructs a client for the game.v1.WorldService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorldServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WorldServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	worldServiceMethods := v1.File_protos_game_v1_world_service_proto.Services().ByName("WorldService").Methods()
	return &worldServiceClient{
		createWorld: connect.NewClient[v1.CreateWorldRequest, v1.WorldResponse](
			httpClient,
			baseURL+WorldServiceCreateWorldProcedure,
			connect.WithSchema(worldServiceMethods.ByName("CreateWorld")),
			connect.WithClientOptions(opts...),
		),
		getWorld: connect.NewClient[v1.GetWorldRequest, v1.WorldResponse](
			httpClient,
			baseURL+WorldServiceGetWorldProcedure,
			connect.WithSchema(worldServiceMethods.ByName("GetWorld")),
			connect.WithClientOptions(opts...),
		),
		updateWorld: connect.NewClient[v1.UpdateWorldRequest, v1.WorldResponse](
			httpClient,
			baseURL+WorldServiceUpdateWorldProcedure,
			connect.WithSchema(worldServiceMethods.ByName("UpdateWorld")),
			connect.WithClientOptions(opts...),
		),
		deleteWorld: connect.NewClient[v1.DeleteWorldRequest, v1.DeleteResponse](
			httpClient,
			baseURL+WorldServiceDeleteWorldProcedure,
			connect.WithSchema(worldServiceMethods.ByName("DeleteWorld")),
			connect.WithClientOptions(opts...),
		),
		listWorlds: connect.NewClient[v1.ListWorldsRequest, v1.ListWorldsResponse](
			httpClient,
			baseURL+WorldServiceListWorldsProcedure,
			connect.WithSchema(worldServiceMethods.ByName("ListWorlds")),
			connect.WithClientOptions(opts...),
		),
	}
}

// worldServiceClient implements WorldServiceClient.
type worldServiceClient struct {
	createWorld *connect.Client[v1.CreateWorldRequest, v1.WorldResponse]
	getWorld    *connect.Client[v1.GetWorldRequest, v1.WorldResponse]
	updateWorld *connect.Client[v1.UpdateWorldRequest, v1.WorldResponse]
	deleteWorld *connect.Client[v1.DeleteWorldRequest, v1.DeleteResponse]
	listWorlds  *connect.Client[v1.ListWorldsRequest, v1.ListWorldsResponse]
}

// CreateWorld calls game.v1.WorldService.CreateWorld.
func (c *worldServiceClient) CreateWorld(ctx context.Context, req *connect.Request[v1.CreateWorldRequest]) (*connect.Response[v1.WorldResponse], error) {
	return c.createWorld.CallUnary(ctx, req)
}

// GetWorld calls game.v1.WorldService.GetWorld.
func (c *worldServiceClient) GetWorld(ctx context.Context, req *connect.Request[v1.GetWorldRequest]) (*connect.Response[v1.WorldResponse], error) {
	return c.getWorld.CallUnary(ctx, req)
}

// UpdateWorld calls game.v1.WorldService.UpdateWorld.
func (c *worldServiceClient) UpdateWorld(ctx context.Context, req *connect.Request[v1.UpdateWorldRequest]) (*connect.Response[v1.WorldResponse], error) {
	return c.updateWorld.CallUnary(ctx, req)
}

// DeleteWorld calls game.v1.WorldService.DeleteWorld.
func (c *worldServiceClient) DeleteWorld(ctx context.Context, req *connect.Request[v1.DeleteWorldRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.deleteWorld.CallUnary(ctx, req)
}

// ListWorlds calls game.v1.WorldService.ListWorlds.
func (c *worldServiceClient) ListWorlds(ctx context.Context, req *connect.Request[v1.ListWorldsRequest]) (*connect.Response[v1.ListWorldsResponse], error) {
	return c.listWorlds.CallUnary(ctx, req)
}

// WorldServiceHandler is an implementation of the game.v1.WorldService service.
type WorldServiceHandler interface {
	CreateWorld(context.Context, *connect.Request[v1.CreateWorldRequest]) (*connect.Response[v1.WorldResponse], error)
	GetWorld(context.Context, *connect.Request[v1.GetWorldRequest]) (*connect.Response[v1.WorldResponse], error)
	UpdateWorld(context.Context, *connect.Request[v1.UpdateWorldRequest]) (*connect.Response[v1.WorldResponse], error)
	DeleteWorld(context.Context, *connect.Request[v1.DeleteWorldRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListWorlds(context.Context, *connect.Request[v1.ListWorldsRequest]) (*connect.Response[v1.ListWorldsResponse], error)
}

// NewWorldServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorldServiceHandler(svc WorldServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	worldServiceMethods := v1.File_protos_game_v1_world_service_proto.Services().ByName("WorldService").Methods()
	worldServiceCreateWorldHandler := connect.NewUnaryHandler(
		WorldServiceCreateWorldProcedure,
		svc.CreateWorld,
		connect.WithSchema(worldServiceMethods.ByName("CreateWorld")),
		connect.WithHandlerOptions(opts...),
	)
	worldServiceGetWorldHandler := connect.NewUnaryHandler(
		WorldServiceGetWorldProcedure,
		svc.GetWorld,
		connect.WithSchema(worldServiceMethods.ByName("GetWorld")),
		connect.WithHandlerOptions(opts...),
	)
	worldServiceUpdateWorldHandler := connect.NewUnaryHandler(
		WorldServiceUpdateWorldProcedure,
		svc.UpdateWorld,
		connect.WithSchema(worldServiceMethods.ByName("UpdateWorld")),
		connect.WithHandlerOptions(opts...),
	)
	worldServiceDeleteWorldHandler := connect.NewUnaryHandler(
		WorldServiceDeleteWorldProcedure,
		svc.DeleteWorld,
		connect.WithSchema(worldServiceMethods.ByName("DeleteWorld")),
		connect.WithHandlerOptions(opts...),
	)
	worldServiceListWorldsHandler := connect.NewUnaryHandler(
		WorldServiceListWorldsProcedure,
		svc.ListWorlds,
		connect.WithSchema(worldServiceMethods.ByName("ListWorlds")),
		connect.WithHandlerOptions(opts...),
	)
	return "/game.v1.WorldService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorldServiceCreateWorldProcedure:
			worldServiceCreateWorldHandler.ServeHTTP(w, r)
		case WorldServiceGetWorldProcedure:
			worldServiceGetWorldHandler.ServeHTTP(w, r)
		case WorldServiceUpdateWorldProcedure:
			worldServiceUpdateWorldHandler.ServeHTTP(w, r)
		case WorldServiceDeleteWorldProcedure:
			worldServiceDeleteWorldHandler.ServeHTTP(w, r)
		case WorldServiceListWorldsProcedure:
			worldServiceListWorldsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorldServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorldServiceHandler struct{}

func (UnimplementedWorldServiceHandler) CreateWorld(context.Context, *connect.Request[v1.CreateWorldRequest]) (*connect.Response[v1.WorldResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldService.CreateWorld is not implemented"))
}

func (UnimplementedWorldServiceHandler) GetWorld(context.Context, *connect.Request[v1.GetWorldRequest]) (*connect.Response[v1.WorldResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldService.GetWorld is not implemented"))
}

func (UnimplementedWorldServiceHandler) UpdateWorld(context.Context, *connect.Request[v1.UpdateWorldRequest]) (*connect.Response[v1.WorldResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldService.UpdateWorld is not implemented"))
}

func (UnimplementedWorldServiceHandler) DeleteWorld(context.Context, *connect.Request[v1.DeleteWorldRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldService.DeleteWorld is not implemented"))
}

func (UnimplementedWorldServiceHandler) ListWorlds(context.Context, *connect.Request[v1.ListWorldsRequest]) (*connect.Response[v1.ListWorldsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldService.ListWorlds is not implemented"))
}
