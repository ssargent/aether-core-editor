// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protos/game/v1/game_management_service.proto

package gamev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ssargent/aether-core-editor/gen/game/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GameManagementServiceName is the fully-qualified name of the GameManagementService service.
	GameManagementServiceName = "game.v1.GameManagementService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GameManagementServiceExportWorldProcedure is the fully-qualified name of the
	// GameManagementService's ExportWorld RPC.
	GameManagementServiceExportWorldProcedure = "/game.v1.GameManagementService/ExportWorld"
	// GameManagementServiceImportWorldProcedure is the fully-qualified name of the
	// GameManagementService's ImportWorld RPC.
	GameManagementServiceImportWorldProcedure = "/game.v1.GameManagementService/ImportWorld"
	// GameManagementServiceGetWorldStatisticsProcedure is the fully-qualified name of the
	// GameManagementService's GetWorldStatistics RPC.
	GameManagementServiceGetWorldStatisticsProcedure = "/game.v1.GameManagementService/GetWorldStatistics"
	// GameManagementServiceGetGameSystemHealthProcedure is the fully-qualified name of the
	// GameManagementService's GetGameSystemHealth RPC.
	GameManagementServiceGetGameSystemHealthProcedure = "/game.v1.GameManagementService/GetGameSystemHealth"
	// GameManagementServiceFilterWorldsProcedure is the fully-qualified name of the
	// GameManagementService's FilterWorlds RPC.
	GameManagementServiceFilterWorldsProcedure = "/game.v1.GameManagementService/FilterWorlds"
	// GameManagementServiceFilterAttributesProcedure is the fully-qualified name of the
	// GameManagementService's FilterAttributes RPC.
	GameManagementServiceFilterAttributesProcedure = "/game.v1.GameManagementService/FilterAttributes"
	// GameManagementServiceFilterCapabilitiesProcedure is the fully-qualified name of the
	// GameManagementService's FilterCapabilities RPC.
	GameManagementServiceFilterCapabilitiesProcedure = "/game.v1.GameManagementService/FilterCapabilities"
	// GameManagementServiceFilterCharacterClassesProcedure is the fully-qualified name of the
	// GameManagementService's FilterCharacterClasses RPC.
	GameManagementServiceFilterCharacterClassesProcedure = "/game.v1.GameManagementService/FilterCharacterClasses"
	// GameManagementServiceFilterCharacterClassFeaturesProcedure is the fully-qualified name of the
	// GameManagementService's FilterCharacterClassFeatures RPC.
	GameManagementServiceFilterCharacterClassFeaturesProcedure = "/game.v1.GameManagementService/FilterCharacterClassFeatures"
	// GameManagementServiceFilterCurrenciesProcedure is the fully-qualified name of the
	// GameManagementService's FilterCurrencies RPC.
	GameManagementServiceFilterCurrenciesProcedure = "/game.v1.GameManagementService/FilterCurrencies"
	// GameManagementServiceFilterEnemiesProcedure is the fully-qualified name of the
	// GameManagementService's FilterEnemies RPC.
	GameManagementServiceFilterEnemiesProcedure = "/game.v1.GameManagementService/FilterEnemies"
	// GameManagementServiceFilterItemCategoriesProcedure is the fully-qualified name of the
	// GameManagementService's FilterItemCategories RPC.
	GameManagementServiceFilterItemCategoriesProcedure = "/game.v1.GameManagementService/FilterItemCategories"
	// GameManagementServiceFilterItemsProcedure is the fully-qualified name of the
	// GameManagementService's FilterItems RPC.
	GameManagementServiceFilterItemsProcedure = "/game.v1.GameManagementService/FilterItems"
	// GameManagementServiceFilterNpcTemplatesProcedure is the fully-qualified name of the
	// GameManagementService's FilterNpcTemplates RPC.
	GameManagementServiceFilterNpcTemplatesProcedure = "/game.v1.GameManagementService/FilterNpcTemplates"
	// GameManagementServiceFilterNpcSpawnRulesProcedure is the fully-qualified name of the
	// GameManagementService's FilterNpcSpawnRules RPC.
	GameManagementServiceFilterNpcSpawnRulesProcedure = "/game.v1.GameManagementService/FilterNpcSpawnRules"
	// GameManagementServiceFilterRacesProcedure is the fully-qualified name of the
	// GameManagementService's FilterRaces RPC.
	GameManagementServiceFilterRacesProcedure = "/game.v1.GameManagementService/FilterRaces"
	// GameManagementServiceFilterWorldNodesProcedure is the fully-qualified name of the
	// GameManagementService's FilterWorldNodes RPC.
	GameManagementServiceFilterWorldNodesProcedure = "/game.v1.GameManagementService/FilterWorldNodes"
	// GameManagementServiceFilterWorldNodeFeaturesProcedure is the fully-qualified name of the
	// GameManagementService's FilterWorldNodeFeatures RPC.
	GameManagementServiceFilterWorldNodeFeaturesProcedure = "/game.v1.GameManagementService/FilterWorldNodeFeatures"
)

// GameManagementServiceClient is a client for the game.v1.GameManagementService service.
type GameManagementServiceClient interface {
	// Bulk operations
	ExportWorld(context.Context, *connect.Request[v1.Id]) (*connect.ServerStreamForClient[structpb.Struct], error)
	ImportWorld(context.Context) *connect.ClientStreamForClient[structpb.Struct, v1.WorldResponse]
	// Statistics and overview
	GetWorldStatistics(context.Context, *connect.Request[v1.Id]) (*connect.Response[structpb.Struct], error)
	GetGameSystemHealth(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[structpb.Struct], error)
	// Filter-based querying for advanced use cases
	FilterWorlds(context.Context, *connect.Request[v1.WorldFilter]) (*connect.Response[v1.ListWorldsResponse], error)
	FilterAttributes(context.Context, *connect.Request[v1.AttributeFilter]) (*connect.Response[v1.ListAttributesResponse], error)
	FilterCapabilities(context.Context, *connect.Request[v1.CapabilityFilter]) (*connect.Response[v1.ListCapabilitiesResponse], error)
	FilterCharacterClasses(context.Context, *connect.Request[v1.CharacterClassFilter]) (*connect.Response[v1.ListCharacterClassesResponse], error)
	FilterCharacterClassFeatures(context.Context, *connect.Request[v1.CharacterClassFeatureFilter]) (*connect.Response[v1.ListCharacterClassFeaturesResponse], error)
	FilterCurrencies(context.Context, *connect.Request[v1.CurrencyFilter]) (*connect.Response[v1.ListCurrenciesResponse], error)
	FilterEnemies(context.Context, *connect.Request[v1.EnemyFilter]) (*connect.Response[v1.ListEnemiesResponse], error)
	FilterItemCategories(context.Context, *connect.Request[v1.ItemCategoryFilter]) (*connect.Response[v1.ListItemCategoriesResponse], error)
	FilterItems(context.Context, *connect.Request[v1.ItemFilter]) (*connect.Response[v1.ListItemsResponse], error)
	FilterNpcTemplates(context.Context, *connect.Request[v1.NpcTemplateFilter]) (*connect.Response[v1.ListNpcTemplatesResponse], error)
	FilterNpcSpawnRules(context.Context, *connect.Request[v1.NpcSpawnRuleFilter]) (*connect.Response[v1.ListNpcSpawnRulesResponse], error)
	FilterRaces(context.Context, *connect.Request[v1.RaceFilter]) (*connect.Response[v1.ListRacesResponse], error)
	FilterWorldNodes(context.Context, *connect.Request[v1.WorldNodeFilter]) (*connect.Response[v1.ListWorldNodesResponse], error)
	FilterWorldNodeFeatures(context.Context, *connect.Request[v1.WorldNodeFeatureFilter]) (*connect.Response[v1.ListWorldNodeFeaturesResponse], error)
}

// NewGameManagementServiceClient constructs a client for the game.v1.GameManagementService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGameManagementServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GameManagementServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	gameManagementServiceMethods := v1.File_protos_game_v1_game_management_service_proto.Services().ByName("GameManagementService").Methods()
	return &gameManagementServiceClient{
		exportWorld: connect.NewClient[v1.Id, structpb.Struct](
			httpClient,
			baseURL+GameManagementServiceExportWorldProcedure,
			connect.WithSchema(gameManagementServiceMethods.ByName("ExportWorld")),
			connect.WithClientOptions(opts...),
		),
		importWorld: connect.NewClient[structpb.Struct, v1.WorldResponse](
			httpClient,
			baseURL+GameManagementServiceImportWorldProcedure,
			connect.WithSchema(gameManagementServiceMethods.ByName("ImportWorld")),
			connect.WithClientOptions(opts...),
		),
		getWorldStatistics: connect.NewClient[v1.Id, structpb.Struct](
			httpClient,
			baseURL+GameManagementServiceGetWorldStatisticsProcedure,
			connect.WithSchema(gameManagementServiceMethods.ByName("GetWorldStatistics")),
			connect.WithClientOptions(opts...),
		),
		getGameSystemHealth: connect.NewClient[emptypb.Empty, structpb.Struct](
			httpClient,
			baseURL+GameManagementServiceGetGameSystemHealthProcedure,
			connect.WithSchema(gameManagementServiceMethods.ByName("GetGameSystemHealth")),
			connect.WithClientOptions(opts...),
		),
		filterWorlds: connect.NewClient[v1.WorldFilter, v1.ListWorldsResponse](
			httpClient,
			baseURL+GameManagementServiceFilterWorldsProcedure,
			connect.WithSchema(gameManagementServiceMethods.ByName("FilterWorlds")),
			connect.WithClientOptions(opts...),
		),
		filterAttributes: connect.NewClient[v1.AttributeFilter, v1.ListAttributesResponse](
			httpClient,
			baseURL+GameManagementServiceFilterAttributesProcedure,
			connect.WithSchema(gameManagementServiceMethods.ByName("FilterAttributes")),
			connect.WithClientOptions(opts...),
		),
		filterCapabilities: connect.NewClient[v1.CapabilityFilter, v1.ListCapabilitiesResponse](
			httpClient,
			baseURL+GameManagementServiceFilterCapabilitiesProcedure,
			connect.WithSchema(gameManagementServiceMethods.ByName("FilterCapabilities")),
			connect.WithClientOptions(opts...),
		),
		filterCharacterClasses: connect.NewClient[v1.CharacterClassFilter, v1.ListCharacterClassesResponse](
			httpClient,
			baseURL+GameManagementServiceFilterCharacterClassesProcedure,
			connect.WithSchema(gameManagementServiceMethods.ByName("FilterCharacterClasses")),
			connect.WithClientOptions(opts...),
		),
		filterCharacterClassFeatures: connect.NewClient[v1.CharacterClassFeatureFilter, v1.ListCharacterClassFeaturesResponse](
			httpClient,
			baseURL+GameManagementServiceFilterCharacterClassFeaturesProcedure,
			connect.WithSchema(gameManagementServiceMethods.ByName("FilterCharacterClassFeatures")),
			connect.WithClientOptions(opts...),
		),
		filterCurrencies: connect.NewClient[v1.CurrencyFilter, v1.ListCurrenciesResponse](
			httpClient,
			baseURL+GameManagementServiceFilterCurrenciesProcedure,
			connect.WithSchema(gameManagementServiceMethods.ByName("FilterCurrencies")),
			connect.WithClientOptions(opts...),
		),
		filterEnemies: connect.NewClient[v1.EnemyFilter, v1.ListEnemiesResponse](
			httpClient,
			baseURL+GameManagementServiceFilterEnemiesProcedure,
			connect.WithSchema(gameManagementServiceMethods.ByName("FilterEnemies")),
			connect.WithClientOptions(opts...),
		),
		filterItemCategories: connect.NewClient[v1.ItemCategoryFilter, v1.ListItemCategoriesResponse](
			httpClient,
			baseURL+GameManagementServiceFilterItemCategoriesProcedure,
			connect.WithSchema(gameManagementServiceMethods.ByName("FilterItemCategories")),
			connect.WithClientOptions(opts...),
		),
		filterItems: connect.NewClient[v1.ItemFilter, v1.ListItemsResponse](
			httpClient,
			baseURL+GameManagementServiceFilterItemsProcedure,
			connect.WithSchema(gameManagementServiceMethods.ByName("FilterItems")),
			connect.WithClientOptions(opts...),
		),
		filterNpcTemplates: connect.NewClient[v1.NpcTemplateFilter, v1.ListNpcTemplatesResponse](
			httpClient,
			baseURL+GameManagementServiceFilterNpcTemplatesProcedure,
			connect.WithSchema(gameManagementServiceMethods.ByName("FilterNpcTemplates")),
			connect.WithClientOptions(opts...),
		),
		filterNpcSpawnRules: connect.NewClient[v1.NpcSpawnRuleFilter, v1.ListNpcSpawnRulesResponse](
			httpClient,
			baseURL+GameManagementServiceFilterNpcSpawnRulesProcedure,
			connect.WithSchema(gameManagementServiceMethods.ByName("FilterNpcSpawnRules")),
			connect.WithClientOptions(opts...),
		),
		filterRaces: connect.NewClient[v1.RaceFilter, v1.ListRacesResponse](
			httpClient,
			baseURL+GameManagementServiceFilterRacesProcedure,
			connect.WithSchema(gameManagementServiceMethods.ByName("FilterRaces")),
			connect.WithClientOptions(opts...),
		),
		filterWorldNodes: connect.NewClient[v1.WorldNodeFilter, v1.ListWorldNodesResponse](
			httpClient,
			baseURL+GameManagementServiceFilterWorldNodesProcedure,
			connect.WithSchema(gameManagementServiceMethods.ByName("FilterWorldNodes")),
			connect.WithClientOptions(opts...),
		),
		filterWorldNodeFeatures: connect.NewClient[v1.WorldNodeFeatureFilter, v1.ListWorldNodeFeaturesResponse](
			httpClient,
			baseURL+GameManagementServiceFilterWorldNodeFeaturesProcedure,
			connect.WithSchema(gameManagementServiceMethods.ByName("FilterWorldNodeFeatures")),
			connect.WithClientOptions(opts...),
		),
	}
}

// gameManagementServiceClient implements GameManagementServiceClient.
type gameManagementServiceClient struct {
	exportWorld                  *connect.Client[v1.Id, structpb.Struct]
	importWorld                  *connect.Client[structpb.Struct, v1.WorldResponse]
	getWorldStatistics           *connect.Client[v1.Id, structpb.Struct]
	getGameSystemHealth          *connect.Client[emptypb.Empty, structpb.Struct]
	filterWorlds                 *connect.Client[v1.WorldFilter, v1.ListWorldsResponse]
	filterAttributes             *connect.Client[v1.AttributeFilter, v1.ListAttributesResponse]
	filterCapabilities           *connect.Client[v1.CapabilityFilter, v1.ListCapabilitiesResponse]
	filterCharacterClasses       *connect.Client[v1.CharacterClassFilter, v1.ListCharacterClassesResponse]
	filterCharacterClassFeatures *connect.Client[v1.CharacterClassFeatureFilter, v1.ListCharacterClassFeaturesResponse]
	filterCurrencies             *connect.Client[v1.CurrencyFilter, v1.ListCurrenciesResponse]
	filterEnemies                *connect.Client[v1.EnemyFilter, v1.ListEnemiesResponse]
	filterItemCategories         *connect.Client[v1.ItemCategoryFilter, v1.ListItemCategoriesResponse]
	filterItems                  *connect.Client[v1.ItemFilter, v1.ListItemsResponse]
	filterNpcTemplates           *connect.Client[v1.NpcTemplateFilter, v1.ListNpcTemplatesResponse]
	filterNpcSpawnRules          *connect.Client[v1.NpcSpawnRuleFilter, v1.ListNpcSpawnRulesResponse]
	filterRaces                  *connect.Client[v1.RaceFilter, v1.ListRacesResponse]
	filterWorldNodes             *connect.Client[v1.WorldNodeFilter, v1.ListWorldNodesResponse]
	filterWorldNodeFeatures      *connect.Client[v1.WorldNodeFeatureFilter, v1.ListWorldNodeFeaturesResponse]
}

// ExportWorld calls game.v1.GameManagementService.ExportWorld.
func (c *gameManagementServiceClient) ExportWorld(ctx context.Context, req *connect.Request[v1.Id]) (*connect.ServerStreamForClient[structpb.Struct], error) {
	return c.exportWorld.CallServerStream(ctx, req)
}

// ImportWorld calls game.v1.GameManagementService.ImportWorld.
func (c *gameManagementServiceClient) ImportWorld(ctx context.Context) *connect.ClientStreamForClient[structpb.Struct, v1.WorldResponse] {
	return c.importWorld.CallClientStream(ctx)
}

// GetWorldStatistics calls game.v1.GameManagementService.GetWorldStatistics.
func (c *gameManagementServiceClient) GetWorldStatistics(ctx context.Context, req *connect.Request[v1.Id]) (*connect.Response[structpb.Struct], error) {
	return c.getWorldStatistics.CallUnary(ctx, req)
}

// GetGameSystemHealth calls game.v1.GameManagementService.GetGameSystemHealth.
func (c *gameManagementServiceClient) GetGameSystemHealth(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[structpb.Struct], error) {
	return c.getGameSystemHealth.CallUnary(ctx, req)
}

// FilterWorlds calls game.v1.GameManagementService.FilterWorlds.
func (c *gameManagementServiceClient) FilterWorlds(ctx context.Context, req *connect.Request[v1.WorldFilter]) (*connect.Response[v1.ListWorldsResponse], error) {
	return c.filterWorlds.CallUnary(ctx, req)
}

// FilterAttributes calls game.v1.GameManagementService.FilterAttributes.
func (c *gameManagementServiceClient) FilterAttributes(ctx context.Context, req *connect.Request[v1.AttributeFilter]) (*connect.Response[v1.ListAttributesResponse], error) {
	return c.filterAttributes.CallUnary(ctx, req)
}

// FilterCapabilities calls game.v1.GameManagementService.FilterCapabilities.
func (c *gameManagementServiceClient) FilterCapabilities(ctx context.Context, req *connect.Request[v1.CapabilityFilter]) (*connect.Response[v1.ListCapabilitiesResponse], error) {
	return c.filterCapabilities.CallUnary(ctx, req)
}

// FilterCharacterClasses calls game.v1.GameManagementService.FilterCharacterClasses.
func (c *gameManagementServiceClient) FilterCharacterClasses(ctx context.Context, req *connect.Request[v1.CharacterClassFilter]) (*connect.Response[v1.ListCharacterClassesResponse], error) {
	return c.filterCharacterClasses.CallUnary(ctx, req)
}

// FilterCharacterClassFeatures calls game.v1.GameManagementService.FilterCharacterClassFeatures.
func (c *gameManagementServiceClient) FilterCharacterClassFeatures(ctx context.Context, req *connect.Request[v1.CharacterClassFeatureFilter]) (*connect.Response[v1.ListCharacterClassFeaturesResponse], error) {
	return c.filterCharacterClassFeatures.CallUnary(ctx, req)
}

// FilterCurrencies calls game.v1.GameManagementService.FilterCurrencies.
func (c *gameManagementServiceClient) FilterCurrencies(ctx context.Context, req *connect.Request[v1.CurrencyFilter]) (*connect.Response[v1.ListCurrenciesResponse], error) {
	return c.filterCurrencies.CallUnary(ctx, req)
}

// FilterEnemies calls game.v1.GameManagementService.FilterEnemies.
func (c *gameManagementServiceClient) FilterEnemies(ctx context.Context, req *connect.Request[v1.EnemyFilter]) (*connect.Response[v1.ListEnemiesResponse], error) {
	return c.filterEnemies.CallUnary(ctx, req)
}

// FilterItemCategories calls game.v1.GameManagementService.FilterItemCategories.
func (c *gameManagementServiceClient) FilterItemCategories(ctx context.Context, req *connect.Request[v1.ItemCategoryFilter]) (*connect.Response[v1.ListItemCategoriesResponse], error) {
	return c.filterItemCategories.CallUnary(ctx, req)
}

// FilterItems calls game.v1.GameManagementService.FilterItems.
func (c *gameManagementServiceClient) FilterItems(ctx context.Context, req *connect.Request[v1.ItemFilter]) (*connect.Response[v1.ListItemsResponse], error) {
	return c.filterItems.CallUnary(ctx, req)
}

// FilterNpcTemplates calls game.v1.GameManagementService.FilterNpcTemplates.
func (c *gameManagementServiceClient) FilterNpcTemplates(ctx context.Context, req *connect.Request[v1.NpcTemplateFilter]) (*connect.Response[v1.ListNpcTemplatesResponse], error) {
	return c.filterNpcTemplates.CallUnary(ctx, req)
}

// FilterNpcSpawnRules calls game.v1.GameManagementService.FilterNpcSpawnRules.
func (c *gameManagementServiceClient) FilterNpcSpawnRules(ctx context.Context, req *connect.Request[v1.NpcSpawnRuleFilter]) (*connect.Response[v1.ListNpcSpawnRulesResponse], error) {
	return c.filterNpcSpawnRules.CallUnary(ctx, req)
}

// FilterRaces calls game.v1.GameManagementService.FilterRaces.
func (c *gameManagementServiceClient) FilterRaces(ctx context.Context, req *connect.Request[v1.RaceFilter]) (*connect.Response[v1.ListRacesResponse], error) {
	return c.filterRaces.CallUnary(ctx, req)
}

// FilterWorldNodes calls game.v1.GameManagementService.FilterWorldNodes.
func (c *gameManagementServiceClient) FilterWorldNodes(ctx context.Context, req *connect.Request[v1.WorldNodeFilter]) (*connect.Response[v1.ListWorldNodesResponse], error) {
	return c.filterWorldNodes.CallUnary(ctx, req)
}

// FilterWorldNodeFeatures calls game.v1.GameManagementService.FilterWorldNodeFeatures.
func (c *gameManagementServiceClient) FilterWorldNodeFeatures(ctx context.Context, req *connect.Request[v1.WorldNodeFeatureFilter]) (*connect.Response[v1.ListWorldNodeFeaturesResponse], error) {
	return c.filterWorldNodeFeatures.CallUnary(ctx, req)
}

// GameManagementServiceHandler is an implementation of the game.v1.GameManagementService service.
type GameManagementServiceHandler interface {
	// Bulk operations
	ExportWorld(context.Context, *connect.Request[v1.Id], *connect.ServerStream[structpb.Struct]) error
	ImportWorld(context.Context, *connect.ClientStream[structpb.Struct]) (*connect.Response[v1.WorldResponse], error)
	// Statistics and overview
	GetWorldStatistics(context.Context, *connect.Request[v1.Id]) (*connect.Response[structpb.Struct], error)
	GetGameSystemHealth(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[structpb.Struct], error)
	// Filter-based querying for advanced use cases
	FilterWorlds(context.Context, *connect.Request[v1.WorldFilter]) (*connect.Response[v1.ListWorldsResponse], error)
	FilterAttributes(context.Context, *connect.Request[v1.AttributeFilter]) (*connect.Response[v1.ListAttributesResponse], error)
	FilterCapabilities(context.Context, *connect.Request[v1.CapabilityFilter]) (*connect.Response[v1.ListCapabilitiesResponse], error)
	FilterCharacterClasses(context.Context, *connect.Request[v1.CharacterClassFilter]) (*connect.Response[v1.ListCharacterClassesResponse], error)
	FilterCharacterClassFeatures(context.Context, *connect.Request[v1.CharacterClassFeatureFilter]) (*connect.Response[v1.ListCharacterClassFeaturesResponse], error)
	FilterCurrencies(context.Context, *connect.Request[v1.CurrencyFilter]) (*connect.Response[v1.ListCurrenciesResponse], error)
	FilterEnemies(context.Context, *connect.Request[v1.EnemyFilter]) (*connect.Response[v1.ListEnemiesResponse], error)
	FilterItemCategories(context.Context, *connect.Request[v1.ItemCategoryFilter]) (*connect.Response[v1.ListItemCategoriesResponse], error)
	FilterItems(context.Context, *connect.Request[v1.ItemFilter]) (*connect.Response[v1.ListItemsResponse], error)
	FilterNpcTemplates(context.Context, *connect.Request[v1.NpcTemplateFilter]) (*connect.Response[v1.ListNpcTemplatesResponse], error)
	FilterNpcSpawnRules(context.Context, *connect.Request[v1.NpcSpawnRuleFilter]) (*connect.Response[v1.ListNpcSpawnRulesResponse], error)
	FilterRaces(context.Context, *connect.Request[v1.RaceFilter]) (*connect.Response[v1.ListRacesResponse], error)
	FilterWorldNodes(context.Context, *connect.Request[v1.WorldNodeFilter]) (*connect.Response[v1.ListWorldNodesResponse], error)
	FilterWorldNodeFeatures(context.Context, *connect.Request[v1.WorldNodeFeatureFilter]) (*connect.Response[v1.ListWorldNodeFeaturesResponse], error)
}

// NewGameManagementServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGameManagementServiceHandler(svc GameManagementServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gameManagementServiceMethods := v1.File_protos_game_v1_game_management_service_proto.Services().ByName("GameManagementService").Methods()
	gameManagementServiceExportWorldHandler := connect.NewServerStreamHandler(
		GameManagementServiceExportWorldProcedure,
		svc.ExportWorld,
		connect.WithSchema(gameManagementServiceMethods.ByName("ExportWorld")),
		connect.WithHandlerOptions(opts...),
	)
	gameManagementServiceImportWorldHandler := connect.NewClientStreamHandler(
		GameManagementServiceImportWorldProcedure,
		svc.ImportWorld,
		connect.WithSchema(gameManagementServiceMethods.ByName("ImportWorld")),
		connect.WithHandlerOptions(opts...),
	)
	gameManagementServiceGetWorldStatisticsHandler := connect.NewUnaryHandler(
		GameManagementServiceGetWorldStatisticsProcedure,
		svc.GetWorldStatistics,
		connect.WithSchema(gameManagementServiceMethods.ByName("GetWorldStatistics")),
		connect.WithHandlerOptions(opts...),
	)
	gameManagementServiceGetGameSystemHealthHandler := connect.NewUnaryHandler(
		GameManagementServiceGetGameSystemHealthProcedure,
		svc.GetGameSystemHealth,
		connect.WithSchema(gameManagementServiceMethods.ByName("GetGameSystemHealth")),
		connect.WithHandlerOptions(opts...),
	)
	gameManagementServiceFilterWorldsHandler := connect.NewUnaryHandler(
		GameManagementServiceFilterWorldsProcedure,
		svc.FilterWorlds,
		connect.WithSchema(gameManagementServiceMethods.ByName("FilterWorlds")),
		connect.WithHandlerOptions(opts...),
	)
	gameManagementServiceFilterAttributesHandler := connect.NewUnaryHandler(
		GameManagementServiceFilterAttributesProcedure,
		svc.FilterAttributes,
		connect.WithSchema(gameManagementServiceMethods.ByName("FilterAttributes")),
		connect.WithHandlerOptions(opts...),
	)
	gameManagementServiceFilterCapabilitiesHandler := connect.NewUnaryHandler(
		GameManagementServiceFilterCapabilitiesProcedure,
		svc.FilterCapabilities,
		connect.WithSchema(gameManagementServiceMethods.ByName("FilterCapabilities")),
		connect.WithHandlerOptions(opts...),
	)
	gameManagementServiceFilterCharacterClassesHandler := connect.NewUnaryHandler(
		GameManagementServiceFilterCharacterClassesProcedure,
		svc.FilterCharacterClasses,
		connect.WithSchema(gameManagementServiceMethods.ByName("FilterCharacterClasses")),
		connect.WithHandlerOptions(opts...),
	)
	gameManagementServiceFilterCharacterClassFeaturesHandler := connect.NewUnaryHandler(
		GameManagementServiceFilterCharacterClassFeaturesProcedure,
		svc.FilterCharacterClassFeatures,
		connect.WithSchema(gameManagementServiceMethods.ByName("FilterCharacterClassFeatures")),
		connect.WithHandlerOptions(opts...),
	)
	gameManagementServiceFilterCurrenciesHandler := connect.NewUnaryHandler(
		GameManagementServiceFilterCurrenciesProcedure,
		svc.FilterCurrencies,
		connect.WithSchema(gameManagementServiceMethods.ByName("FilterCurrencies")),
		connect.WithHandlerOptions(opts...),
	)
	gameManagementServiceFilterEnemiesHandler := connect.NewUnaryHandler(
		GameManagementServiceFilterEnemiesProcedure,
		svc.FilterEnemies,
		connect.WithSchema(gameManagementServiceMethods.ByName("FilterEnemies")),
		connect.WithHandlerOptions(opts...),
	)
	gameManagementServiceFilterItemCategoriesHandler := connect.NewUnaryHandler(
		GameManagementServiceFilterItemCategoriesProcedure,
		svc.FilterItemCategories,
		connect.WithSchema(gameManagementServiceMethods.ByName("FilterItemCategories")),
		connect.WithHandlerOptions(opts...),
	)
	gameManagementServiceFilterItemsHandler := connect.NewUnaryHandler(
		GameManagementServiceFilterItemsProcedure,
		svc.FilterItems,
		connect.WithSchema(gameManagementServiceMethods.ByName("FilterItems")),
		connect.WithHandlerOptions(opts...),
	)
	gameManagementServiceFilterNpcTemplatesHandler := connect.NewUnaryHandler(
		GameManagementServiceFilterNpcTemplatesProcedure,
		svc.FilterNpcTemplates,
		connect.WithSchema(gameManagementServiceMethods.ByName("FilterNpcTemplates")),
		connect.WithHandlerOptions(opts...),
	)
	gameManagementServiceFilterNpcSpawnRulesHandler := connect.NewUnaryHandler(
		GameManagementServiceFilterNpcSpawnRulesProcedure,
		svc.FilterNpcSpawnRules,
		connect.WithSchema(gameManagementServiceMethods.ByName("FilterNpcSpawnRules")),
		connect.WithHandlerOptions(opts...),
	)
	gameManagementServiceFilterRacesHandler := connect.NewUnaryHandler(
		GameManagementServiceFilterRacesProcedure,
		svc.FilterRaces,
		connect.WithSchema(gameManagementServiceMethods.ByName("FilterRaces")),
		connect.WithHandlerOptions(opts...),
	)
	gameManagementServiceFilterWorldNodesHandler := connect.NewUnaryHandler(
		GameManagementServiceFilterWorldNodesProcedure,
		svc.FilterWorldNodes,
		connect.WithSchema(gameManagementServiceMethods.ByName("FilterWorldNodes")),
		connect.WithHandlerOptions(opts...),
	)
	gameManagementServiceFilterWorldNodeFeaturesHandler := connect.NewUnaryHandler(
		GameManagementServiceFilterWorldNodeFeaturesProcedure,
		svc.FilterWorldNodeFeatures,
		connect.WithSchema(gameManagementServiceMethods.ByName("FilterWorldNodeFeatures")),
		connect.WithHandlerOptions(opts...),
	)
	return "/game.v1.GameManagementService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GameManagementServiceExportWorldProcedure:
			gameManagementServiceExportWorldHandler.ServeHTTP(w, r)
		case GameManagementServiceImportWorldProcedure:
			gameManagementServiceImportWorldHandler.ServeHTTP(w, r)
		case GameManagementServiceGetWorldStatisticsProcedure:
			gameManagementServiceGetWorldStatisticsHandler.ServeHTTP(w, r)
		case GameManagementServiceGetGameSystemHealthProcedure:
			gameManagementServiceGetGameSystemHealthHandler.ServeHTTP(w, r)
		case GameManagementServiceFilterWorldsProcedure:
			gameManagementServiceFilterWorldsHandler.ServeHTTP(w, r)
		case GameManagementServiceFilterAttributesProcedure:
			gameManagementServiceFilterAttributesHandler.ServeHTTP(w, r)
		case GameManagementServiceFilterCapabilitiesProcedure:
			gameManagementServiceFilterCapabilitiesHandler.ServeHTTP(w, r)
		case GameManagementServiceFilterCharacterClassesProcedure:
			gameManagementServiceFilterCharacterClassesHandler.ServeHTTP(w, r)
		case GameManagementServiceFilterCharacterClassFeaturesProcedure:
			gameManagementServiceFilterCharacterClassFeaturesHandler.ServeHTTP(w, r)
		case GameManagementServiceFilterCurrenciesProcedure:
			gameManagementServiceFilterCurrenciesHandler.ServeHTTP(w, r)
		case GameManagementServiceFilterEnemiesProcedure:
			gameManagementServiceFilterEnemiesHandler.ServeHTTP(w, r)
		case GameManagementServiceFilterItemCategoriesProcedure:
			gameManagementServiceFilterItemCategoriesHandler.ServeHTTP(w, r)
		case GameManagementServiceFilterItemsProcedure:
			gameManagementServiceFilterItemsHandler.ServeHTTP(w, r)
		case GameManagementServiceFilterNpcTemplatesProcedure:
			gameManagementServiceFilterNpcTemplatesHandler.ServeHTTP(w, r)
		case GameManagementServiceFilterNpcSpawnRulesProcedure:
			gameManagementServiceFilterNpcSpawnRulesHandler.ServeHTTP(w, r)
		case GameManagementServiceFilterRacesProcedure:
			gameManagementServiceFilterRacesHandler.ServeHTTP(w, r)
		case GameManagementServiceFilterWorldNodesProcedure:
			gameManagementServiceFilterWorldNodesHandler.ServeHTTP(w, r)
		case GameManagementServiceFilterWorldNodeFeaturesProcedure:
			gameManagementServiceFilterWorldNodeFeaturesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGameManagementServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGameManagementServiceHandler struct{}

func (UnimplementedGameManagementServiceHandler) ExportWorld(context.Context, *connect.Request[v1.Id], *connect.ServerStream[structpb.Struct]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.GameManagementService.ExportWorld is not implemented"))
}

func (UnimplementedGameManagementServiceHandler) ImportWorld(context.Context, *connect.ClientStream[structpb.Struct]) (*connect.Response[v1.WorldResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.GameManagementService.ImportWorld is not implemented"))
}

func (UnimplementedGameManagementServiceHandler) GetWorldStatistics(context.Context, *connect.Request[v1.Id]) (*connect.Response[structpb.Struct], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.GameManagementService.GetWorldStatistics is not implemented"))
}

func (UnimplementedGameManagementServiceHandler) GetGameSystemHealth(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[structpb.Struct], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.GameManagementService.GetGameSystemHealth is not implemented"))
}

func (UnimplementedGameManagementServiceHandler) FilterWorlds(context.Context, *connect.Request[v1.WorldFilter]) (*connect.Response[v1.ListWorldsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.GameManagementService.FilterWorlds is not implemented"))
}

func (UnimplementedGameManagementServiceHandler) FilterAttributes(context.Context, *connect.Request[v1.AttributeFilter]) (*connect.Response[v1.ListAttributesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.GameManagementService.FilterAttributes is not implemented"))
}

func (UnimplementedGameManagementServiceHandler) FilterCapabilities(context.Context, *connect.Request[v1.CapabilityFilter]) (*connect.Response[v1.ListCapabilitiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.GameManagementService.FilterCapabilities is not implemented"))
}

func (UnimplementedGameManagementServiceHandler) FilterCharacterClasses(context.Context, *connect.Request[v1.CharacterClassFilter]) (*connect.Response[v1.ListCharacterClassesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.GameManagementService.FilterCharacterClasses is not implemented"))
}

func (UnimplementedGameManagementServiceHandler) FilterCharacterClassFeatures(context.Context, *connect.Request[v1.CharacterClassFeatureFilter]) (*connect.Response[v1.ListCharacterClassFeaturesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.GameManagementService.FilterCharacterClassFeatures is not implemented"))
}

func (UnimplementedGameManagementServiceHandler) FilterCurrencies(context.Context, *connect.Request[v1.CurrencyFilter]) (*connect.Response[v1.ListCurrenciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.GameManagementService.FilterCurrencies is not implemented"))
}

func (UnimplementedGameManagementServiceHandler) FilterEnemies(context.Context, *connect.Request[v1.EnemyFilter]) (*connect.Response[v1.ListEnemiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.GameManagementService.FilterEnemies is not implemented"))
}

func (UnimplementedGameManagementServiceHandler) FilterItemCategories(context.Context, *connect.Request[v1.ItemCategoryFilter]) (*connect.Response[v1.ListItemCategoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.GameManagementService.FilterItemCategories is not implemented"))
}

func (UnimplementedGameManagementServiceHandler) FilterItems(context.Context, *connect.Request[v1.ItemFilter]) (*connect.Response[v1.ListItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.GameManagementService.FilterItems is not implemented"))
}

func (UnimplementedGameManagementServiceHandler) FilterNpcTemplates(context.Context, *connect.Request[v1.NpcTemplateFilter]) (*connect.Response[v1.ListNpcTemplatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.GameManagementService.FilterNpcTemplates is not implemented"))
}

func (UnimplementedGameManagementServiceHandler) FilterNpcSpawnRules(context.Context, *connect.Request[v1.NpcSpawnRuleFilter]) (*connect.Response[v1.ListNpcSpawnRulesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.GameManagementService.FilterNpcSpawnRules is not implemented"))
}

func (UnimplementedGameManagementServiceHandler) FilterRaces(context.Context, *connect.Request[v1.RaceFilter]) (*connect.Response[v1.ListRacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.GameManagementService.FilterRaces is not implemented"))
}

func (UnimplementedGameManagementServiceHandler) FilterWorldNodes(context.Context, *connect.Request[v1.WorldNodeFilter]) (*connect.Response[v1.ListWorldNodesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.GameManagementService.FilterWorldNodes is not implemented"))
}

func (UnimplementedGameManagementServiceHandler) FilterWorldNodeFeatures(context.Context, *connect.Request[v1.WorldNodeFeatureFilter]) (*connect.Response[v1.ListWorldNodeFeaturesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.GameManagementService.FilterWorldNodeFeatures is not implemented"))
}
