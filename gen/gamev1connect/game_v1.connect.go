// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: game_v1.proto

package gamev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ssargent/aether-core-editor/gen/game/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WorldServiceName is the fully-qualified name of the WorldService service.
	WorldServiceName = "game.v1.WorldService"
	// AttributeServiceName is the fully-qualified name of the AttributeService service.
	AttributeServiceName = "game.v1.AttributeService"
	// CapabilityServiceName is the fully-qualified name of the CapabilityService service.
	CapabilityServiceName = "game.v1.CapabilityService"
	// CharacterClassServiceName is the fully-qualified name of the CharacterClassService service.
	CharacterClassServiceName = "game.v1.CharacterClassService"
	// CurrencyServiceName is the fully-qualified name of the CurrencyService service.
	CurrencyServiceName = "game.v1.CurrencyService"
	// EnemyServiceName is the fully-qualified name of the EnemyService service.
	EnemyServiceName = "game.v1.EnemyService"
	// ItemCategoryServiceName is the fully-qualified name of the ItemCategoryService service.
	ItemCategoryServiceName = "game.v1.ItemCategoryService"
	// ItemServiceName is the fully-qualified name of the ItemService service.
	ItemServiceName = "game.v1.ItemService"
	// NpcTemplateServiceName is the fully-qualified name of the NpcTemplateService service.
	NpcTemplateServiceName = "game.v1.NpcTemplateService"
	// NpcSpawnRuleServiceName is the fully-qualified name of the NpcSpawnRuleService service.
	NpcSpawnRuleServiceName = "game.v1.NpcSpawnRuleService"
	// RaceServiceName is the fully-qualified name of the RaceService service.
	RaceServiceName = "game.v1.RaceService"
	// WorldNodeServiceName is the fully-qualified name of the WorldNodeService service.
	WorldNodeServiceName = "game.v1.WorldNodeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WorldServiceCreateWorldProcedure is the fully-qualified name of the WorldService's CreateWorld
	// RPC.
	WorldServiceCreateWorldProcedure = "/game.v1.WorldService/CreateWorld"
	// WorldServiceGetWorldProcedure is the fully-qualified name of the WorldService's GetWorld RPC.
	WorldServiceGetWorldProcedure = "/game.v1.WorldService/GetWorld"
	// WorldServiceUpdateWorldProcedure is the fully-qualified name of the WorldService's UpdateWorld
	// RPC.
	WorldServiceUpdateWorldProcedure = "/game.v1.WorldService/UpdateWorld"
	// WorldServiceDeleteWorldProcedure is the fully-qualified name of the WorldService's DeleteWorld
	// RPC.
	WorldServiceDeleteWorldProcedure = "/game.v1.WorldService/DeleteWorld"
	// WorldServiceListWorldsProcedure is the fully-qualified name of the WorldService's ListWorlds RPC.
	WorldServiceListWorldsProcedure = "/game.v1.WorldService/ListWorlds"
	// AttributeServiceCreateAttributeProcedure is the fully-qualified name of the AttributeService's
	// CreateAttribute RPC.
	AttributeServiceCreateAttributeProcedure = "/game.v1.AttributeService/CreateAttribute"
	// AttributeServiceGetAttributeProcedure is the fully-qualified name of the AttributeService's
	// GetAttribute RPC.
	AttributeServiceGetAttributeProcedure = "/game.v1.AttributeService/GetAttribute"
	// AttributeServiceUpdateAttributeProcedure is the fully-qualified name of the AttributeService's
	// UpdateAttribute RPC.
	AttributeServiceUpdateAttributeProcedure = "/game.v1.AttributeService/UpdateAttribute"
	// AttributeServiceDeleteAttributeProcedure is the fully-qualified name of the AttributeService's
	// DeleteAttribute RPC.
	AttributeServiceDeleteAttributeProcedure = "/game.v1.AttributeService/DeleteAttribute"
	// AttributeServiceListAttributesProcedure is the fully-qualified name of the AttributeService's
	// ListAttributes RPC.
	AttributeServiceListAttributesProcedure = "/game.v1.AttributeService/ListAttributes"
	// CapabilityServiceCreateCapabilityProcedure is the fully-qualified name of the CapabilityService's
	// CreateCapability RPC.
	CapabilityServiceCreateCapabilityProcedure = "/game.v1.CapabilityService/CreateCapability"
	// CapabilityServiceGetCapabilityProcedure is the fully-qualified name of the CapabilityService's
	// GetCapability RPC.
	CapabilityServiceGetCapabilityProcedure = "/game.v1.CapabilityService/GetCapability"
	// CapabilityServiceUpdateCapabilityProcedure is the fully-qualified name of the CapabilityService's
	// UpdateCapability RPC.
	CapabilityServiceUpdateCapabilityProcedure = "/game.v1.CapabilityService/UpdateCapability"
	// CapabilityServiceDeleteCapabilityProcedure is the fully-qualified name of the CapabilityService's
	// DeleteCapability RPC.
	CapabilityServiceDeleteCapabilityProcedure = "/game.v1.CapabilityService/DeleteCapability"
	// CapabilityServiceListCapabilitiesProcedure is the fully-qualified name of the CapabilityService's
	// ListCapabilities RPC.
	CapabilityServiceListCapabilitiesProcedure = "/game.v1.CapabilityService/ListCapabilities"
	// CharacterClassServiceCreateCharacterClassProcedure is the fully-qualified name of the
	// CharacterClassService's CreateCharacterClass RPC.
	CharacterClassServiceCreateCharacterClassProcedure = "/game.v1.CharacterClassService/CreateCharacterClass"
	// CharacterClassServiceGetCharacterClassProcedure is the fully-qualified name of the
	// CharacterClassService's GetCharacterClass RPC.
	CharacterClassServiceGetCharacterClassProcedure = "/game.v1.CharacterClassService/GetCharacterClass"
	// CharacterClassServiceUpdateCharacterClassProcedure is the fully-qualified name of the
	// CharacterClassService's UpdateCharacterClass RPC.
	CharacterClassServiceUpdateCharacterClassProcedure = "/game.v1.CharacterClassService/UpdateCharacterClass"
	// CharacterClassServiceDeleteCharacterClassProcedure is the fully-qualified name of the
	// CharacterClassService's DeleteCharacterClass RPC.
	CharacterClassServiceDeleteCharacterClassProcedure = "/game.v1.CharacterClassService/DeleteCharacterClass"
	// CharacterClassServiceListCharacterClassesProcedure is the fully-qualified name of the
	// CharacterClassService's ListCharacterClasses RPC.
	CharacterClassServiceListCharacterClassesProcedure = "/game.v1.CharacterClassService/ListCharacterClasses"
	// CharacterClassServiceCreateCharacterClassFeatureProcedure is the fully-qualified name of the
	// CharacterClassService's CreateCharacterClassFeature RPC.
	CharacterClassServiceCreateCharacterClassFeatureProcedure = "/game.v1.CharacterClassService/CreateCharacterClassFeature"
	// CharacterClassServiceGetCharacterClassFeatureProcedure is the fully-qualified name of the
	// CharacterClassService's GetCharacterClassFeature RPC.
	CharacterClassServiceGetCharacterClassFeatureProcedure = "/game.v1.CharacterClassService/GetCharacterClassFeature"
	// CharacterClassServiceUpdateCharacterClassFeatureProcedure is the fully-qualified name of the
	// CharacterClassService's UpdateCharacterClassFeature RPC.
	CharacterClassServiceUpdateCharacterClassFeatureProcedure = "/game.v1.CharacterClassService/UpdateCharacterClassFeature"
	// CharacterClassServiceDeleteCharacterClassFeatureProcedure is the fully-qualified name of the
	// CharacterClassService's DeleteCharacterClassFeature RPC.
	CharacterClassServiceDeleteCharacterClassFeatureProcedure = "/game.v1.CharacterClassService/DeleteCharacterClassFeature"
	// CharacterClassServiceListCharacterClassFeaturesProcedure is the fully-qualified name of the
	// CharacterClassService's ListCharacterClassFeatures RPC.
	CharacterClassServiceListCharacterClassFeaturesProcedure = "/game.v1.CharacterClassService/ListCharacterClassFeatures"
	// CurrencyServiceCreateCurrencyProcedure is the fully-qualified name of the CurrencyService's
	// CreateCurrency RPC.
	CurrencyServiceCreateCurrencyProcedure = "/game.v1.CurrencyService/CreateCurrency"
	// CurrencyServiceGetCurrencyProcedure is the fully-qualified name of the CurrencyService's
	// GetCurrency RPC.
	CurrencyServiceGetCurrencyProcedure = "/game.v1.CurrencyService/GetCurrency"
	// CurrencyServiceUpdateCurrencyProcedure is the fully-qualified name of the CurrencyService's
	// UpdateCurrency RPC.
	CurrencyServiceUpdateCurrencyProcedure = "/game.v1.CurrencyService/UpdateCurrency"
	// CurrencyServiceDeleteCurrencyProcedure is the fully-qualified name of the CurrencyService's
	// DeleteCurrency RPC.
	CurrencyServiceDeleteCurrencyProcedure = "/game.v1.CurrencyService/DeleteCurrency"
	// CurrencyServiceListCurrenciesProcedure is the fully-qualified name of the CurrencyService's
	// ListCurrencies RPC.
	CurrencyServiceListCurrenciesProcedure = "/game.v1.CurrencyService/ListCurrencies"
	// EnemyServiceCreateEnemyProcedure is the fully-qualified name of the EnemyService's CreateEnemy
	// RPC.
	EnemyServiceCreateEnemyProcedure = "/game.v1.EnemyService/CreateEnemy"
	// EnemyServiceGetEnemyProcedure is the fully-qualified name of the EnemyService's GetEnemy RPC.
	EnemyServiceGetEnemyProcedure = "/game.v1.EnemyService/GetEnemy"
	// EnemyServiceUpdateEnemyProcedure is the fully-qualified name of the EnemyService's UpdateEnemy
	// RPC.
	EnemyServiceUpdateEnemyProcedure = "/game.v1.EnemyService/UpdateEnemy"
	// EnemyServiceDeleteEnemyProcedure is the fully-qualified name of the EnemyService's DeleteEnemy
	// RPC.
	EnemyServiceDeleteEnemyProcedure = "/game.v1.EnemyService/DeleteEnemy"
	// EnemyServiceListEnemiesProcedure is the fully-qualified name of the EnemyService's ListEnemies
	// RPC.
	EnemyServiceListEnemiesProcedure = "/game.v1.EnemyService/ListEnemies"
	// ItemCategoryServiceCreateItemCategoryProcedure is the fully-qualified name of the
	// ItemCategoryService's CreateItemCategory RPC.
	ItemCategoryServiceCreateItemCategoryProcedure = "/game.v1.ItemCategoryService/CreateItemCategory"
	// ItemCategoryServiceGetItemCategoryProcedure is the fully-qualified name of the
	// ItemCategoryService's GetItemCategory RPC.
	ItemCategoryServiceGetItemCategoryProcedure = "/game.v1.ItemCategoryService/GetItemCategory"
	// ItemCategoryServiceUpdateItemCategoryProcedure is the fully-qualified name of the
	// ItemCategoryService's UpdateItemCategory RPC.
	ItemCategoryServiceUpdateItemCategoryProcedure = "/game.v1.ItemCategoryService/UpdateItemCategory"
	// ItemCategoryServiceDeleteItemCategoryProcedure is the fully-qualified name of the
	// ItemCategoryService's DeleteItemCategory RPC.
	ItemCategoryServiceDeleteItemCategoryProcedure = "/game.v1.ItemCategoryService/DeleteItemCategory"
	// ItemCategoryServiceListItemCategoriesProcedure is the fully-qualified name of the
	// ItemCategoryService's ListItemCategories RPC.
	ItemCategoryServiceListItemCategoriesProcedure = "/game.v1.ItemCategoryService/ListItemCategories"
	// ItemServiceCreateItemProcedure is the fully-qualified name of the ItemService's CreateItem RPC.
	ItemServiceCreateItemProcedure = "/game.v1.ItemService/CreateItem"
	// ItemServiceGetItemProcedure is the fully-qualified name of the ItemService's GetItem RPC.
	ItemServiceGetItemProcedure = "/game.v1.ItemService/GetItem"
	// ItemServiceUpdateItemProcedure is the fully-qualified name of the ItemService's UpdateItem RPC.
	ItemServiceUpdateItemProcedure = "/game.v1.ItemService/UpdateItem"
	// ItemServiceDeleteItemProcedure is the fully-qualified name of the ItemService's DeleteItem RPC.
	ItemServiceDeleteItemProcedure = "/game.v1.ItemService/DeleteItem"
	// ItemServiceListItemsProcedure is the fully-qualified name of the ItemService's ListItems RPC.
	ItemServiceListItemsProcedure = "/game.v1.ItemService/ListItems"
	// NpcTemplateServiceCreateNpcTemplateProcedure is the fully-qualified name of the
	// NpcTemplateService's CreateNpcTemplate RPC.
	NpcTemplateServiceCreateNpcTemplateProcedure = "/game.v1.NpcTemplateService/CreateNpcTemplate"
	// NpcTemplateServiceGetNpcTemplateProcedure is the fully-qualified name of the NpcTemplateService's
	// GetNpcTemplate RPC.
	NpcTemplateServiceGetNpcTemplateProcedure = "/game.v1.NpcTemplateService/GetNpcTemplate"
	// NpcTemplateServiceUpdateNpcTemplateProcedure is the fully-qualified name of the
	// NpcTemplateService's UpdateNpcTemplate RPC.
	NpcTemplateServiceUpdateNpcTemplateProcedure = "/game.v1.NpcTemplateService/UpdateNpcTemplate"
	// NpcTemplateServiceDeleteNpcTemplateProcedure is the fully-qualified name of the
	// NpcTemplateService's DeleteNpcTemplate RPC.
	NpcTemplateServiceDeleteNpcTemplateProcedure = "/game.v1.NpcTemplateService/DeleteNpcTemplate"
	// NpcTemplateServiceListNpcTemplatesProcedure is the fully-qualified name of the
	// NpcTemplateService's ListNpcTemplates RPC.
	NpcTemplateServiceListNpcTemplatesProcedure = "/game.v1.NpcTemplateService/ListNpcTemplates"
	// NpcSpawnRuleServiceCreateNpcSpawnRuleProcedure is the fully-qualified name of the
	// NpcSpawnRuleService's CreateNpcSpawnRule RPC.
	NpcSpawnRuleServiceCreateNpcSpawnRuleProcedure = "/game.v1.NpcSpawnRuleService/CreateNpcSpawnRule"
	// NpcSpawnRuleServiceGetNpcSpawnRuleProcedure is the fully-qualified name of the
	// NpcSpawnRuleService's GetNpcSpawnRule RPC.
	NpcSpawnRuleServiceGetNpcSpawnRuleProcedure = "/game.v1.NpcSpawnRuleService/GetNpcSpawnRule"
	// NpcSpawnRuleServiceUpdateNpcSpawnRuleProcedure is the fully-qualified name of the
	// NpcSpawnRuleService's UpdateNpcSpawnRule RPC.
	NpcSpawnRuleServiceUpdateNpcSpawnRuleProcedure = "/game.v1.NpcSpawnRuleService/UpdateNpcSpawnRule"
	// NpcSpawnRuleServiceDeleteNpcSpawnRuleProcedure is the fully-qualified name of the
	// NpcSpawnRuleService's DeleteNpcSpawnRule RPC.
	NpcSpawnRuleServiceDeleteNpcSpawnRuleProcedure = "/game.v1.NpcSpawnRuleService/DeleteNpcSpawnRule"
	// NpcSpawnRuleServiceListNpcSpawnRulesProcedure is the fully-qualified name of the
	// NpcSpawnRuleService's ListNpcSpawnRules RPC.
	NpcSpawnRuleServiceListNpcSpawnRulesProcedure = "/game.v1.NpcSpawnRuleService/ListNpcSpawnRules"
	// RaceServiceCreateRaceProcedure is the fully-qualified name of the RaceService's CreateRace RPC.
	RaceServiceCreateRaceProcedure = "/game.v1.RaceService/CreateRace"
	// RaceServiceGetRaceProcedure is the fully-qualified name of the RaceService's GetRace RPC.
	RaceServiceGetRaceProcedure = "/game.v1.RaceService/GetRace"
	// RaceServiceUpdateRaceProcedure is the fully-qualified name of the RaceService's UpdateRace RPC.
	RaceServiceUpdateRaceProcedure = "/game.v1.RaceService/UpdateRace"
	// RaceServiceDeleteRaceProcedure is the fully-qualified name of the RaceService's DeleteRace RPC.
	RaceServiceDeleteRaceProcedure = "/game.v1.RaceService/DeleteRace"
	// RaceServiceListRacesProcedure is the fully-qualified name of the RaceService's ListRaces RPC.
	RaceServiceListRacesProcedure = "/game.v1.RaceService/ListRaces"
	// WorldNodeServiceCreateWorldNodeProcedure is the fully-qualified name of the WorldNodeService's
	// CreateWorldNode RPC.
	WorldNodeServiceCreateWorldNodeProcedure = "/game.v1.WorldNodeService/CreateWorldNode"
	// WorldNodeServiceGetWorldNodeProcedure is the fully-qualified name of the WorldNodeService's
	// GetWorldNode RPC.
	WorldNodeServiceGetWorldNodeProcedure = "/game.v1.WorldNodeService/GetWorldNode"
	// WorldNodeServiceUpdateWorldNodeProcedure is the fully-qualified name of the WorldNodeService's
	// UpdateWorldNode RPC.
	WorldNodeServiceUpdateWorldNodeProcedure = "/game.v1.WorldNodeService/UpdateWorldNode"
	// WorldNodeServiceDeleteWorldNodeProcedure is the fully-qualified name of the WorldNodeService's
	// DeleteWorldNode RPC.
	WorldNodeServiceDeleteWorldNodeProcedure = "/game.v1.WorldNodeService/DeleteWorldNode"
	// WorldNodeServiceListWorldNodesProcedure is the fully-qualified name of the WorldNodeService's
	// ListWorldNodes RPC.
	WorldNodeServiceListWorldNodesProcedure = "/game.v1.WorldNodeService/ListWorldNodes"
	// WorldNodeServiceCreateWorldNodeFeatureProcedure is the fully-qualified name of the
	// WorldNodeService's CreateWorldNodeFeature RPC.
	WorldNodeServiceCreateWorldNodeFeatureProcedure = "/game.v1.WorldNodeService/CreateWorldNodeFeature"
	// WorldNodeServiceGetWorldNodeFeatureProcedure is the fully-qualified name of the
	// WorldNodeService's GetWorldNodeFeature RPC.
	WorldNodeServiceGetWorldNodeFeatureProcedure = "/game.v1.WorldNodeService/GetWorldNodeFeature"
	// WorldNodeServiceUpdateWorldNodeFeatureProcedure is the fully-qualified name of the
	// WorldNodeService's UpdateWorldNodeFeature RPC.
	WorldNodeServiceUpdateWorldNodeFeatureProcedure = "/game.v1.WorldNodeService/UpdateWorldNodeFeature"
	// WorldNodeServiceDeleteWorldNodeFeatureProcedure is the fully-qualified name of the
	// WorldNodeService's DeleteWorldNodeFeature RPC.
	WorldNodeServiceDeleteWorldNodeFeatureProcedure = "/game.v1.WorldNodeService/DeleteWorldNodeFeature"
	// WorldNodeServiceListWorldNodeFeaturesProcedure is the fully-qualified name of the
	// WorldNodeService's ListWorldNodeFeatures RPC.
	WorldNodeServiceListWorldNodeFeaturesProcedure = "/game.v1.WorldNodeService/ListWorldNodeFeatures"
)

// WorldServiceClient is a client for the game.v1.WorldService service.
type WorldServiceClient interface {
	CreateWorld(context.Context, *connect.Request[v1.CreateWorldRequest]) (*connect.Response[v1.WorldResponse], error)
	GetWorld(context.Context, *connect.Request[v1.GetWorldRequest]) (*connect.Response[v1.WorldResponse], error)
	UpdateWorld(context.Context, *connect.Request[v1.UpdateWorldRequest]) (*connect.Response[v1.WorldResponse], error)
	DeleteWorld(context.Context, *connect.Request[v1.DeleteWorldRequest]) (*connect.Response[v1.WorldResponse], error)
	ListWorlds(context.Context, *connect.Request[v1.ListWorldsRequest]) (*connect.Response[v1.ListWorldsResponse], error)
}

// NewWorldServiceClient constructs a client for the game.v1.WorldService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorldServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WorldServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	worldServiceMethods := v1.File_game_v1_proto.Services().ByName("WorldService").Methods()
	return &worldServiceClient{
		createWorld: connect.NewClient[v1.CreateWorldRequest, v1.WorldResponse](
			httpClient,
			baseURL+WorldServiceCreateWorldProcedure,
			connect.WithSchema(worldServiceMethods.ByName("CreateWorld")),
			connect.WithClientOptions(opts...),
		),
		getWorld: connect.NewClient[v1.GetWorldRequest, v1.WorldResponse](
			httpClient,
			baseURL+WorldServiceGetWorldProcedure,
			connect.WithSchema(worldServiceMethods.ByName("GetWorld")),
			connect.WithClientOptions(opts...),
		),
		updateWorld: connect.NewClient[v1.UpdateWorldRequest, v1.WorldResponse](
			httpClient,
			baseURL+WorldServiceUpdateWorldProcedure,
			connect.WithSchema(worldServiceMethods.ByName("UpdateWorld")),
			connect.WithClientOptions(opts...),
		),
		deleteWorld: connect.NewClient[v1.DeleteWorldRequest, v1.WorldResponse](
			httpClient,
			baseURL+WorldServiceDeleteWorldProcedure,
			connect.WithSchema(worldServiceMethods.ByName("DeleteWorld")),
			connect.WithClientOptions(opts...),
		),
		listWorlds: connect.NewClient[v1.ListWorldsRequest, v1.ListWorldsResponse](
			httpClient,
			baseURL+WorldServiceListWorldsProcedure,
			connect.WithSchema(worldServiceMethods.ByName("ListWorlds")),
			connect.WithClientOptions(opts...),
		),
	}
}

// worldServiceClient implements WorldServiceClient.
type worldServiceClient struct {
	createWorld *connect.Client[v1.CreateWorldRequest, v1.WorldResponse]
	getWorld    *connect.Client[v1.GetWorldRequest, v1.WorldResponse]
	updateWorld *connect.Client[v1.UpdateWorldRequest, v1.WorldResponse]
	deleteWorld *connect.Client[v1.DeleteWorldRequest, v1.WorldResponse]
	listWorlds  *connect.Client[v1.ListWorldsRequest, v1.ListWorldsResponse]
}

// CreateWorld calls game.v1.WorldService.CreateWorld.
func (c *worldServiceClient) CreateWorld(ctx context.Context, req *connect.Request[v1.CreateWorldRequest]) (*connect.Response[v1.WorldResponse], error) {
	return c.createWorld.CallUnary(ctx, req)
}

// GetWorld calls game.v1.WorldService.GetWorld.
func (c *worldServiceClient) GetWorld(ctx context.Context, req *connect.Request[v1.GetWorldRequest]) (*connect.Response[v1.WorldResponse], error) {
	return c.getWorld.CallUnary(ctx, req)
}

// UpdateWorld calls game.v1.WorldService.UpdateWorld.
func (c *worldServiceClient) UpdateWorld(ctx context.Context, req *connect.Request[v1.UpdateWorldRequest]) (*connect.Response[v1.WorldResponse], error) {
	return c.updateWorld.CallUnary(ctx, req)
}

// DeleteWorld calls game.v1.WorldService.DeleteWorld.
func (c *worldServiceClient) DeleteWorld(ctx context.Context, req *connect.Request[v1.DeleteWorldRequest]) (*connect.Response[v1.WorldResponse], error) {
	return c.deleteWorld.CallUnary(ctx, req)
}

// ListWorlds calls game.v1.WorldService.ListWorlds.
func (c *worldServiceClient) ListWorlds(ctx context.Context, req *connect.Request[v1.ListWorldsRequest]) (*connect.Response[v1.ListWorldsResponse], error) {
	return c.listWorlds.CallUnary(ctx, req)
}

// WorldServiceHandler is an implementation of the game.v1.WorldService service.
type WorldServiceHandler interface {
	CreateWorld(context.Context, *connect.Request[v1.CreateWorldRequest]) (*connect.Response[v1.WorldResponse], error)
	GetWorld(context.Context, *connect.Request[v1.GetWorldRequest]) (*connect.Response[v1.WorldResponse], error)
	UpdateWorld(context.Context, *connect.Request[v1.UpdateWorldRequest]) (*connect.Response[v1.WorldResponse], error)
	DeleteWorld(context.Context, *connect.Request[v1.DeleteWorldRequest]) (*connect.Response[v1.WorldResponse], error)
	ListWorlds(context.Context, *connect.Request[v1.ListWorldsRequest]) (*connect.Response[v1.ListWorldsResponse], error)
}

// NewWorldServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorldServiceHandler(svc WorldServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	worldServiceMethods := v1.File_game_v1_proto.Services().ByName("WorldService").Methods()
	worldServiceCreateWorldHandler := connect.NewUnaryHandler(
		WorldServiceCreateWorldProcedure,
		svc.CreateWorld,
		connect.WithSchema(worldServiceMethods.ByName("CreateWorld")),
		connect.WithHandlerOptions(opts...),
	)
	worldServiceGetWorldHandler := connect.NewUnaryHandler(
		WorldServiceGetWorldProcedure,
		svc.GetWorld,
		connect.WithSchema(worldServiceMethods.ByName("GetWorld")),
		connect.WithHandlerOptions(opts...),
	)
	worldServiceUpdateWorldHandler := connect.NewUnaryHandler(
		WorldServiceUpdateWorldProcedure,
		svc.UpdateWorld,
		connect.WithSchema(worldServiceMethods.ByName("UpdateWorld")),
		connect.WithHandlerOptions(opts...),
	)
	worldServiceDeleteWorldHandler := connect.NewUnaryHandler(
		WorldServiceDeleteWorldProcedure,
		svc.DeleteWorld,
		connect.WithSchema(worldServiceMethods.ByName("DeleteWorld")),
		connect.WithHandlerOptions(opts...),
	)
	worldServiceListWorldsHandler := connect.NewUnaryHandler(
		WorldServiceListWorldsProcedure,
		svc.ListWorlds,
		connect.WithSchema(worldServiceMethods.ByName("ListWorlds")),
		connect.WithHandlerOptions(opts...),
	)
	return "/game.v1.WorldService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorldServiceCreateWorldProcedure:
			worldServiceCreateWorldHandler.ServeHTTP(w, r)
		case WorldServiceGetWorldProcedure:
			worldServiceGetWorldHandler.ServeHTTP(w, r)
		case WorldServiceUpdateWorldProcedure:
			worldServiceUpdateWorldHandler.ServeHTTP(w, r)
		case WorldServiceDeleteWorldProcedure:
			worldServiceDeleteWorldHandler.ServeHTTP(w, r)
		case WorldServiceListWorldsProcedure:
			worldServiceListWorldsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorldServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorldServiceHandler struct{}

func (UnimplementedWorldServiceHandler) CreateWorld(context.Context, *connect.Request[v1.CreateWorldRequest]) (*connect.Response[v1.WorldResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldService.CreateWorld is not implemented"))
}

func (UnimplementedWorldServiceHandler) GetWorld(context.Context, *connect.Request[v1.GetWorldRequest]) (*connect.Response[v1.WorldResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldService.GetWorld is not implemented"))
}

func (UnimplementedWorldServiceHandler) UpdateWorld(context.Context, *connect.Request[v1.UpdateWorldRequest]) (*connect.Response[v1.WorldResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldService.UpdateWorld is not implemented"))
}

func (UnimplementedWorldServiceHandler) DeleteWorld(context.Context, *connect.Request[v1.DeleteWorldRequest]) (*connect.Response[v1.WorldResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldService.DeleteWorld is not implemented"))
}

func (UnimplementedWorldServiceHandler) ListWorlds(context.Context, *connect.Request[v1.ListWorldsRequest]) (*connect.Response[v1.ListWorldsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldService.ListWorlds is not implemented"))
}

// AttributeServiceClient is a client for the game.v1.AttributeService service.
type AttributeServiceClient interface {
	CreateAttribute(context.Context, *connect.Request[v1.CreateAttributeRequest]) (*connect.Response[v1.AttributeResponse], error)
	GetAttribute(context.Context, *connect.Request[v1.GetAttributeRequest]) (*connect.Response[v1.AttributeResponse], error)
	UpdateAttribute(context.Context, *connect.Request[v1.UpdateAttributeRequest]) (*connect.Response[v1.AttributeResponse], error)
	DeleteAttribute(context.Context, *connect.Request[v1.DeleteAttributeRequest]) (*connect.Response[v1.AttributeResponse], error)
	ListAttributes(context.Context, *connect.Request[v1.ListAttributesRequest]) (*connect.Response[v1.ListAttributesResponse], error)
}

// NewAttributeServiceClient constructs a client for the game.v1.AttributeService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAttributeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AttributeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	attributeServiceMethods := v1.File_game_v1_proto.Services().ByName("AttributeService").Methods()
	return &attributeServiceClient{
		createAttribute: connect.NewClient[v1.CreateAttributeRequest, v1.AttributeResponse](
			httpClient,
			baseURL+AttributeServiceCreateAttributeProcedure,
			connect.WithSchema(attributeServiceMethods.ByName("CreateAttribute")),
			connect.WithClientOptions(opts...),
		),
		getAttribute: connect.NewClient[v1.GetAttributeRequest, v1.AttributeResponse](
			httpClient,
			baseURL+AttributeServiceGetAttributeProcedure,
			connect.WithSchema(attributeServiceMethods.ByName("GetAttribute")),
			connect.WithClientOptions(opts...),
		),
		updateAttribute: connect.NewClient[v1.UpdateAttributeRequest, v1.AttributeResponse](
			httpClient,
			baseURL+AttributeServiceUpdateAttributeProcedure,
			connect.WithSchema(attributeServiceMethods.ByName("UpdateAttribute")),
			connect.WithClientOptions(opts...),
		),
		deleteAttribute: connect.NewClient[v1.DeleteAttributeRequest, v1.AttributeResponse](
			httpClient,
			baseURL+AttributeServiceDeleteAttributeProcedure,
			connect.WithSchema(attributeServiceMethods.ByName("DeleteAttribute")),
			connect.WithClientOptions(opts...),
		),
		listAttributes: connect.NewClient[v1.ListAttributesRequest, v1.ListAttributesResponse](
			httpClient,
			baseURL+AttributeServiceListAttributesProcedure,
			connect.WithSchema(attributeServiceMethods.ByName("ListAttributes")),
			connect.WithClientOptions(opts...),
		),
	}
}

// attributeServiceClient implements AttributeServiceClient.
type attributeServiceClient struct {
	createAttribute *connect.Client[v1.CreateAttributeRequest, v1.AttributeResponse]
	getAttribute    *connect.Client[v1.GetAttributeRequest, v1.AttributeResponse]
	updateAttribute *connect.Client[v1.UpdateAttributeRequest, v1.AttributeResponse]
	deleteAttribute *connect.Client[v1.DeleteAttributeRequest, v1.AttributeResponse]
	listAttributes  *connect.Client[v1.ListAttributesRequest, v1.ListAttributesResponse]
}

// CreateAttribute calls game.v1.AttributeService.CreateAttribute.
func (c *attributeServiceClient) CreateAttribute(ctx context.Context, req *connect.Request[v1.CreateAttributeRequest]) (*connect.Response[v1.AttributeResponse], error) {
	return c.createAttribute.CallUnary(ctx, req)
}

// GetAttribute calls game.v1.AttributeService.GetAttribute.
func (c *attributeServiceClient) GetAttribute(ctx context.Context, req *connect.Request[v1.GetAttributeRequest]) (*connect.Response[v1.AttributeResponse], error) {
	return c.getAttribute.CallUnary(ctx, req)
}

// UpdateAttribute calls game.v1.AttributeService.UpdateAttribute.
func (c *attributeServiceClient) UpdateAttribute(ctx context.Context, req *connect.Request[v1.UpdateAttributeRequest]) (*connect.Response[v1.AttributeResponse], error) {
	return c.updateAttribute.CallUnary(ctx, req)
}

// DeleteAttribute calls game.v1.AttributeService.DeleteAttribute.
func (c *attributeServiceClient) DeleteAttribute(ctx context.Context, req *connect.Request[v1.DeleteAttributeRequest]) (*connect.Response[v1.AttributeResponse], error) {
	return c.deleteAttribute.CallUnary(ctx, req)
}

// ListAttributes calls game.v1.AttributeService.ListAttributes.
func (c *attributeServiceClient) ListAttributes(ctx context.Context, req *connect.Request[v1.ListAttributesRequest]) (*connect.Response[v1.ListAttributesResponse], error) {
	return c.listAttributes.CallUnary(ctx, req)
}

// AttributeServiceHandler is an implementation of the game.v1.AttributeService service.
type AttributeServiceHandler interface {
	CreateAttribute(context.Context, *connect.Request[v1.CreateAttributeRequest]) (*connect.Response[v1.AttributeResponse], error)
	GetAttribute(context.Context, *connect.Request[v1.GetAttributeRequest]) (*connect.Response[v1.AttributeResponse], error)
	UpdateAttribute(context.Context, *connect.Request[v1.UpdateAttributeRequest]) (*connect.Response[v1.AttributeResponse], error)
	DeleteAttribute(context.Context, *connect.Request[v1.DeleteAttributeRequest]) (*connect.Response[v1.AttributeResponse], error)
	ListAttributes(context.Context, *connect.Request[v1.ListAttributesRequest]) (*connect.Response[v1.ListAttributesResponse], error)
}

// NewAttributeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAttributeServiceHandler(svc AttributeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	attributeServiceMethods := v1.File_game_v1_proto.Services().ByName("AttributeService").Methods()
	attributeServiceCreateAttributeHandler := connect.NewUnaryHandler(
		AttributeServiceCreateAttributeProcedure,
		svc.CreateAttribute,
		connect.WithSchema(attributeServiceMethods.ByName("CreateAttribute")),
		connect.WithHandlerOptions(opts...),
	)
	attributeServiceGetAttributeHandler := connect.NewUnaryHandler(
		AttributeServiceGetAttributeProcedure,
		svc.GetAttribute,
		connect.WithSchema(attributeServiceMethods.ByName("GetAttribute")),
		connect.WithHandlerOptions(opts...),
	)
	attributeServiceUpdateAttributeHandler := connect.NewUnaryHandler(
		AttributeServiceUpdateAttributeProcedure,
		svc.UpdateAttribute,
		connect.WithSchema(attributeServiceMethods.ByName("UpdateAttribute")),
		connect.WithHandlerOptions(opts...),
	)
	attributeServiceDeleteAttributeHandler := connect.NewUnaryHandler(
		AttributeServiceDeleteAttributeProcedure,
		svc.DeleteAttribute,
		connect.WithSchema(attributeServiceMethods.ByName("DeleteAttribute")),
		connect.WithHandlerOptions(opts...),
	)
	attributeServiceListAttributesHandler := connect.NewUnaryHandler(
		AttributeServiceListAttributesProcedure,
		svc.ListAttributes,
		connect.WithSchema(attributeServiceMethods.ByName("ListAttributes")),
		connect.WithHandlerOptions(opts...),
	)
	return "/game.v1.AttributeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AttributeServiceCreateAttributeProcedure:
			attributeServiceCreateAttributeHandler.ServeHTTP(w, r)
		case AttributeServiceGetAttributeProcedure:
			attributeServiceGetAttributeHandler.ServeHTTP(w, r)
		case AttributeServiceUpdateAttributeProcedure:
			attributeServiceUpdateAttributeHandler.ServeHTTP(w, r)
		case AttributeServiceDeleteAttributeProcedure:
			attributeServiceDeleteAttributeHandler.ServeHTTP(w, r)
		case AttributeServiceListAttributesProcedure:
			attributeServiceListAttributesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAttributeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAttributeServiceHandler struct{}

func (UnimplementedAttributeServiceHandler) CreateAttribute(context.Context, *connect.Request[v1.CreateAttributeRequest]) (*connect.Response[v1.AttributeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.AttributeService.CreateAttribute is not implemented"))
}

func (UnimplementedAttributeServiceHandler) GetAttribute(context.Context, *connect.Request[v1.GetAttributeRequest]) (*connect.Response[v1.AttributeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.AttributeService.GetAttribute is not implemented"))
}

func (UnimplementedAttributeServiceHandler) UpdateAttribute(context.Context, *connect.Request[v1.UpdateAttributeRequest]) (*connect.Response[v1.AttributeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.AttributeService.UpdateAttribute is not implemented"))
}

func (UnimplementedAttributeServiceHandler) DeleteAttribute(context.Context, *connect.Request[v1.DeleteAttributeRequest]) (*connect.Response[v1.AttributeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.AttributeService.DeleteAttribute is not implemented"))
}

func (UnimplementedAttributeServiceHandler) ListAttributes(context.Context, *connect.Request[v1.ListAttributesRequest]) (*connect.Response[v1.ListAttributesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.AttributeService.ListAttributes is not implemented"))
}

// CapabilityServiceClient is a client for the game.v1.CapabilityService service.
type CapabilityServiceClient interface {
	CreateCapability(context.Context, *connect.Request[v1.CreateCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error)
	GetCapability(context.Context, *connect.Request[v1.GetCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error)
	UpdateCapability(context.Context, *connect.Request[v1.UpdateCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error)
	DeleteCapability(context.Context, *connect.Request[v1.DeleteCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error)
	ListCapabilities(context.Context, *connect.Request[v1.ListCapabilitiesRequest]) (*connect.Response[v1.ListCapabilitiesResponse], error)
}

// NewCapabilityServiceClient constructs a client for the game.v1.CapabilityService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCapabilityServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CapabilityServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	capabilityServiceMethods := v1.File_game_v1_proto.Services().ByName("CapabilityService").Methods()
	return &capabilityServiceClient{
		createCapability: connect.NewClient[v1.CreateCapabilityRequest, v1.CapabilityResponse](
			httpClient,
			baseURL+CapabilityServiceCreateCapabilityProcedure,
			connect.WithSchema(capabilityServiceMethods.ByName("CreateCapability")),
			connect.WithClientOptions(opts...),
		),
		getCapability: connect.NewClient[v1.GetCapabilityRequest, v1.CapabilityResponse](
			httpClient,
			baseURL+CapabilityServiceGetCapabilityProcedure,
			connect.WithSchema(capabilityServiceMethods.ByName("GetCapability")),
			connect.WithClientOptions(opts...),
		),
		updateCapability: connect.NewClient[v1.UpdateCapabilityRequest, v1.CapabilityResponse](
			httpClient,
			baseURL+CapabilityServiceUpdateCapabilityProcedure,
			connect.WithSchema(capabilityServiceMethods.ByName("UpdateCapability")),
			connect.WithClientOptions(opts...),
		),
		deleteCapability: connect.NewClient[v1.DeleteCapabilityRequest, v1.CapabilityResponse](
			httpClient,
			baseURL+CapabilityServiceDeleteCapabilityProcedure,
			connect.WithSchema(capabilityServiceMethods.ByName("DeleteCapability")),
			connect.WithClientOptions(opts...),
		),
		listCapabilities: connect.NewClient[v1.ListCapabilitiesRequest, v1.ListCapabilitiesResponse](
			httpClient,
			baseURL+CapabilityServiceListCapabilitiesProcedure,
			connect.WithSchema(capabilityServiceMethods.ByName("ListCapabilities")),
			connect.WithClientOptions(opts...),
		),
	}
}

// capabilityServiceClient implements CapabilityServiceClient.
type capabilityServiceClient struct {
	createCapability *connect.Client[v1.CreateCapabilityRequest, v1.CapabilityResponse]
	getCapability    *connect.Client[v1.GetCapabilityRequest, v1.CapabilityResponse]
	updateCapability *connect.Client[v1.UpdateCapabilityRequest, v1.CapabilityResponse]
	deleteCapability *connect.Client[v1.DeleteCapabilityRequest, v1.CapabilityResponse]
	listCapabilities *connect.Client[v1.ListCapabilitiesRequest, v1.ListCapabilitiesResponse]
}

// CreateCapability calls game.v1.CapabilityService.CreateCapability.
func (c *capabilityServiceClient) CreateCapability(ctx context.Context, req *connect.Request[v1.CreateCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error) {
	return c.createCapability.CallUnary(ctx, req)
}

// GetCapability calls game.v1.CapabilityService.GetCapability.
func (c *capabilityServiceClient) GetCapability(ctx context.Context, req *connect.Request[v1.GetCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error) {
	return c.getCapability.CallUnary(ctx, req)
}

// UpdateCapability calls game.v1.CapabilityService.UpdateCapability.
func (c *capabilityServiceClient) UpdateCapability(ctx context.Context, req *connect.Request[v1.UpdateCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error) {
	return c.updateCapability.CallUnary(ctx, req)
}

// DeleteCapability calls game.v1.CapabilityService.DeleteCapability.
func (c *capabilityServiceClient) DeleteCapability(ctx context.Context, req *connect.Request[v1.DeleteCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error) {
	return c.deleteCapability.CallUnary(ctx, req)
}

// ListCapabilities calls game.v1.CapabilityService.ListCapabilities.
func (c *capabilityServiceClient) ListCapabilities(ctx context.Context, req *connect.Request[v1.ListCapabilitiesRequest]) (*connect.Response[v1.ListCapabilitiesResponse], error) {
	return c.listCapabilities.CallUnary(ctx, req)
}

// CapabilityServiceHandler is an implementation of the game.v1.CapabilityService service.
type CapabilityServiceHandler interface {
	CreateCapability(context.Context, *connect.Request[v1.CreateCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error)
	GetCapability(context.Context, *connect.Request[v1.GetCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error)
	UpdateCapability(context.Context, *connect.Request[v1.UpdateCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error)
	DeleteCapability(context.Context, *connect.Request[v1.DeleteCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error)
	ListCapabilities(context.Context, *connect.Request[v1.ListCapabilitiesRequest]) (*connect.Response[v1.ListCapabilitiesResponse], error)
}

// NewCapabilityServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCapabilityServiceHandler(svc CapabilityServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	capabilityServiceMethods := v1.File_game_v1_proto.Services().ByName("CapabilityService").Methods()
	capabilityServiceCreateCapabilityHandler := connect.NewUnaryHandler(
		CapabilityServiceCreateCapabilityProcedure,
		svc.CreateCapability,
		connect.WithSchema(capabilityServiceMethods.ByName("CreateCapability")),
		connect.WithHandlerOptions(opts...),
	)
	capabilityServiceGetCapabilityHandler := connect.NewUnaryHandler(
		CapabilityServiceGetCapabilityProcedure,
		svc.GetCapability,
		connect.WithSchema(capabilityServiceMethods.ByName("GetCapability")),
		connect.WithHandlerOptions(opts...),
	)
	capabilityServiceUpdateCapabilityHandler := connect.NewUnaryHandler(
		CapabilityServiceUpdateCapabilityProcedure,
		svc.UpdateCapability,
		connect.WithSchema(capabilityServiceMethods.ByName("UpdateCapability")),
		connect.WithHandlerOptions(opts...),
	)
	capabilityServiceDeleteCapabilityHandler := connect.NewUnaryHandler(
		CapabilityServiceDeleteCapabilityProcedure,
		svc.DeleteCapability,
		connect.WithSchema(capabilityServiceMethods.ByName("DeleteCapability")),
		connect.WithHandlerOptions(opts...),
	)
	capabilityServiceListCapabilitiesHandler := connect.NewUnaryHandler(
		CapabilityServiceListCapabilitiesProcedure,
		svc.ListCapabilities,
		connect.WithSchema(capabilityServiceMethods.ByName("ListCapabilities")),
		connect.WithHandlerOptions(opts...),
	)
	return "/game.v1.CapabilityService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CapabilityServiceCreateCapabilityProcedure:
			capabilityServiceCreateCapabilityHandler.ServeHTTP(w, r)
		case CapabilityServiceGetCapabilityProcedure:
			capabilityServiceGetCapabilityHandler.ServeHTTP(w, r)
		case CapabilityServiceUpdateCapabilityProcedure:
			capabilityServiceUpdateCapabilityHandler.ServeHTTP(w, r)
		case CapabilityServiceDeleteCapabilityProcedure:
			capabilityServiceDeleteCapabilityHandler.ServeHTTP(w, r)
		case CapabilityServiceListCapabilitiesProcedure:
			capabilityServiceListCapabilitiesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCapabilityServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCapabilityServiceHandler struct{}

func (UnimplementedCapabilityServiceHandler) CreateCapability(context.Context, *connect.Request[v1.CreateCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CapabilityService.CreateCapability is not implemented"))
}

func (UnimplementedCapabilityServiceHandler) GetCapability(context.Context, *connect.Request[v1.GetCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CapabilityService.GetCapability is not implemented"))
}

func (UnimplementedCapabilityServiceHandler) UpdateCapability(context.Context, *connect.Request[v1.UpdateCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CapabilityService.UpdateCapability is not implemented"))
}

func (UnimplementedCapabilityServiceHandler) DeleteCapability(context.Context, *connect.Request[v1.DeleteCapabilityRequest]) (*connect.Response[v1.CapabilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CapabilityService.DeleteCapability is not implemented"))
}

func (UnimplementedCapabilityServiceHandler) ListCapabilities(context.Context, *connect.Request[v1.ListCapabilitiesRequest]) (*connect.Response[v1.ListCapabilitiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CapabilityService.ListCapabilities is not implemented"))
}

// CharacterClassServiceClient is a client for the game.v1.CharacterClassService service.
type CharacterClassServiceClient interface {
	CreateCharacterClass(context.Context, *connect.Request[v1.CreateCharacterClassRequest]) (*connect.Response[v1.CharacterClassResponse], error)
	GetCharacterClass(context.Context, *connect.Request[v1.GetCharacterClassRequest]) (*connect.Response[v1.CharacterClassResponse], error)
	UpdateCharacterClass(context.Context, *connect.Request[v1.UpdateCharacterClassRequest]) (*connect.Response[v1.CharacterClassResponse], error)
	DeleteCharacterClass(context.Context, *connect.Request[v1.DeleteCharacterClassRequest]) (*connect.Response[v1.CharacterClassResponse], error)
	ListCharacterClasses(context.Context, *connect.Request[v1.ListCharacterClassesRequest]) (*connect.Response[v1.ListCharacterClassesResponse], error)
	CreateCharacterClassFeature(context.Context, *connect.Request[v1.CreateCharacterClassFeatureRequest]) (*connect.Response[v1.CharacterClassFeatureResponse], error)
	GetCharacterClassFeature(context.Context, *connect.Request[v1.GetCharacterClassFeatureRequest]) (*connect.Response[v1.CharacterClassFeatureResponse], error)
	UpdateCharacterClassFeature(context.Context, *connect.Request[v1.UpdateCharacterClassFeatureRequest]) (*connect.Response[v1.CharacterClassFeatureResponse], error)
	DeleteCharacterClassFeature(context.Context, *connect.Request[v1.DeleteCharacterClassFeatureRequest]) (*connect.Response[v1.CharacterClassFeatureResponse], error)
	ListCharacterClassFeatures(context.Context, *connect.Request[v1.ListCharacterClassFeaturesRequest]) (*connect.Response[v1.ListCharacterClassFeaturesResponse], error)
}

// NewCharacterClassServiceClient constructs a client for the game.v1.CharacterClassService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCharacterClassServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CharacterClassServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	characterClassServiceMethods := v1.File_game_v1_proto.Services().ByName("CharacterClassService").Methods()
	return &characterClassServiceClient{
		createCharacterClass: connect.NewClient[v1.CreateCharacterClassRequest, v1.CharacterClassResponse](
			httpClient,
			baseURL+CharacterClassServiceCreateCharacterClassProcedure,
			connect.WithSchema(characterClassServiceMethods.ByName("CreateCharacterClass")),
			connect.WithClientOptions(opts...),
		),
		getCharacterClass: connect.NewClient[v1.GetCharacterClassRequest, v1.CharacterClassResponse](
			httpClient,
			baseURL+CharacterClassServiceGetCharacterClassProcedure,
			connect.WithSchema(characterClassServiceMethods.ByName("GetCharacterClass")),
			connect.WithClientOptions(opts...),
		),
		updateCharacterClass: connect.NewClient[v1.UpdateCharacterClassRequest, v1.CharacterClassResponse](
			httpClient,
			baseURL+CharacterClassServiceUpdateCharacterClassProcedure,
			connect.WithSchema(characterClassServiceMethods.ByName("UpdateCharacterClass")),
			connect.WithClientOptions(opts...),
		),
		deleteCharacterClass: connect.NewClient[v1.DeleteCharacterClassRequest, v1.CharacterClassResponse](
			httpClient,
			baseURL+CharacterClassServiceDeleteCharacterClassProcedure,
			connect.WithSchema(characterClassServiceMethods.ByName("DeleteCharacterClass")),
			connect.WithClientOptions(opts...),
		),
		listCharacterClasses: connect.NewClient[v1.ListCharacterClassesRequest, v1.ListCharacterClassesResponse](
			httpClient,
			baseURL+CharacterClassServiceListCharacterClassesProcedure,
			connect.WithSchema(characterClassServiceMethods.ByName("ListCharacterClasses")),
			connect.WithClientOptions(opts...),
		),
		createCharacterClassFeature: connect.NewClient[v1.CreateCharacterClassFeatureRequest, v1.CharacterClassFeatureResponse](
			httpClient,
			baseURL+CharacterClassServiceCreateCharacterClassFeatureProcedure,
			connect.WithSchema(characterClassServiceMethods.ByName("CreateCharacterClassFeature")),
			connect.WithClientOptions(opts...),
		),
		getCharacterClassFeature: connect.NewClient[v1.GetCharacterClassFeatureRequest, v1.CharacterClassFeatureResponse](
			httpClient,
			baseURL+CharacterClassServiceGetCharacterClassFeatureProcedure,
			connect.WithSchema(characterClassServiceMethods.ByName("GetCharacterClassFeature")),
			connect.WithClientOptions(opts...),
		),
		updateCharacterClassFeature: connect.NewClient[v1.UpdateCharacterClassFeatureRequest, v1.CharacterClassFeatureResponse](
			httpClient,
			baseURL+CharacterClassServiceUpdateCharacterClassFeatureProcedure,
			connect.WithSchema(characterClassServiceMethods.ByName("UpdateCharacterClassFeature")),
			connect.WithClientOptions(opts...),
		),
		deleteCharacterClassFeature: connect.NewClient[v1.DeleteCharacterClassFeatureRequest, v1.CharacterClassFeatureResponse](
			httpClient,
			baseURL+CharacterClassServiceDeleteCharacterClassFeatureProcedure,
			connect.WithSchema(characterClassServiceMethods.ByName("DeleteCharacterClassFeature")),
			connect.WithClientOptions(opts...),
		),
		listCharacterClassFeatures: connect.NewClient[v1.ListCharacterClassFeaturesRequest, v1.ListCharacterClassFeaturesResponse](
			httpClient,
			baseURL+CharacterClassServiceListCharacterClassFeaturesProcedure,
			connect.WithSchema(characterClassServiceMethods.ByName("ListCharacterClassFeatures")),
			connect.WithClientOptions(opts...),
		),
	}
}

// characterClassServiceClient implements CharacterClassServiceClient.
type characterClassServiceClient struct {
	createCharacterClass        *connect.Client[v1.CreateCharacterClassRequest, v1.CharacterClassResponse]
	getCharacterClass           *connect.Client[v1.GetCharacterClassRequest, v1.CharacterClassResponse]
	updateCharacterClass        *connect.Client[v1.UpdateCharacterClassRequest, v1.CharacterClassResponse]
	deleteCharacterClass        *connect.Client[v1.DeleteCharacterClassRequest, v1.CharacterClassResponse]
	listCharacterClasses        *connect.Client[v1.ListCharacterClassesRequest, v1.ListCharacterClassesResponse]
	createCharacterClassFeature *connect.Client[v1.CreateCharacterClassFeatureRequest, v1.CharacterClassFeatureResponse]
	getCharacterClassFeature    *connect.Client[v1.GetCharacterClassFeatureRequest, v1.CharacterClassFeatureResponse]
	updateCharacterClassFeature *connect.Client[v1.UpdateCharacterClassFeatureRequest, v1.CharacterClassFeatureResponse]
	deleteCharacterClassFeature *connect.Client[v1.DeleteCharacterClassFeatureRequest, v1.CharacterClassFeatureResponse]
	listCharacterClassFeatures  *connect.Client[v1.ListCharacterClassFeaturesRequest, v1.ListCharacterClassFeaturesResponse]
}

// CreateCharacterClass calls game.v1.CharacterClassService.CreateCharacterClass.
func (c *characterClassServiceClient) CreateCharacterClass(ctx context.Context, req *connect.Request[v1.CreateCharacterClassRequest]) (*connect.Response[v1.CharacterClassResponse], error) {
	return c.createCharacterClass.CallUnary(ctx, req)
}

// GetCharacterClass calls game.v1.CharacterClassService.GetCharacterClass.
func (c *characterClassServiceClient) GetCharacterClass(ctx context.Context, req *connect.Request[v1.GetCharacterClassRequest]) (*connect.Response[v1.CharacterClassResponse], error) {
	return c.getCharacterClass.CallUnary(ctx, req)
}

// UpdateCharacterClass calls game.v1.CharacterClassService.UpdateCharacterClass.
func (c *characterClassServiceClient) UpdateCharacterClass(ctx context.Context, req *connect.Request[v1.UpdateCharacterClassRequest]) (*connect.Response[v1.CharacterClassResponse], error) {
	return c.updateCharacterClass.CallUnary(ctx, req)
}

// DeleteCharacterClass calls game.v1.CharacterClassService.DeleteCharacterClass.
func (c *characterClassServiceClient) DeleteCharacterClass(ctx context.Context, req *connect.Request[v1.DeleteCharacterClassRequest]) (*connect.Response[v1.CharacterClassResponse], error) {
	return c.deleteCharacterClass.CallUnary(ctx, req)
}

// ListCharacterClasses calls game.v1.CharacterClassService.ListCharacterClasses.
func (c *characterClassServiceClient) ListCharacterClasses(ctx context.Context, req *connect.Request[v1.ListCharacterClassesRequest]) (*connect.Response[v1.ListCharacterClassesResponse], error) {
	return c.listCharacterClasses.CallUnary(ctx, req)
}

// CreateCharacterClassFeature calls game.v1.CharacterClassService.CreateCharacterClassFeature.
func (c *characterClassServiceClient) CreateCharacterClassFeature(ctx context.Context, req *connect.Request[v1.CreateCharacterClassFeatureRequest]) (*connect.Response[v1.CharacterClassFeatureResponse], error) {
	return c.createCharacterClassFeature.CallUnary(ctx, req)
}

// GetCharacterClassFeature calls game.v1.CharacterClassService.GetCharacterClassFeature.
func (c *characterClassServiceClient) GetCharacterClassFeature(ctx context.Context, req *connect.Request[v1.GetCharacterClassFeatureRequest]) (*connect.Response[v1.CharacterClassFeatureResponse], error) {
	return c.getCharacterClassFeature.CallUnary(ctx, req)
}

// UpdateCharacterClassFeature calls game.v1.CharacterClassService.UpdateCharacterClassFeature.
func (c *characterClassServiceClient) UpdateCharacterClassFeature(ctx context.Context, req *connect.Request[v1.UpdateCharacterClassFeatureRequest]) (*connect.Response[v1.CharacterClassFeatureResponse], error) {
	return c.updateCharacterClassFeature.CallUnary(ctx, req)
}

// DeleteCharacterClassFeature calls game.v1.CharacterClassService.DeleteCharacterClassFeature.
func (c *characterClassServiceClient) DeleteCharacterClassFeature(ctx context.Context, req *connect.Request[v1.DeleteCharacterClassFeatureRequest]) (*connect.Response[v1.CharacterClassFeatureResponse], error) {
	return c.deleteCharacterClassFeature.CallUnary(ctx, req)
}

// ListCharacterClassFeatures calls game.v1.CharacterClassService.ListCharacterClassFeatures.
func (c *characterClassServiceClient) ListCharacterClassFeatures(ctx context.Context, req *connect.Request[v1.ListCharacterClassFeaturesRequest]) (*connect.Response[v1.ListCharacterClassFeaturesResponse], error) {
	return c.listCharacterClassFeatures.CallUnary(ctx, req)
}

// CharacterClassServiceHandler is an implementation of the game.v1.CharacterClassService service.
type CharacterClassServiceHandler interface {
	CreateCharacterClass(context.Context, *connect.Request[v1.CreateCharacterClassRequest]) (*connect.Response[v1.CharacterClassResponse], error)
	GetCharacterClass(context.Context, *connect.Request[v1.GetCharacterClassRequest]) (*connect.Response[v1.CharacterClassResponse], error)
	UpdateCharacterClass(context.Context, *connect.Request[v1.UpdateCharacterClassRequest]) (*connect.Response[v1.CharacterClassResponse], error)
	DeleteCharacterClass(context.Context, *connect.Request[v1.DeleteCharacterClassRequest]) (*connect.Response[v1.CharacterClassResponse], error)
	ListCharacterClasses(context.Context, *connect.Request[v1.ListCharacterClassesRequest]) (*connect.Response[v1.ListCharacterClassesResponse], error)
	CreateCharacterClassFeature(context.Context, *connect.Request[v1.CreateCharacterClassFeatureRequest]) (*connect.Response[v1.CharacterClassFeatureResponse], error)
	GetCharacterClassFeature(context.Context, *connect.Request[v1.GetCharacterClassFeatureRequest]) (*connect.Response[v1.CharacterClassFeatureResponse], error)
	UpdateCharacterClassFeature(context.Context, *connect.Request[v1.UpdateCharacterClassFeatureRequest]) (*connect.Response[v1.CharacterClassFeatureResponse], error)
	DeleteCharacterClassFeature(context.Context, *connect.Request[v1.DeleteCharacterClassFeatureRequest]) (*connect.Response[v1.CharacterClassFeatureResponse], error)
	ListCharacterClassFeatures(context.Context, *connect.Request[v1.ListCharacterClassFeaturesRequest]) (*connect.Response[v1.ListCharacterClassFeaturesResponse], error)
}

// NewCharacterClassServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCharacterClassServiceHandler(svc CharacterClassServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	characterClassServiceMethods := v1.File_game_v1_proto.Services().ByName("CharacterClassService").Methods()
	characterClassServiceCreateCharacterClassHandler := connect.NewUnaryHandler(
		CharacterClassServiceCreateCharacterClassProcedure,
		svc.CreateCharacterClass,
		connect.WithSchema(characterClassServiceMethods.ByName("CreateCharacterClass")),
		connect.WithHandlerOptions(opts...),
	)
	characterClassServiceGetCharacterClassHandler := connect.NewUnaryHandler(
		CharacterClassServiceGetCharacterClassProcedure,
		svc.GetCharacterClass,
		connect.WithSchema(characterClassServiceMethods.ByName("GetCharacterClass")),
		connect.WithHandlerOptions(opts...),
	)
	characterClassServiceUpdateCharacterClassHandler := connect.NewUnaryHandler(
		CharacterClassServiceUpdateCharacterClassProcedure,
		svc.UpdateCharacterClass,
		connect.WithSchema(characterClassServiceMethods.ByName("UpdateCharacterClass")),
		connect.WithHandlerOptions(opts...),
	)
	characterClassServiceDeleteCharacterClassHandler := connect.NewUnaryHandler(
		CharacterClassServiceDeleteCharacterClassProcedure,
		svc.DeleteCharacterClass,
		connect.WithSchema(characterClassServiceMethods.ByName("DeleteCharacterClass")),
		connect.WithHandlerOptions(opts...),
	)
	characterClassServiceListCharacterClassesHandler := connect.NewUnaryHandler(
		CharacterClassServiceListCharacterClassesProcedure,
		svc.ListCharacterClasses,
		connect.WithSchema(characterClassServiceMethods.ByName("ListCharacterClasses")),
		connect.WithHandlerOptions(opts...),
	)
	characterClassServiceCreateCharacterClassFeatureHandler := connect.NewUnaryHandler(
		CharacterClassServiceCreateCharacterClassFeatureProcedure,
		svc.CreateCharacterClassFeature,
		connect.WithSchema(characterClassServiceMethods.ByName("CreateCharacterClassFeature")),
		connect.WithHandlerOptions(opts...),
	)
	characterClassServiceGetCharacterClassFeatureHandler := connect.NewUnaryHandler(
		CharacterClassServiceGetCharacterClassFeatureProcedure,
		svc.GetCharacterClassFeature,
		connect.WithSchema(characterClassServiceMethods.ByName("GetCharacterClassFeature")),
		connect.WithHandlerOptions(opts...),
	)
	characterClassServiceUpdateCharacterClassFeatureHandler := connect.NewUnaryHandler(
		CharacterClassServiceUpdateCharacterClassFeatureProcedure,
		svc.UpdateCharacterClassFeature,
		connect.WithSchema(characterClassServiceMethods.ByName("UpdateCharacterClassFeature")),
		connect.WithHandlerOptions(opts...),
	)
	characterClassServiceDeleteCharacterClassFeatureHandler := connect.NewUnaryHandler(
		CharacterClassServiceDeleteCharacterClassFeatureProcedure,
		svc.DeleteCharacterClassFeature,
		connect.WithSchema(characterClassServiceMethods.ByName("DeleteCharacterClassFeature")),
		connect.WithHandlerOptions(opts...),
	)
	characterClassServiceListCharacterClassFeaturesHandler := connect.NewUnaryHandler(
		CharacterClassServiceListCharacterClassFeaturesProcedure,
		svc.ListCharacterClassFeatures,
		connect.WithSchema(characterClassServiceMethods.ByName("ListCharacterClassFeatures")),
		connect.WithHandlerOptions(opts...),
	)
	return "/game.v1.CharacterClassService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CharacterClassServiceCreateCharacterClassProcedure:
			characterClassServiceCreateCharacterClassHandler.ServeHTTP(w, r)
		case CharacterClassServiceGetCharacterClassProcedure:
			characterClassServiceGetCharacterClassHandler.ServeHTTP(w, r)
		case CharacterClassServiceUpdateCharacterClassProcedure:
			characterClassServiceUpdateCharacterClassHandler.ServeHTTP(w, r)
		case CharacterClassServiceDeleteCharacterClassProcedure:
			characterClassServiceDeleteCharacterClassHandler.ServeHTTP(w, r)
		case CharacterClassServiceListCharacterClassesProcedure:
			characterClassServiceListCharacterClassesHandler.ServeHTTP(w, r)
		case CharacterClassServiceCreateCharacterClassFeatureProcedure:
			characterClassServiceCreateCharacterClassFeatureHandler.ServeHTTP(w, r)
		case CharacterClassServiceGetCharacterClassFeatureProcedure:
			characterClassServiceGetCharacterClassFeatureHandler.ServeHTTP(w, r)
		case CharacterClassServiceUpdateCharacterClassFeatureProcedure:
			characterClassServiceUpdateCharacterClassFeatureHandler.ServeHTTP(w, r)
		case CharacterClassServiceDeleteCharacterClassFeatureProcedure:
			characterClassServiceDeleteCharacterClassFeatureHandler.ServeHTTP(w, r)
		case CharacterClassServiceListCharacterClassFeaturesProcedure:
			characterClassServiceListCharacterClassFeaturesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCharacterClassServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCharacterClassServiceHandler struct{}

func (UnimplementedCharacterClassServiceHandler) CreateCharacterClass(context.Context, *connect.Request[v1.CreateCharacterClassRequest]) (*connect.Response[v1.CharacterClassResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CharacterClassService.CreateCharacterClass is not implemented"))
}

func (UnimplementedCharacterClassServiceHandler) GetCharacterClass(context.Context, *connect.Request[v1.GetCharacterClassRequest]) (*connect.Response[v1.CharacterClassResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CharacterClassService.GetCharacterClass is not implemented"))
}

func (UnimplementedCharacterClassServiceHandler) UpdateCharacterClass(context.Context, *connect.Request[v1.UpdateCharacterClassRequest]) (*connect.Response[v1.CharacterClassResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CharacterClassService.UpdateCharacterClass is not implemented"))
}

func (UnimplementedCharacterClassServiceHandler) DeleteCharacterClass(context.Context, *connect.Request[v1.DeleteCharacterClassRequest]) (*connect.Response[v1.CharacterClassResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CharacterClassService.DeleteCharacterClass is not implemented"))
}

func (UnimplementedCharacterClassServiceHandler) ListCharacterClasses(context.Context, *connect.Request[v1.ListCharacterClassesRequest]) (*connect.Response[v1.ListCharacterClassesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CharacterClassService.ListCharacterClasses is not implemented"))
}

func (UnimplementedCharacterClassServiceHandler) CreateCharacterClassFeature(context.Context, *connect.Request[v1.CreateCharacterClassFeatureRequest]) (*connect.Response[v1.CharacterClassFeatureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CharacterClassService.CreateCharacterClassFeature is not implemented"))
}

func (UnimplementedCharacterClassServiceHandler) GetCharacterClassFeature(context.Context, *connect.Request[v1.GetCharacterClassFeatureRequest]) (*connect.Response[v1.CharacterClassFeatureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CharacterClassService.GetCharacterClassFeature is not implemented"))
}

func (UnimplementedCharacterClassServiceHandler) UpdateCharacterClassFeature(context.Context, *connect.Request[v1.UpdateCharacterClassFeatureRequest]) (*connect.Response[v1.CharacterClassFeatureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CharacterClassService.UpdateCharacterClassFeature is not implemented"))
}

func (UnimplementedCharacterClassServiceHandler) DeleteCharacterClassFeature(context.Context, *connect.Request[v1.DeleteCharacterClassFeatureRequest]) (*connect.Response[v1.CharacterClassFeatureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CharacterClassService.DeleteCharacterClassFeature is not implemented"))
}

func (UnimplementedCharacterClassServiceHandler) ListCharacterClassFeatures(context.Context, *connect.Request[v1.ListCharacterClassFeaturesRequest]) (*connect.Response[v1.ListCharacterClassFeaturesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CharacterClassService.ListCharacterClassFeatures is not implemented"))
}

// CurrencyServiceClient is a client for the game.v1.CurrencyService service.
type CurrencyServiceClient interface {
	CreateCurrency(context.Context, *connect.Request[v1.CreateCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error)
	GetCurrency(context.Context, *connect.Request[v1.GetCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error)
	UpdateCurrency(context.Context, *connect.Request[v1.UpdateCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error)
	DeleteCurrency(context.Context, *connect.Request[v1.DeleteCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error)
	ListCurrencies(context.Context, *connect.Request[v1.ListCurrenciesRequest]) (*connect.Response[v1.ListCurrenciesResponse], error)
}

// NewCurrencyServiceClient constructs a client for the game.v1.CurrencyService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCurrencyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CurrencyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	currencyServiceMethods := v1.File_game_v1_proto.Services().ByName("CurrencyService").Methods()
	return &currencyServiceClient{
		createCurrency: connect.NewClient[v1.CreateCurrencyRequest, v1.CurrencyResponse](
			httpClient,
			baseURL+CurrencyServiceCreateCurrencyProcedure,
			connect.WithSchema(currencyServiceMethods.ByName("CreateCurrency")),
			connect.WithClientOptions(opts...),
		),
		getCurrency: connect.NewClient[v1.GetCurrencyRequest, v1.CurrencyResponse](
			httpClient,
			baseURL+CurrencyServiceGetCurrencyProcedure,
			connect.WithSchema(currencyServiceMethods.ByName("GetCurrency")),
			connect.WithClientOptions(opts...),
		),
		updateCurrency: connect.NewClient[v1.UpdateCurrencyRequest, v1.CurrencyResponse](
			httpClient,
			baseURL+CurrencyServiceUpdateCurrencyProcedure,
			connect.WithSchema(currencyServiceMethods.ByName("UpdateCurrency")),
			connect.WithClientOptions(opts...),
		),
		deleteCurrency: connect.NewClient[v1.DeleteCurrencyRequest, v1.CurrencyResponse](
			httpClient,
			baseURL+CurrencyServiceDeleteCurrencyProcedure,
			connect.WithSchema(currencyServiceMethods.ByName("DeleteCurrency")),
			connect.WithClientOptions(opts...),
		),
		listCurrencies: connect.NewClient[v1.ListCurrenciesRequest, v1.ListCurrenciesResponse](
			httpClient,
			baseURL+CurrencyServiceListCurrenciesProcedure,
			connect.WithSchema(currencyServiceMethods.ByName("ListCurrencies")),
			connect.WithClientOptions(opts...),
		),
	}
}

// currencyServiceClient implements CurrencyServiceClient.
type currencyServiceClient struct {
	createCurrency *connect.Client[v1.CreateCurrencyRequest, v1.CurrencyResponse]
	getCurrency    *connect.Client[v1.GetCurrencyRequest, v1.CurrencyResponse]
	updateCurrency *connect.Client[v1.UpdateCurrencyRequest, v1.CurrencyResponse]
	deleteCurrency *connect.Client[v1.DeleteCurrencyRequest, v1.CurrencyResponse]
	listCurrencies *connect.Client[v1.ListCurrenciesRequest, v1.ListCurrenciesResponse]
}

// CreateCurrency calls game.v1.CurrencyService.CreateCurrency.
func (c *currencyServiceClient) CreateCurrency(ctx context.Context, req *connect.Request[v1.CreateCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error) {
	return c.createCurrency.CallUnary(ctx, req)
}

// GetCurrency calls game.v1.CurrencyService.GetCurrency.
func (c *currencyServiceClient) GetCurrency(ctx context.Context, req *connect.Request[v1.GetCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error) {
	return c.getCurrency.CallUnary(ctx, req)
}

// UpdateCurrency calls game.v1.CurrencyService.UpdateCurrency.
func (c *currencyServiceClient) UpdateCurrency(ctx context.Context, req *connect.Request[v1.UpdateCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error) {
	return c.updateCurrency.CallUnary(ctx, req)
}

// DeleteCurrency calls game.v1.CurrencyService.DeleteCurrency.
func (c *currencyServiceClient) DeleteCurrency(ctx context.Context, req *connect.Request[v1.DeleteCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error) {
	return c.deleteCurrency.CallUnary(ctx, req)
}

// ListCurrencies calls game.v1.CurrencyService.ListCurrencies.
func (c *currencyServiceClient) ListCurrencies(ctx context.Context, req *connect.Request[v1.ListCurrenciesRequest]) (*connect.Response[v1.ListCurrenciesResponse], error) {
	return c.listCurrencies.CallUnary(ctx, req)
}

// CurrencyServiceHandler is an implementation of the game.v1.CurrencyService service.
type CurrencyServiceHandler interface {
	CreateCurrency(context.Context, *connect.Request[v1.CreateCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error)
	GetCurrency(context.Context, *connect.Request[v1.GetCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error)
	UpdateCurrency(context.Context, *connect.Request[v1.UpdateCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error)
	DeleteCurrency(context.Context, *connect.Request[v1.DeleteCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error)
	ListCurrencies(context.Context, *connect.Request[v1.ListCurrenciesRequest]) (*connect.Response[v1.ListCurrenciesResponse], error)
}

// NewCurrencyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCurrencyServiceHandler(svc CurrencyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	currencyServiceMethods := v1.File_game_v1_proto.Services().ByName("CurrencyService").Methods()
	currencyServiceCreateCurrencyHandler := connect.NewUnaryHandler(
		CurrencyServiceCreateCurrencyProcedure,
		svc.CreateCurrency,
		connect.WithSchema(currencyServiceMethods.ByName("CreateCurrency")),
		connect.WithHandlerOptions(opts...),
	)
	currencyServiceGetCurrencyHandler := connect.NewUnaryHandler(
		CurrencyServiceGetCurrencyProcedure,
		svc.GetCurrency,
		connect.WithSchema(currencyServiceMethods.ByName("GetCurrency")),
		connect.WithHandlerOptions(opts...),
	)
	currencyServiceUpdateCurrencyHandler := connect.NewUnaryHandler(
		CurrencyServiceUpdateCurrencyProcedure,
		svc.UpdateCurrency,
		connect.WithSchema(currencyServiceMethods.ByName("UpdateCurrency")),
		connect.WithHandlerOptions(opts...),
	)
	currencyServiceDeleteCurrencyHandler := connect.NewUnaryHandler(
		CurrencyServiceDeleteCurrencyProcedure,
		svc.DeleteCurrency,
		connect.WithSchema(currencyServiceMethods.ByName("DeleteCurrency")),
		connect.WithHandlerOptions(opts...),
	)
	currencyServiceListCurrenciesHandler := connect.NewUnaryHandler(
		CurrencyServiceListCurrenciesProcedure,
		svc.ListCurrencies,
		connect.WithSchema(currencyServiceMethods.ByName("ListCurrencies")),
		connect.WithHandlerOptions(opts...),
	)
	return "/game.v1.CurrencyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CurrencyServiceCreateCurrencyProcedure:
			currencyServiceCreateCurrencyHandler.ServeHTTP(w, r)
		case CurrencyServiceGetCurrencyProcedure:
			currencyServiceGetCurrencyHandler.ServeHTTP(w, r)
		case CurrencyServiceUpdateCurrencyProcedure:
			currencyServiceUpdateCurrencyHandler.ServeHTTP(w, r)
		case CurrencyServiceDeleteCurrencyProcedure:
			currencyServiceDeleteCurrencyHandler.ServeHTTP(w, r)
		case CurrencyServiceListCurrenciesProcedure:
			currencyServiceListCurrenciesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCurrencyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCurrencyServiceHandler struct{}

func (UnimplementedCurrencyServiceHandler) CreateCurrency(context.Context, *connect.Request[v1.CreateCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CurrencyService.CreateCurrency is not implemented"))
}

func (UnimplementedCurrencyServiceHandler) GetCurrency(context.Context, *connect.Request[v1.GetCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CurrencyService.GetCurrency is not implemented"))
}

func (UnimplementedCurrencyServiceHandler) UpdateCurrency(context.Context, *connect.Request[v1.UpdateCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CurrencyService.UpdateCurrency is not implemented"))
}

func (UnimplementedCurrencyServiceHandler) DeleteCurrency(context.Context, *connect.Request[v1.DeleteCurrencyRequest]) (*connect.Response[v1.CurrencyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CurrencyService.DeleteCurrency is not implemented"))
}

func (UnimplementedCurrencyServiceHandler) ListCurrencies(context.Context, *connect.Request[v1.ListCurrenciesRequest]) (*connect.Response[v1.ListCurrenciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CurrencyService.ListCurrencies is not implemented"))
}

// EnemyServiceClient is a client for the game.v1.EnemyService service.
type EnemyServiceClient interface {
	CreateEnemy(context.Context, *connect.Request[v1.CreateEnemyRequest]) (*connect.Response[v1.EnemyResponse], error)
	GetEnemy(context.Context, *connect.Request[v1.GetEnemyRequest]) (*connect.Response[v1.EnemyResponse], error)
	UpdateEnemy(context.Context, *connect.Request[v1.UpdateEnemyRequest]) (*connect.Response[v1.EnemyResponse], error)
	DeleteEnemy(context.Context, *connect.Request[v1.DeleteEnemyRequest]) (*connect.Response[v1.EnemyResponse], error)
	ListEnemies(context.Context, *connect.Request[v1.ListEnemiesRequest]) (*connect.Response[v1.ListEnemiesResponse], error)
}

// NewEnemyServiceClient constructs a client for the game.v1.EnemyService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEnemyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EnemyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	enemyServiceMethods := v1.File_game_v1_proto.Services().ByName("EnemyService").Methods()
	return &enemyServiceClient{
		createEnemy: connect.NewClient[v1.CreateEnemyRequest, v1.EnemyResponse](
			httpClient,
			baseURL+EnemyServiceCreateEnemyProcedure,
			connect.WithSchema(enemyServiceMethods.ByName("CreateEnemy")),
			connect.WithClientOptions(opts...),
		),
		getEnemy: connect.NewClient[v1.GetEnemyRequest, v1.EnemyResponse](
			httpClient,
			baseURL+EnemyServiceGetEnemyProcedure,
			connect.WithSchema(enemyServiceMethods.ByName("GetEnemy")),
			connect.WithClientOptions(opts...),
		),
		updateEnemy: connect.NewClient[v1.UpdateEnemyRequest, v1.EnemyResponse](
			httpClient,
			baseURL+EnemyServiceUpdateEnemyProcedure,
			connect.WithSchema(enemyServiceMethods.ByName("UpdateEnemy")),
			connect.WithClientOptions(opts...),
		),
		deleteEnemy: connect.NewClient[v1.DeleteEnemyRequest, v1.EnemyResponse](
			httpClient,
			baseURL+EnemyServiceDeleteEnemyProcedure,
			connect.WithSchema(enemyServiceMethods.ByName("DeleteEnemy")),
			connect.WithClientOptions(opts...),
		),
		listEnemies: connect.NewClient[v1.ListEnemiesRequest, v1.ListEnemiesResponse](
			httpClient,
			baseURL+EnemyServiceListEnemiesProcedure,
			connect.WithSchema(enemyServiceMethods.ByName("ListEnemies")),
			connect.WithClientOptions(opts...),
		),
	}
}

// enemyServiceClient implements EnemyServiceClient.
type enemyServiceClient struct {
	createEnemy *connect.Client[v1.CreateEnemyRequest, v1.EnemyResponse]
	getEnemy    *connect.Client[v1.GetEnemyRequest, v1.EnemyResponse]
	updateEnemy *connect.Client[v1.UpdateEnemyRequest, v1.EnemyResponse]
	deleteEnemy *connect.Client[v1.DeleteEnemyRequest, v1.EnemyResponse]
	listEnemies *connect.Client[v1.ListEnemiesRequest, v1.ListEnemiesResponse]
}

// CreateEnemy calls game.v1.EnemyService.CreateEnemy.
func (c *enemyServiceClient) CreateEnemy(ctx context.Context, req *connect.Request[v1.CreateEnemyRequest]) (*connect.Response[v1.EnemyResponse], error) {
	return c.createEnemy.CallUnary(ctx, req)
}

// GetEnemy calls game.v1.EnemyService.GetEnemy.
func (c *enemyServiceClient) GetEnemy(ctx context.Context, req *connect.Request[v1.GetEnemyRequest]) (*connect.Response[v1.EnemyResponse], error) {
	return c.getEnemy.CallUnary(ctx, req)
}

// UpdateEnemy calls game.v1.EnemyService.UpdateEnemy.
func (c *enemyServiceClient) UpdateEnemy(ctx context.Context, req *connect.Request[v1.UpdateEnemyRequest]) (*connect.Response[v1.EnemyResponse], error) {
	return c.updateEnemy.CallUnary(ctx, req)
}

// DeleteEnemy calls game.v1.EnemyService.DeleteEnemy.
func (c *enemyServiceClient) DeleteEnemy(ctx context.Context, req *connect.Request[v1.DeleteEnemyRequest]) (*connect.Response[v1.EnemyResponse], error) {
	return c.deleteEnemy.CallUnary(ctx, req)
}

// ListEnemies calls game.v1.EnemyService.ListEnemies.
func (c *enemyServiceClient) ListEnemies(ctx context.Context, req *connect.Request[v1.ListEnemiesRequest]) (*connect.Response[v1.ListEnemiesResponse], error) {
	return c.listEnemies.CallUnary(ctx, req)
}

// EnemyServiceHandler is an implementation of the game.v1.EnemyService service.
type EnemyServiceHandler interface {
	CreateEnemy(context.Context, *connect.Request[v1.CreateEnemyRequest]) (*connect.Response[v1.EnemyResponse], error)
	GetEnemy(context.Context, *connect.Request[v1.GetEnemyRequest]) (*connect.Response[v1.EnemyResponse], error)
	UpdateEnemy(context.Context, *connect.Request[v1.UpdateEnemyRequest]) (*connect.Response[v1.EnemyResponse], error)
	DeleteEnemy(context.Context, *connect.Request[v1.DeleteEnemyRequest]) (*connect.Response[v1.EnemyResponse], error)
	ListEnemies(context.Context, *connect.Request[v1.ListEnemiesRequest]) (*connect.Response[v1.ListEnemiesResponse], error)
}

// NewEnemyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEnemyServiceHandler(svc EnemyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	enemyServiceMethods := v1.File_game_v1_proto.Services().ByName("EnemyService").Methods()
	enemyServiceCreateEnemyHandler := connect.NewUnaryHandler(
		EnemyServiceCreateEnemyProcedure,
		svc.CreateEnemy,
		connect.WithSchema(enemyServiceMethods.ByName("CreateEnemy")),
		connect.WithHandlerOptions(opts...),
	)
	enemyServiceGetEnemyHandler := connect.NewUnaryHandler(
		EnemyServiceGetEnemyProcedure,
		svc.GetEnemy,
		connect.WithSchema(enemyServiceMethods.ByName("GetEnemy")),
		connect.WithHandlerOptions(opts...),
	)
	enemyServiceUpdateEnemyHandler := connect.NewUnaryHandler(
		EnemyServiceUpdateEnemyProcedure,
		svc.UpdateEnemy,
		connect.WithSchema(enemyServiceMethods.ByName("UpdateEnemy")),
		connect.WithHandlerOptions(opts...),
	)
	enemyServiceDeleteEnemyHandler := connect.NewUnaryHandler(
		EnemyServiceDeleteEnemyProcedure,
		svc.DeleteEnemy,
		connect.WithSchema(enemyServiceMethods.ByName("DeleteEnemy")),
		connect.WithHandlerOptions(opts...),
	)
	enemyServiceListEnemiesHandler := connect.NewUnaryHandler(
		EnemyServiceListEnemiesProcedure,
		svc.ListEnemies,
		connect.WithSchema(enemyServiceMethods.ByName("ListEnemies")),
		connect.WithHandlerOptions(opts...),
	)
	return "/game.v1.EnemyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EnemyServiceCreateEnemyProcedure:
			enemyServiceCreateEnemyHandler.ServeHTTP(w, r)
		case EnemyServiceGetEnemyProcedure:
			enemyServiceGetEnemyHandler.ServeHTTP(w, r)
		case EnemyServiceUpdateEnemyProcedure:
			enemyServiceUpdateEnemyHandler.ServeHTTP(w, r)
		case EnemyServiceDeleteEnemyProcedure:
			enemyServiceDeleteEnemyHandler.ServeHTTP(w, r)
		case EnemyServiceListEnemiesProcedure:
			enemyServiceListEnemiesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEnemyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEnemyServiceHandler struct{}

func (UnimplementedEnemyServiceHandler) CreateEnemy(context.Context, *connect.Request[v1.CreateEnemyRequest]) (*connect.Response[v1.EnemyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.EnemyService.CreateEnemy is not implemented"))
}

func (UnimplementedEnemyServiceHandler) GetEnemy(context.Context, *connect.Request[v1.GetEnemyRequest]) (*connect.Response[v1.EnemyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.EnemyService.GetEnemy is not implemented"))
}

func (UnimplementedEnemyServiceHandler) UpdateEnemy(context.Context, *connect.Request[v1.UpdateEnemyRequest]) (*connect.Response[v1.EnemyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.EnemyService.UpdateEnemy is not implemented"))
}

func (UnimplementedEnemyServiceHandler) DeleteEnemy(context.Context, *connect.Request[v1.DeleteEnemyRequest]) (*connect.Response[v1.EnemyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.EnemyService.DeleteEnemy is not implemented"))
}

func (UnimplementedEnemyServiceHandler) ListEnemies(context.Context, *connect.Request[v1.ListEnemiesRequest]) (*connect.Response[v1.ListEnemiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.EnemyService.ListEnemies is not implemented"))
}

// ItemCategoryServiceClient is a client for the game.v1.ItemCategoryService service.
type ItemCategoryServiceClient interface {
	CreateItemCategory(context.Context, *connect.Request[v1.CreateItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error)
	GetItemCategory(context.Context, *connect.Request[v1.GetItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error)
	UpdateItemCategory(context.Context, *connect.Request[v1.UpdateItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error)
	DeleteItemCategory(context.Context, *connect.Request[v1.DeleteItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error)
	ListItemCategories(context.Context, *connect.Request[v1.ListItemCategoriesRequest]) (*connect.Response[v1.ListItemCategoriesResponse], error)
}

// NewItemCategoryServiceClient constructs a client for the game.v1.ItemCategoryService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewItemCategoryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ItemCategoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	itemCategoryServiceMethods := v1.File_game_v1_proto.Services().ByName("ItemCategoryService").Methods()
	return &itemCategoryServiceClient{
		createItemCategory: connect.NewClient[v1.CreateItemCategoryRequest, v1.ItemCategoryResponse](
			httpClient,
			baseURL+ItemCategoryServiceCreateItemCategoryProcedure,
			connect.WithSchema(itemCategoryServiceMethods.ByName("CreateItemCategory")),
			connect.WithClientOptions(opts...),
		),
		getItemCategory: connect.NewClient[v1.GetItemCategoryRequest, v1.ItemCategoryResponse](
			httpClient,
			baseURL+ItemCategoryServiceGetItemCategoryProcedure,
			connect.WithSchema(itemCategoryServiceMethods.ByName("GetItemCategory")),
			connect.WithClientOptions(opts...),
		),
		updateItemCategory: connect.NewClient[v1.UpdateItemCategoryRequest, v1.ItemCategoryResponse](
			httpClient,
			baseURL+ItemCategoryServiceUpdateItemCategoryProcedure,
			connect.WithSchema(itemCategoryServiceMethods.ByName("UpdateItemCategory")),
			connect.WithClientOptions(opts...),
		),
		deleteItemCategory: connect.NewClient[v1.DeleteItemCategoryRequest, v1.ItemCategoryResponse](
			httpClient,
			baseURL+ItemCategoryServiceDeleteItemCategoryProcedure,
			connect.WithSchema(itemCategoryServiceMethods.ByName("DeleteItemCategory")),
			connect.WithClientOptions(opts...),
		),
		listItemCategories: connect.NewClient[v1.ListItemCategoriesRequest, v1.ListItemCategoriesResponse](
			httpClient,
			baseURL+ItemCategoryServiceListItemCategoriesProcedure,
			connect.WithSchema(itemCategoryServiceMethods.ByName("ListItemCategories")),
			connect.WithClientOptions(opts...),
		),
	}
}

// itemCategoryServiceClient implements ItemCategoryServiceClient.
type itemCategoryServiceClient struct {
	createItemCategory *connect.Client[v1.CreateItemCategoryRequest, v1.ItemCategoryResponse]
	getItemCategory    *connect.Client[v1.GetItemCategoryRequest, v1.ItemCategoryResponse]
	updateItemCategory *connect.Client[v1.UpdateItemCategoryRequest, v1.ItemCategoryResponse]
	deleteItemCategory *connect.Client[v1.DeleteItemCategoryRequest, v1.ItemCategoryResponse]
	listItemCategories *connect.Client[v1.ListItemCategoriesRequest, v1.ListItemCategoriesResponse]
}

// CreateItemCategory calls game.v1.ItemCategoryService.CreateItemCategory.
func (c *itemCategoryServiceClient) CreateItemCategory(ctx context.Context, req *connect.Request[v1.CreateItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error) {
	return c.createItemCategory.CallUnary(ctx, req)
}

// GetItemCategory calls game.v1.ItemCategoryService.GetItemCategory.
func (c *itemCategoryServiceClient) GetItemCategory(ctx context.Context, req *connect.Request[v1.GetItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error) {
	return c.getItemCategory.CallUnary(ctx, req)
}

// UpdateItemCategory calls game.v1.ItemCategoryService.UpdateItemCategory.
func (c *itemCategoryServiceClient) UpdateItemCategory(ctx context.Context, req *connect.Request[v1.UpdateItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error) {
	return c.updateItemCategory.CallUnary(ctx, req)
}

// DeleteItemCategory calls game.v1.ItemCategoryService.DeleteItemCategory.
func (c *itemCategoryServiceClient) DeleteItemCategory(ctx context.Context, req *connect.Request[v1.DeleteItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error) {
	return c.deleteItemCategory.CallUnary(ctx, req)
}

// ListItemCategories calls game.v1.ItemCategoryService.ListItemCategories.
func (c *itemCategoryServiceClient) ListItemCategories(ctx context.Context, req *connect.Request[v1.ListItemCategoriesRequest]) (*connect.Response[v1.ListItemCategoriesResponse], error) {
	return c.listItemCategories.CallUnary(ctx, req)
}

// ItemCategoryServiceHandler is an implementation of the game.v1.ItemCategoryService service.
type ItemCategoryServiceHandler interface {
	CreateItemCategory(context.Context, *connect.Request[v1.CreateItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error)
	GetItemCategory(context.Context, *connect.Request[v1.GetItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error)
	UpdateItemCategory(context.Context, *connect.Request[v1.UpdateItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error)
	DeleteItemCategory(context.Context, *connect.Request[v1.DeleteItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error)
	ListItemCategories(context.Context, *connect.Request[v1.ListItemCategoriesRequest]) (*connect.Response[v1.ListItemCategoriesResponse], error)
}

// NewItemCategoryServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewItemCategoryServiceHandler(svc ItemCategoryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	itemCategoryServiceMethods := v1.File_game_v1_proto.Services().ByName("ItemCategoryService").Methods()
	itemCategoryServiceCreateItemCategoryHandler := connect.NewUnaryHandler(
		ItemCategoryServiceCreateItemCategoryProcedure,
		svc.CreateItemCategory,
		connect.WithSchema(itemCategoryServiceMethods.ByName("CreateItemCategory")),
		connect.WithHandlerOptions(opts...),
	)
	itemCategoryServiceGetItemCategoryHandler := connect.NewUnaryHandler(
		ItemCategoryServiceGetItemCategoryProcedure,
		svc.GetItemCategory,
		connect.WithSchema(itemCategoryServiceMethods.ByName("GetItemCategory")),
		connect.WithHandlerOptions(opts...),
	)
	itemCategoryServiceUpdateItemCategoryHandler := connect.NewUnaryHandler(
		ItemCategoryServiceUpdateItemCategoryProcedure,
		svc.UpdateItemCategory,
		connect.WithSchema(itemCategoryServiceMethods.ByName("UpdateItemCategory")),
		connect.WithHandlerOptions(opts...),
	)
	itemCategoryServiceDeleteItemCategoryHandler := connect.NewUnaryHandler(
		ItemCategoryServiceDeleteItemCategoryProcedure,
		svc.DeleteItemCategory,
		connect.WithSchema(itemCategoryServiceMethods.ByName("DeleteItemCategory")),
		connect.WithHandlerOptions(opts...),
	)
	itemCategoryServiceListItemCategoriesHandler := connect.NewUnaryHandler(
		ItemCategoryServiceListItemCategoriesProcedure,
		svc.ListItemCategories,
		connect.WithSchema(itemCategoryServiceMethods.ByName("ListItemCategories")),
		connect.WithHandlerOptions(opts...),
	)
	return "/game.v1.ItemCategoryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ItemCategoryServiceCreateItemCategoryProcedure:
			itemCategoryServiceCreateItemCategoryHandler.ServeHTTP(w, r)
		case ItemCategoryServiceGetItemCategoryProcedure:
			itemCategoryServiceGetItemCategoryHandler.ServeHTTP(w, r)
		case ItemCategoryServiceUpdateItemCategoryProcedure:
			itemCategoryServiceUpdateItemCategoryHandler.ServeHTTP(w, r)
		case ItemCategoryServiceDeleteItemCategoryProcedure:
			itemCategoryServiceDeleteItemCategoryHandler.ServeHTTP(w, r)
		case ItemCategoryServiceListItemCategoriesProcedure:
			itemCategoryServiceListItemCategoriesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedItemCategoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedItemCategoryServiceHandler struct{}

func (UnimplementedItemCategoryServiceHandler) CreateItemCategory(context.Context, *connect.Request[v1.CreateItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.ItemCategoryService.CreateItemCategory is not implemented"))
}

func (UnimplementedItemCategoryServiceHandler) GetItemCategory(context.Context, *connect.Request[v1.GetItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.ItemCategoryService.GetItemCategory is not implemented"))
}

func (UnimplementedItemCategoryServiceHandler) UpdateItemCategory(context.Context, *connect.Request[v1.UpdateItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.ItemCategoryService.UpdateItemCategory is not implemented"))
}

func (UnimplementedItemCategoryServiceHandler) DeleteItemCategory(context.Context, *connect.Request[v1.DeleteItemCategoryRequest]) (*connect.Response[v1.ItemCategoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.ItemCategoryService.DeleteItemCategory is not implemented"))
}

func (UnimplementedItemCategoryServiceHandler) ListItemCategories(context.Context, *connect.Request[v1.ListItemCategoriesRequest]) (*connect.Response[v1.ListItemCategoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.ItemCategoryService.ListItemCategories is not implemented"))
}

// ItemServiceClient is a client for the game.v1.ItemService service.
type ItemServiceClient interface {
	CreateItem(context.Context, *connect.Request[v1.CreateItemRequest]) (*connect.Response[v1.ItemResponse], error)
	GetItem(context.Context, *connect.Request[v1.GetItemRequest]) (*connect.Response[v1.ItemResponse], error)
	UpdateItem(context.Context, *connect.Request[v1.UpdateItemRequest]) (*connect.Response[v1.ItemResponse], error)
	DeleteItem(context.Context, *connect.Request[v1.DeleteItemRequest]) (*connect.Response[v1.ItemResponse], error)
	ListItems(context.Context, *connect.Request[v1.ListItemsRequest]) (*connect.Response[v1.ListItemsResponse], error)
}

// NewItemServiceClient constructs a client for the game.v1.ItemService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewItemServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ItemServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	itemServiceMethods := v1.File_game_v1_proto.Services().ByName("ItemService").Methods()
	return &itemServiceClient{
		createItem: connect.NewClient[v1.CreateItemRequest, v1.ItemResponse](
			httpClient,
			baseURL+ItemServiceCreateItemProcedure,
			connect.WithSchema(itemServiceMethods.ByName("CreateItem")),
			connect.WithClientOptions(opts...),
		),
		getItem: connect.NewClient[v1.GetItemRequest, v1.ItemResponse](
			httpClient,
			baseURL+ItemServiceGetItemProcedure,
			connect.WithSchema(itemServiceMethods.ByName("GetItem")),
			connect.WithClientOptions(opts...),
		),
		updateItem: connect.NewClient[v1.UpdateItemRequest, v1.ItemResponse](
			httpClient,
			baseURL+ItemServiceUpdateItemProcedure,
			connect.WithSchema(itemServiceMethods.ByName("UpdateItem")),
			connect.WithClientOptions(opts...),
		),
		deleteItem: connect.NewClient[v1.DeleteItemRequest, v1.ItemResponse](
			httpClient,
			baseURL+ItemServiceDeleteItemProcedure,
			connect.WithSchema(itemServiceMethods.ByName("DeleteItem")),
			connect.WithClientOptions(opts...),
		),
		listItems: connect.NewClient[v1.ListItemsRequest, v1.ListItemsResponse](
			httpClient,
			baseURL+ItemServiceListItemsProcedure,
			connect.WithSchema(itemServiceMethods.ByName("ListItems")),
			connect.WithClientOptions(opts...),
		),
	}
}

// itemServiceClient implements ItemServiceClient.
type itemServiceClient struct {
	createItem *connect.Client[v1.CreateItemRequest, v1.ItemResponse]
	getItem    *connect.Client[v1.GetItemRequest, v1.ItemResponse]
	updateItem *connect.Client[v1.UpdateItemRequest, v1.ItemResponse]
	deleteItem *connect.Client[v1.DeleteItemRequest, v1.ItemResponse]
	listItems  *connect.Client[v1.ListItemsRequest, v1.ListItemsResponse]
}

// CreateItem calls game.v1.ItemService.CreateItem.
func (c *itemServiceClient) CreateItem(ctx context.Context, req *connect.Request[v1.CreateItemRequest]) (*connect.Response[v1.ItemResponse], error) {
	return c.createItem.CallUnary(ctx, req)
}

// GetItem calls game.v1.ItemService.GetItem.
func (c *itemServiceClient) GetItem(ctx context.Context, req *connect.Request[v1.GetItemRequest]) (*connect.Response[v1.ItemResponse], error) {
	return c.getItem.CallUnary(ctx, req)
}

// UpdateItem calls game.v1.ItemService.UpdateItem.
func (c *itemServiceClient) UpdateItem(ctx context.Context, req *connect.Request[v1.UpdateItemRequest]) (*connect.Response[v1.ItemResponse], error) {
	return c.updateItem.CallUnary(ctx, req)
}

// DeleteItem calls game.v1.ItemService.DeleteItem.
func (c *itemServiceClient) DeleteItem(ctx context.Context, req *connect.Request[v1.DeleteItemRequest]) (*connect.Response[v1.ItemResponse], error) {
	return c.deleteItem.CallUnary(ctx, req)
}

// ListItems calls game.v1.ItemService.ListItems.
func (c *itemServiceClient) ListItems(ctx context.Context, req *connect.Request[v1.ListItemsRequest]) (*connect.Response[v1.ListItemsResponse], error) {
	return c.listItems.CallUnary(ctx, req)
}

// ItemServiceHandler is an implementation of the game.v1.ItemService service.
type ItemServiceHandler interface {
	CreateItem(context.Context, *connect.Request[v1.CreateItemRequest]) (*connect.Response[v1.ItemResponse], error)
	GetItem(context.Context, *connect.Request[v1.GetItemRequest]) (*connect.Response[v1.ItemResponse], error)
	UpdateItem(context.Context, *connect.Request[v1.UpdateItemRequest]) (*connect.Response[v1.ItemResponse], error)
	DeleteItem(context.Context, *connect.Request[v1.DeleteItemRequest]) (*connect.Response[v1.ItemResponse], error)
	ListItems(context.Context, *connect.Request[v1.ListItemsRequest]) (*connect.Response[v1.ListItemsResponse], error)
}

// NewItemServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewItemServiceHandler(svc ItemServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	itemServiceMethods := v1.File_game_v1_proto.Services().ByName("ItemService").Methods()
	itemServiceCreateItemHandler := connect.NewUnaryHandler(
		ItemServiceCreateItemProcedure,
		svc.CreateItem,
		connect.WithSchema(itemServiceMethods.ByName("CreateItem")),
		connect.WithHandlerOptions(opts...),
	)
	itemServiceGetItemHandler := connect.NewUnaryHandler(
		ItemServiceGetItemProcedure,
		svc.GetItem,
		connect.WithSchema(itemServiceMethods.ByName("GetItem")),
		connect.WithHandlerOptions(opts...),
	)
	itemServiceUpdateItemHandler := connect.NewUnaryHandler(
		ItemServiceUpdateItemProcedure,
		svc.UpdateItem,
		connect.WithSchema(itemServiceMethods.ByName("UpdateItem")),
		connect.WithHandlerOptions(opts...),
	)
	itemServiceDeleteItemHandler := connect.NewUnaryHandler(
		ItemServiceDeleteItemProcedure,
		svc.DeleteItem,
		connect.WithSchema(itemServiceMethods.ByName("DeleteItem")),
		connect.WithHandlerOptions(opts...),
	)
	itemServiceListItemsHandler := connect.NewUnaryHandler(
		ItemServiceListItemsProcedure,
		svc.ListItems,
		connect.WithSchema(itemServiceMethods.ByName("ListItems")),
		connect.WithHandlerOptions(opts...),
	)
	return "/game.v1.ItemService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ItemServiceCreateItemProcedure:
			itemServiceCreateItemHandler.ServeHTTP(w, r)
		case ItemServiceGetItemProcedure:
			itemServiceGetItemHandler.ServeHTTP(w, r)
		case ItemServiceUpdateItemProcedure:
			itemServiceUpdateItemHandler.ServeHTTP(w, r)
		case ItemServiceDeleteItemProcedure:
			itemServiceDeleteItemHandler.ServeHTTP(w, r)
		case ItemServiceListItemsProcedure:
			itemServiceListItemsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedItemServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedItemServiceHandler struct{}

func (UnimplementedItemServiceHandler) CreateItem(context.Context, *connect.Request[v1.CreateItemRequest]) (*connect.Response[v1.ItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.ItemService.CreateItem is not implemented"))
}

func (UnimplementedItemServiceHandler) GetItem(context.Context, *connect.Request[v1.GetItemRequest]) (*connect.Response[v1.ItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.ItemService.GetItem is not implemented"))
}

func (UnimplementedItemServiceHandler) UpdateItem(context.Context, *connect.Request[v1.UpdateItemRequest]) (*connect.Response[v1.ItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.ItemService.UpdateItem is not implemented"))
}

func (UnimplementedItemServiceHandler) DeleteItem(context.Context, *connect.Request[v1.DeleteItemRequest]) (*connect.Response[v1.ItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.ItemService.DeleteItem is not implemented"))
}

func (UnimplementedItemServiceHandler) ListItems(context.Context, *connect.Request[v1.ListItemsRequest]) (*connect.Response[v1.ListItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.ItemService.ListItems is not implemented"))
}

// NpcTemplateServiceClient is a client for the game.v1.NpcTemplateService service.
type NpcTemplateServiceClient interface {
	CreateNpcTemplate(context.Context, *connect.Request[v1.CreateNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error)
	GetNpcTemplate(context.Context, *connect.Request[v1.GetNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error)
	UpdateNpcTemplate(context.Context, *connect.Request[v1.UpdateNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error)
	DeleteNpcTemplate(context.Context, *connect.Request[v1.DeleteNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error)
	ListNpcTemplates(context.Context, *connect.Request[v1.ListNpcTemplatesRequest]) (*connect.Response[v1.ListNpcTemplatesResponse], error)
}

// NewNpcTemplateServiceClient constructs a client for the game.v1.NpcTemplateService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNpcTemplateServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NpcTemplateServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	npcTemplateServiceMethods := v1.File_game_v1_proto.Services().ByName("NpcTemplateService").Methods()
	return &npcTemplateServiceClient{
		createNpcTemplate: connect.NewClient[v1.CreateNpcTemplateRequest, v1.NpcTemplateResponse](
			httpClient,
			baseURL+NpcTemplateServiceCreateNpcTemplateProcedure,
			connect.WithSchema(npcTemplateServiceMethods.ByName("CreateNpcTemplate")),
			connect.WithClientOptions(opts...),
		),
		getNpcTemplate: connect.NewClient[v1.GetNpcTemplateRequest, v1.NpcTemplateResponse](
			httpClient,
			baseURL+NpcTemplateServiceGetNpcTemplateProcedure,
			connect.WithSchema(npcTemplateServiceMethods.ByName("GetNpcTemplate")),
			connect.WithClientOptions(opts...),
		),
		updateNpcTemplate: connect.NewClient[v1.UpdateNpcTemplateRequest, v1.NpcTemplateResponse](
			httpClient,
			baseURL+NpcTemplateServiceUpdateNpcTemplateProcedure,
			connect.WithSchema(npcTemplateServiceMethods.ByName("UpdateNpcTemplate")),
			connect.WithClientOptions(opts...),
		),
		deleteNpcTemplate: connect.NewClient[v1.DeleteNpcTemplateRequest, v1.NpcTemplateResponse](
			httpClient,
			baseURL+NpcTemplateServiceDeleteNpcTemplateProcedure,
			connect.WithSchema(npcTemplateServiceMethods.ByName("DeleteNpcTemplate")),
			connect.WithClientOptions(opts...),
		),
		listNpcTemplates: connect.NewClient[v1.ListNpcTemplatesRequest, v1.ListNpcTemplatesResponse](
			httpClient,
			baseURL+NpcTemplateServiceListNpcTemplatesProcedure,
			connect.WithSchema(npcTemplateServiceMethods.ByName("ListNpcTemplates")),
			connect.WithClientOptions(opts...),
		),
	}
}

// npcTemplateServiceClient implements NpcTemplateServiceClient.
type npcTemplateServiceClient struct {
	createNpcTemplate *connect.Client[v1.CreateNpcTemplateRequest, v1.NpcTemplateResponse]
	getNpcTemplate    *connect.Client[v1.GetNpcTemplateRequest, v1.NpcTemplateResponse]
	updateNpcTemplate *connect.Client[v1.UpdateNpcTemplateRequest, v1.NpcTemplateResponse]
	deleteNpcTemplate *connect.Client[v1.DeleteNpcTemplateRequest, v1.NpcTemplateResponse]
	listNpcTemplates  *connect.Client[v1.ListNpcTemplatesRequest, v1.ListNpcTemplatesResponse]
}

// CreateNpcTemplate calls game.v1.NpcTemplateService.CreateNpcTemplate.
func (c *npcTemplateServiceClient) CreateNpcTemplate(ctx context.Context, req *connect.Request[v1.CreateNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error) {
	return c.createNpcTemplate.CallUnary(ctx, req)
}

// GetNpcTemplate calls game.v1.NpcTemplateService.GetNpcTemplate.
func (c *npcTemplateServiceClient) GetNpcTemplate(ctx context.Context, req *connect.Request[v1.GetNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error) {
	return c.getNpcTemplate.CallUnary(ctx, req)
}

// UpdateNpcTemplate calls game.v1.NpcTemplateService.UpdateNpcTemplate.
func (c *npcTemplateServiceClient) UpdateNpcTemplate(ctx context.Context, req *connect.Request[v1.UpdateNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error) {
	return c.updateNpcTemplate.CallUnary(ctx, req)
}

// DeleteNpcTemplate calls game.v1.NpcTemplateService.DeleteNpcTemplate.
func (c *npcTemplateServiceClient) DeleteNpcTemplate(ctx context.Context, req *connect.Request[v1.DeleteNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error) {
	return c.deleteNpcTemplate.CallUnary(ctx, req)
}

// ListNpcTemplates calls game.v1.NpcTemplateService.ListNpcTemplates.
func (c *npcTemplateServiceClient) ListNpcTemplates(ctx context.Context, req *connect.Request[v1.ListNpcTemplatesRequest]) (*connect.Response[v1.ListNpcTemplatesResponse], error) {
	return c.listNpcTemplates.CallUnary(ctx, req)
}

// NpcTemplateServiceHandler is an implementation of the game.v1.NpcTemplateService service.
type NpcTemplateServiceHandler interface {
	CreateNpcTemplate(context.Context, *connect.Request[v1.CreateNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error)
	GetNpcTemplate(context.Context, *connect.Request[v1.GetNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error)
	UpdateNpcTemplate(context.Context, *connect.Request[v1.UpdateNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error)
	DeleteNpcTemplate(context.Context, *connect.Request[v1.DeleteNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error)
	ListNpcTemplates(context.Context, *connect.Request[v1.ListNpcTemplatesRequest]) (*connect.Response[v1.ListNpcTemplatesResponse], error)
}

// NewNpcTemplateServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNpcTemplateServiceHandler(svc NpcTemplateServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	npcTemplateServiceMethods := v1.File_game_v1_proto.Services().ByName("NpcTemplateService").Methods()
	npcTemplateServiceCreateNpcTemplateHandler := connect.NewUnaryHandler(
		NpcTemplateServiceCreateNpcTemplateProcedure,
		svc.CreateNpcTemplate,
		connect.WithSchema(npcTemplateServiceMethods.ByName("CreateNpcTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	npcTemplateServiceGetNpcTemplateHandler := connect.NewUnaryHandler(
		NpcTemplateServiceGetNpcTemplateProcedure,
		svc.GetNpcTemplate,
		connect.WithSchema(npcTemplateServiceMethods.ByName("GetNpcTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	npcTemplateServiceUpdateNpcTemplateHandler := connect.NewUnaryHandler(
		NpcTemplateServiceUpdateNpcTemplateProcedure,
		svc.UpdateNpcTemplate,
		connect.WithSchema(npcTemplateServiceMethods.ByName("UpdateNpcTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	npcTemplateServiceDeleteNpcTemplateHandler := connect.NewUnaryHandler(
		NpcTemplateServiceDeleteNpcTemplateProcedure,
		svc.DeleteNpcTemplate,
		connect.WithSchema(npcTemplateServiceMethods.ByName("DeleteNpcTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	npcTemplateServiceListNpcTemplatesHandler := connect.NewUnaryHandler(
		NpcTemplateServiceListNpcTemplatesProcedure,
		svc.ListNpcTemplates,
		connect.WithSchema(npcTemplateServiceMethods.ByName("ListNpcTemplates")),
		connect.WithHandlerOptions(opts...),
	)
	return "/game.v1.NpcTemplateService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NpcTemplateServiceCreateNpcTemplateProcedure:
			npcTemplateServiceCreateNpcTemplateHandler.ServeHTTP(w, r)
		case NpcTemplateServiceGetNpcTemplateProcedure:
			npcTemplateServiceGetNpcTemplateHandler.ServeHTTP(w, r)
		case NpcTemplateServiceUpdateNpcTemplateProcedure:
			npcTemplateServiceUpdateNpcTemplateHandler.ServeHTTP(w, r)
		case NpcTemplateServiceDeleteNpcTemplateProcedure:
			npcTemplateServiceDeleteNpcTemplateHandler.ServeHTTP(w, r)
		case NpcTemplateServiceListNpcTemplatesProcedure:
			npcTemplateServiceListNpcTemplatesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNpcTemplateServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNpcTemplateServiceHandler struct{}

func (UnimplementedNpcTemplateServiceHandler) CreateNpcTemplate(context.Context, *connect.Request[v1.CreateNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.NpcTemplateService.CreateNpcTemplate is not implemented"))
}

func (UnimplementedNpcTemplateServiceHandler) GetNpcTemplate(context.Context, *connect.Request[v1.GetNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.NpcTemplateService.GetNpcTemplate is not implemented"))
}

func (UnimplementedNpcTemplateServiceHandler) UpdateNpcTemplate(context.Context, *connect.Request[v1.UpdateNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.NpcTemplateService.UpdateNpcTemplate is not implemented"))
}

func (UnimplementedNpcTemplateServiceHandler) DeleteNpcTemplate(context.Context, *connect.Request[v1.DeleteNpcTemplateRequest]) (*connect.Response[v1.NpcTemplateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.NpcTemplateService.DeleteNpcTemplate is not implemented"))
}

func (UnimplementedNpcTemplateServiceHandler) ListNpcTemplates(context.Context, *connect.Request[v1.ListNpcTemplatesRequest]) (*connect.Response[v1.ListNpcTemplatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.NpcTemplateService.ListNpcTemplates is not implemented"))
}

// NpcSpawnRuleServiceClient is a client for the game.v1.NpcSpawnRuleService service.
type NpcSpawnRuleServiceClient interface {
	CreateNpcSpawnRule(context.Context, *connect.Request[v1.CreateNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error)
	GetNpcSpawnRule(context.Context, *connect.Request[v1.GetNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error)
	UpdateNpcSpawnRule(context.Context, *connect.Request[v1.UpdateNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error)
	DeleteNpcSpawnRule(context.Context, *connect.Request[v1.DeleteNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error)
	ListNpcSpawnRules(context.Context, *connect.Request[v1.ListNpcSpawnRulesRequest]) (*connect.Response[v1.ListNpcSpawnRulesResponse], error)
}

// NewNpcSpawnRuleServiceClient constructs a client for the game.v1.NpcSpawnRuleService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNpcSpawnRuleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NpcSpawnRuleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	npcSpawnRuleServiceMethods := v1.File_game_v1_proto.Services().ByName("NpcSpawnRuleService").Methods()
	return &npcSpawnRuleServiceClient{
		createNpcSpawnRule: connect.NewClient[v1.CreateNpcSpawnRuleRequest, v1.NpcSpawnRuleResponse](
			httpClient,
			baseURL+NpcSpawnRuleServiceCreateNpcSpawnRuleProcedure,
			connect.WithSchema(npcSpawnRuleServiceMethods.ByName("CreateNpcSpawnRule")),
			connect.WithClientOptions(opts...),
		),
		getNpcSpawnRule: connect.NewClient[v1.GetNpcSpawnRuleRequest, v1.NpcSpawnRuleResponse](
			httpClient,
			baseURL+NpcSpawnRuleServiceGetNpcSpawnRuleProcedure,
			connect.WithSchema(npcSpawnRuleServiceMethods.ByName("GetNpcSpawnRule")),
			connect.WithClientOptions(opts...),
		),
		updateNpcSpawnRule: connect.NewClient[v1.UpdateNpcSpawnRuleRequest, v1.NpcSpawnRuleResponse](
			httpClient,
			baseURL+NpcSpawnRuleServiceUpdateNpcSpawnRuleProcedure,
			connect.WithSchema(npcSpawnRuleServiceMethods.ByName("UpdateNpcSpawnRule")),
			connect.WithClientOptions(opts...),
		),
		deleteNpcSpawnRule: connect.NewClient[v1.DeleteNpcSpawnRuleRequest, v1.NpcSpawnRuleResponse](
			httpClient,
			baseURL+NpcSpawnRuleServiceDeleteNpcSpawnRuleProcedure,
			connect.WithSchema(npcSpawnRuleServiceMethods.ByName("DeleteNpcSpawnRule")),
			connect.WithClientOptions(opts...),
		),
		listNpcSpawnRules: connect.NewClient[v1.ListNpcSpawnRulesRequest, v1.ListNpcSpawnRulesResponse](
			httpClient,
			baseURL+NpcSpawnRuleServiceListNpcSpawnRulesProcedure,
			connect.WithSchema(npcSpawnRuleServiceMethods.ByName("ListNpcSpawnRules")),
			connect.WithClientOptions(opts...),
		),
	}
}

// npcSpawnRuleServiceClient implements NpcSpawnRuleServiceClient.
type npcSpawnRuleServiceClient struct {
	createNpcSpawnRule *connect.Client[v1.CreateNpcSpawnRuleRequest, v1.NpcSpawnRuleResponse]
	getNpcSpawnRule    *connect.Client[v1.GetNpcSpawnRuleRequest, v1.NpcSpawnRuleResponse]
	updateNpcSpawnRule *connect.Client[v1.UpdateNpcSpawnRuleRequest, v1.NpcSpawnRuleResponse]
	deleteNpcSpawnRule *connect.Client[v1.DeleteNpcSpawnRuleRequest, v1.NpcSpawnRuleResponse]
	listNpcSpawnRules  *connect.Client[v1.ListNpcSpawnRulesRequest, v1.ListNpcSpawnRulesResponse]
}

// CreateNpcSpawnRule calls game.v1.NpcSpawnRuleService.CreateNpcSpawnRule.
func (c *npcSpawnRuleServiceClient) CreateNpcSpawnRule(ctx context.Context, req *connect.Request[v1.CreateNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error) {
	return c.createNpcSpawnRule.CallUnary(ctx, req)
}

// GetNpcSpawnRule calls game.v1.NpcSpawnRuleService.GetNpcSpawnRule.
func (c *npcSpawnRuleServiceClient) GetNpcSpawnRule(ctx context.Context, req *connect.Request[v1.GetNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error) {
	return c.getNpcSpawnRule.CallUnary(ctx, req)
}

// UpdateNpcSpawnRule calls game.v1.NpcSpawnRuleService.UpdateNpcSpawnRule.
func (c *npcSpawnRuleServiceClient) UpdateNpcSpawnRule(ctx context.Context, req *connect.Request[v1.UpdateNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error) {
	return c.updateNpcSpawnRule.CallUnary(ctx, req)
}

// DeleteNpcSpawnRule calls game.v1.NpcSpawnRuleService.DeleteNpcSpawnRule.
func (c *npcSpawnRuleServiceClient) DeleteNpcSpawnRule(ctx context.Context, req *connect.Request[v1.DeleteNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error) {
	return c.deleteNpcSpawnRule.CallUnary(ctx, req)
}

// ListNpcSpawnRules calls game.v1.NpcSpawnRuleService.ListNpcSpawnRules.
func (c *npcSpawnRuleServiceClient) ListNpcSpawnRules(ctx context.Context, req *connect.Request[v1.ListNpcSpawnRulesRequest]) (*connect.Response[v1.ListNpcSpawnRulesResponse], error) {
	return c.listNpcSpawnRules.CallUnary(ctx, req)
}

// NpcSpawnRuleServiceHandler is an implementation of the game.v1.NpcSpawnRuleService service.
type NpcSpawnRuleServiceHandler interface {
	CreateNpcSpawnRule(context.Context, *connect.Request[v1.CreateNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error)
	GetNpcSpawnRule(context.Context, *connect.Request[v1.GetNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error)
	UpdateNpcSpawnRule(context.Context, *connect.Request[v1.UpdateNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error)
	DeleteNpcSpawnRule(context.Context, *connect.Request[v1.DeleteNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error)
	ListNpcSpawnRules(context.Context, *connect.Request[v1.ListNpcSpawnRulesRequest]) (*connect.Response[v1.ListNpcSpawnRulesResponse], error)
}

// NewNpcSpawnRuleServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNpcSpawnRuleServiceHandler(svc NpcSpawnRuleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	npcSpawnRuleServiceMethods := v1.File_game_v1_proto.Services().ByName("NpcSpawnRuleService").Methods()
	npcSpawnRuleServiceCreateNpcSpawnRuleHandler := connect.NewUnaryHandler(
		NpcSpawnRuleServiceCreateNpcSpawnRuleProcedure,
		svc.CreateNpcSpawnRule,
		connect.WithSchema(npcSpawnRuleServiceMethods.ByName("CreateNpcSpawnRule")),
		connect.WithHandlerOptions(opts...),
	)
	npcSpawnRuleServiceGetNpcSpawnRuleHandler := connect.NewUnaryHandler(
		NpcSpawnRuleServiceGetNpcSpawnRuleProcedure,
		svc.GetNpcSpawnRule,
		connect.WithSchema(npcSpawnRuleServiceMethods.ByName("GetNpcSpawnRule")),
		connect.WithHandlerOptions(opts...),
	)
	npcSpawnRuleServiceUpdateNpcSpawnRuleHandler := connect.NewUnaryHandler(
		NpcSpawnRuleServiceUpdateNpcSpawnRuleProcedure,
		svc.UpdateNpcSpawnRule,
		connect.WithSchema(npcSpawnRuleServiceMethods.ByName("UpdateNpcSpawnRule")),
		connect.WithHandlerOptions(opts...),
	)
	npcSpawnRuleServiceDeleteNpcSpawnRuleHandler := connect.NewUnaryHandler(
		NpcSpawnRuleServiceDeleteNpcSpawnRuleProcedure,
		svc.DeleteNpcSpawnRule,
		connect.WithSchema(npcSpawnRuleServiceMethods.ByName("DeleteNpcSpawnRule")),
		connect.WithHandlerOptions(opts...),
	)
	npcSpawnRuleServiceListNpcSpawnRulesHandler := connect.NewUnaryHandler(
		NpcSpawnRuleServiceListNpcSpawnRulesProcedure,
		svc.ListNpcSpawnRules,
		connect.WithSchema(npcSpawnRuleServiceMethods.ByName("ListNpcSpawnRules")),
		connect.WithHandlerOptions(opts...),
	)
	return "/game.v1.NpcSpawnRuleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NpcSpawnRuleServiceCreateNpcSpawnRuleProcedure:
			npcSpawnRuleServiceCreateNpcSpawnRuleHandler.ServeHTTP(w, r)
		case NpcSpawnRuleServiceGetNpcSpawnRuleProcedure:
			npcSpawnRuleServiceGetNpcSpawnRuleHandler.ServeHTTP(w, r)
		case NpcSpawnRuleServiceUpdateNpcSpawnRuleProcedure:
			npcSpawnRuleServiceUpdateNpcSpawnRuleHandler.ServeHTTP(w, r)
		case NpcSpawnRuleServiceDeleteNpcSpawnRuleProcedure:
			npcSpawnRuleServiceDeleteNpcSpawnRuleHandler.ServeHTTP(w, r)
		case NpcSpawnRuleServiceListNpcSpawnRulesProcedure:
			npcSpawnRuleServiceListNpcSpawnRulesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNpcSpawnRuleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNpcSpawnRuleServiceHandler struct{}

func (UnimplementedNpcSpawnRuleServiceHandler) CreateNpcSpawnRule(context.Context, *connect.Request[v1.CreateNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.NpcSpawnRuleService.CreateNpcSpawnRule is not implemented"))
}

func (UnimplementedNpcSpawnRuleServiceHandler) GetNpcSpawnRule(context.Context, *connect.Request[v1.GetNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.NpcSpawnRuleService.GetNpcSpawnRule is not implemented"))
}

func (UnimplementedNpcSpawnRuleServiceHandler) UpdateNpcSpawnRule(context.Context, *connect.Request[v1.UpdateNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.NpcSpawnRuleService.UpdateNpcSpawnRule is not implemented"))
}

func (UnimplementedNpcSpawnRuleServiceHandler) DeleteNpcSpawnRule(context.Context, *connect.Request[v1.DeleteNpcSpawnRuleRequest]) (*connect.Response[v1.NpcSpawnRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.NpcSpawnRuleService.DeleteNpcSpawnRule is not implemented"))
}

func (UnimplementedNpcSpawnRuleServiceHandler) ListNpcSpawnRules(context.Context, *connect.Request[v1.ListNpcSpawnRulesRequest]) (*connect.Response[v1.ListNpcSpawnRulesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.NpcSpawnRuleService.ListNpcSpawnRules is not implemented"))
}

// RaceServiceClient is a client for the game.v1.RaceService service.
type RaceServiceClient interface {
	CreateRace(context.Context, *connect.Request[v1.CreateRaceRequest]) (*connect.Response[v1.RaceResponse], error)
	GetRace(context.Context, *connect.Request[v1.GetRaceRequest]) (*connect.Response[v1.RaceResponse], error)
	UpdateRace(context.Context, *connect.Request[v1.UpdateRaceRequest]) (*connect.Response[v1.RaceResponse], error)
	DeleteRace(context.Context, *connect.Request[v1.DeleteRaceRequest]) (*connect.Response[v1.RaceResponse], error)
	ListRaces(context.Context, *connect.Request[v1.ListRacesRequest]) (*connect.Response[v1.ListRacesResponse], error)
}

// NewRaceServiceClient constructs a client for the game.v1.RaceService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRaceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RaceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	raceServiceMethods := v1.File_game_v1_proto.Services().ByName("RaceService").Methods()
	return &raceServiceClient{
		createRace: connect.NewClient[v1.CreateRaceRequest, v1.RaceResponse](
			httpClient,
			baseURL+RaceServiceCreateRaceProcedure,
			connect.WithSchema(raceServiceMethods.ByName("CreateRace")),
			connect.WithClientOptions(opts...),
		),
		getRace: connect.NewClient[v1.GetRaceRequest, v1.RaceResponse](
			httpClient,
			baseURL+RaceServiceGetRaceProcedure,
			connect.WithSchema(raceServiceMethods.ByName("GetRace")),
			connect.WithClientOptions(opts...),
		),
		updateRace: connect.NewClient[v1.UpdateRaceRequest, v1.RaceResponse](
			httpClient,
			baseURL+RaceServiceUpdateRaceProcedure,
			connect.WithSchema(raceServiceMethods.ByName("UpdateRace")),
			connect.WithClientOptions(opts...),
		),
		deleteRace: connect.NewClient[v1.DeleteRaceRequest, v1.RaceResponse](
			httpClient,
			baseURL+RaceServiceDeleteRaceProcedure,
			connect.WithSchema(raceServiceMethods.ByName("DeleteRace")),
			connect.WithClientOptions(opts...),
		),
		listRaces: connect.NewClient[v1.ListRacesRequest, v1.ListRacesResponse](
			httpClient,
			baseURL+RaceServiceListRacesProcedure,
			connect.WithSchema(raceServiceMethods.ByName("ListRaces")),
			connect.WithClientOptions(opts...),
		),
	}
}

// raceServiceClient implements RaceServiceClient.
type raceServiceClient struct {
	createRace *connect.Client[v1.CreateRaceRequest, v1.RaceResponse]
	getRace    *connect.Client[v1.GetRaceRequest, v1.RaceResponse]
	updateRace *connect.Client[v1.UpdateRaceRequest, v1.RaceResponse]
	deleteRace *connect.Client[v1.DeleteRaceRequest, v1.RaceResponse]
	listRaces  *connect.Client[v1.ListRacesRequest, v1.ListRacesResponse]
}

// CreateRace calls game.v1.RaceService.CreateRace.
func (c *raceServiceClient) CreateRace(ctx context.Context, req *connect.Request[v1.CreateRaceRequest]) (*connect.Response[v1.RaceResponse], error) {
	return c.createRace.CallUnary(ctx, req)
}

// GetRace calls game.v1.RaceService.GetRace.
func (c *raceServiceClient) GetRace(ctx context.Context, req *connect.Request[v1.GetRaceRequest]) (*connect.Response[v1.RaceResponse], error) {
	return c.getRace.CallUnary(ctx, req)
}

// UpdateRace calls game.v1.RaceService.UpdateRace.
func (c *raceServiceClient) UpdateRace(ctx context.Context, req *connect.Request[v1.UpdateRaceRequest]) (*connect.Response[v1.RaceResponse], error) {
	return c.updateRace.CallUnary(ctx, req)
}

// DeleteRace calls game.v1.RaceService.DeleteRace.
func (c *raceServiceClient) DeleteRace(ctx context.Context, req *connect.Request[v1.DeleteRaceRequest]) (*connect.Response[v1.RaceResponse], error) {
	return c.deleteRace.CallUnary(ctx, req)
}

// ListRaces calls game.v1.RaceService.ListRaces.
func (c *raceServiceClient) ListRaces(ctx context.Context, req *connect.Request[v1.ListRacesRequest]) (*connect.Response[v1.ListRacesResponse], error) {
	return c.listRaces.CallUnary(ctx, req)
}

// RaceServiceHandler is an implementation of the game.v1.RaceService service.
type RaceServiceHandler interface {
	CreateRace(context.Context, *connect.Request[v1.CreateRaceRequest]) (*connect.Response[v1.RaceResponse], error)
	GetRace(context.Context, *connect.Request[v1.GetRaceRequest]) (*connect.Response[v1.RaceResponse], error)
	UpdateRace(context.Context, *connect.Request[v1.UpdateRaceRequest]) (*connect.Response[v1.RaceResponse], error)
	DeleteRace(context.Context, *connect.Request[v1.DeleteRaceRequest]) (*connect.Response[v1.RaceResponse], error)
	ListRaces(context.Context, *connect.Request[v1.ListRacesRequest]) (*connect.Response[v1.ListRacesResponse], error)
}

// NewRaceServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRaceServiceHandler(svc RaceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	raceServiceMethods := v1.File_game_v1_proto.Services().ByName("RaceService").Methods()
	raceServiceCreateRaceHandler := connect.NewUnaryHandler(
		RaceServiceCreateRaceProcedure,
		svc.CreateRace,
		connect.WithSchema(raceServiceMethods.ByName("CreateRace")),
		connect.WithHandlerOptions(opts...),
	)
	raceServiceGetRaceHandler := connect.NewUnaryHandler(
		RaceServiceGetRaceProcedure,
		svc.GetRace,
		connect.WithSchema(raceServiceMethods.ByName("GetRace")),
		connect.WithHandlerOptions(opts...),
	)
	raceServiceUpdateRaceHandler := connect.NewUnaryHandler(
		RaceServiceUpdateRaceProcedure,
		svc.UpdateRace,
		connect.WithSchema(raceServiceMethods.ByName("UpdateRace")),
		connect.WithHandlerOptions(opts...),
	)
	raceServiceDeleteRaceHandler := connect.NewUnaryHandler(
		RaceServiceDeleteRaceProcedure,
		svc.DeleteRace,
		connect.WithSchema(raceServiceMethods.ByName("DeleteRace")),
		connect.WithHandlerOptions(opts...),
	)
	raceServiceListRacesHandler := connect.NewUnaryHandler(
		RaceServiceListRacesProcedure,
		svc.ListRaces,
		connect.WithSchema(raceServiceMethods.ByName("ListRaces")),
		connect.WithHandlerOptions(opts...),
	)
	return "/game.v1.RaceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RaceServiceCreateRaceProcedure:
			raceServiceCreateRaceHandler.ServeHTTP(w, r)
		case RaceServiceGetRaceProcedure:
			raceServiceGetRaceHandler.ServeHTTP(w, r)
		case RaceServiceUpdateRaceProcedure:
			raceServiceUpdateRaceHandler.ServeHTTP(w, r)
		case RaceServiceDeleteRaceProcedure:
			raceServiceDeleteRaceHandler.ServeHTTP(w, r)
		case RaceServiceListRacesProcedure:
			raceServiceListRacesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRaceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRaceServiceHandler struct{}

func (UnimplementedRaceServiceHandler) CreateRace(context.Context, *connect.Request[v1.CreateRaceRequest]) (*connect.Response[v1.RaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.RaceService.CreateRace is not implemented"))
}

func (UnimplementedRaceServiceHandler) GetRace(context.Context, *connect.Request[v1.GetRaceRequest]) (*connect.Response[v1.RaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.RaceService.GetRace is not implemented"))
}

func (UnimplementedRaceServiceHandler) UpdateRace(context.Context, *connect.Request[v1.UpdateRaceRequest]) (*connect.Response[v1.RaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.RaceService.UpdateRace is not implemented"))
}

func (UnimplementedRaceServiceHandler) DeleteRace(context.Context, *connect.Request[v1.DeleteRaceRequest]) (*connect.Response[v1.RaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.RaceService.DeleteRace is not implemented"))
}

func (UnimplementedRaceServiceHandler) ListRaces(context.Context, *connect.Request[v1.ListRacesRequest]) (*connect.Response[v1.ListRacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.RaceService.ListRaces is not implemented"))
}

// WorldNodeServiceClient is a client for the game.v1.WorldNodeService service.
type WorldNodeServiceClient interface {
	CreateWorldNode(context.Context, *connect.Request[v1.CreateWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error)
	GetWorldNode(context.Context, *connect.Request[v1.GetWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error)
	UpdateWorldNode(context.Context, *connect.Request[v1.UpdateWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error)
	DeleteWorldNode(context.Context, *connect.Request[v1.DeleteWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error)
	ListWorldNodes(context.Context, *connect.Request[v1.ListWorldNodesRequest]) (*connect.Response[v1.ListWorldNodesResponse], error)
	CreateWorldNodeFeature(context.Context, *connect.Request[v1.CreateWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error)
	GetWorldNodeFeature(context.Context, *connect.Request[v1.GetWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error)
	UpdateWorldNodeFeature(context.Context, *connect.Request[v1.UpdateWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error)
	DeleteWorldNodeFeature(context.Context, *connect.Request[v1.DeleteWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error)
	ListWorldNodeFeatures(context.Context, *connect.Request[v1.ListWorldNodeFeaturesRequest]) (*connect.Response[v1.ListWorldNodeFeaturesResponse], error)
}

// NewWorldNodeServiceClient constructs a client for the game.v1.WorldNodeService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorldNodeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WorldNodeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	worldNodeServiceMethods := v1.File_game_v1_proto.Services().ByName("WorldNodeService").Methods()
	return &worldNodeServiceClient{
		createWorldNode: connect.NewClient[v1.CreateWorldNodeRequest, v1.WorldNodeResponse](
			httpClient,
			baseURL+WorldNodeServiceCreateWorldNodeProcedure,
			connect.WithSchema(worldNodeServiceMethods.ByName("CreateWorldNode")),
			connect.WithClientOptions(opts...),
		),
		getWorldNode: connect.NewClient[v1.GetWorldNodeRequest, v1.WorldNodeResponse](
			httpClient,
			baseURL+WorldNodeServiceGetWorldNodeProcedure,
			connect.WithSchema(worldNodeServiceMethods.ByName("GetWorldNode")),
			connect.WithClientOptions(opts...),
		),
		updateWorldNode: connect.NewClient[v1.UpdateWorldNodeRequest, v1.WorldNodeResponse](
			httpClient,
			baseURL+WorldNodeServiceUpdateWorldNodeProcedure,
			connect.WithSchema(worldNodeServiceMethods.ByName("UpdateWorldNode")),
			connect.WithClientOptions(opts...),
		),
		deleteWorldNode: connect.NewClient[v1.DeleteWorldNodeRequest, v1.WorldNodeResponse](
			httpClient,
			baseURL+WorldNodeServiceDeleteWorldNodeProcedure,
			connect.WithSchema(worldNodeServiceMethods.ByName("DeleteWorldNode")),
			connect.WithClientOptions(opts...),
		),
		listWorldNodes: connect.NewClient[v1.ListWorldNodesRequest, v1.ListWorldNodesResponse](
			httpClient,
			baseURL+WorldNodeServiceListWorldNodesProcedure,
			connect.WithSchema(worldNodeServiceMethods.ByName("ListWorldNodes")),
			connect.WithClientOptions(opts...),
		),
		createWorldNodeFeature: connect.NewClient[v1.CreateWorldNodeFeatureRequest, v1.WorldNodeFeatureResponse](
			httpClient,
			baseURL+WorldNodeServiceCreateWorldNodeFeatureProcedure,
			connect.WithSchema(worldNodeServiceMethods.ByName("CreateWorldNodeFeature")),
			connect.WithClientOptions(opts...),
		),
		getWorldNodeFeature: connect.NewClient[v1.GetWorldNodeFeatureRequest, v1.WorldNodeFeatureResponse](
			httpClient,
			baseURL+WorldNodeServiceGetWorldNodeFeatureProcedure,
			connect.WithSchema(worldNodeServiceMethods.ByName("GetWorldNodeFeature")),
			connect.WithClientOptions(opts...),
		),
		updateWorldNodeFeature: connect.NewClient[v1.UpdateWorldNodeFeatureRequest, v1.WorldNodeFeatureResponse](
			httpClient,
			baseURL+WorldNodeServiceUpdateWorldNodeFeatureProcedure,
			connect.WithSchema(worldNodeServiceMethods.ByName("UpdateWorldNodeFeature")),
			connect.WithClientOptions(opts...),
		),
		deleteWorldNodeFeature: connect.NewClient[v1.DeleteWorldNodeFeatureRequest, v1.WorldNodeFeatureResponse](
			httpClient,
			baseURL+WorldNodeServiceDeleteWorldNodeFeatureProcedure,
			connect.WithSchema(worldNodeServiceMethods.ByName("DeleteWorldNodeFeature")),
			connect.WithClientOptions(opts...),
		),
		listWorldNodeFeatures: connect.NewClient[v1.ListWorldNodeFeaturesRequest, v1.ListWorldNodeFeaturesResponse](
			httpClient,
			baseURL+WorldNodeServiceListWorldNodeFeaturesProcedure,
			connect.WithSchema(worldNodeServiceMethods.ByName("ListWorldNodeFeatures")),
			connect.WithClientOptions(opts...),
		),
	}
}

// worldNodeServiceClient implements WorldNodeServiceClient.
type worldNodeServiceClient struct {
	createWorldNode        *connect.Client[v1.CreateWorldNodeRequest, v1.WorldNodeResponse]
	getWorldNode           *connect.Client[v1.GetWorldNodeRequest, v1.WorldNodeResponse]
	updateWorldNode        *connect.Client[v1.UpdateWorldNodeRequest, v1.WorldNodeResponse]
	deleteWorldNode        *connect.Client[v1.DeleteWorldNodeRequest, v1.WorldNodeResponse]
	listWorldNodes         *connect.Client[v1.ListWorldNodesRequest, v1.ListWorldNodesResponse]
	createWorldNodeFeature *connect.Client[v1.CreateWorldNodeFeatureRequest, v1.WorldNodeFeatureResponse]
	getWorldNodeFeature    *connect.Client[v1.GetWorldNodeFeatureRequest, v1.WorldNodeFeatureResponse]
	updateWorldNodeFeature *connect.Client[v1.UpdateWorldNodeFeatureRequest, v1.WorldNodeFeatureResponse]
	deleteWorldNodeFeature *connect.Client[v1.DeleteWorldNodeFeatureRequest, v1.WorldNodeFeatureResponse]
	listWorldNodeFeatures  *connect.Client[v1.ListWorldNodeFeaturesRequest, v1.ListWorldNodeFeaturesResponse]
}

// CreateWorldNode calls game.v1.WorldNodeService.CreateWorldNode.
func (c *worldNodeServiceClient) CreateWorldNode(ctx context.Context, req *connect.Request[v1.CreateWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error) {
	return c.createWorldNode.CallUnary(ctx, req)
}

// GetWorldNode calls game.v1.WorldNodeService.GetWorldNode.
func (c *worldNodeServiceClient) GetWorldNode(ctx context.Context, req *connect.Request[v1.GetWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error) {
	return c.getWorldNode.CallUnary(ctx, req)
}

// UpdateWorldNode calls game.v1.WorldNodeService.UpdateWorldNode.
func (c *worldNodeServiceClient) UpdateWorldNode(ctx context.Context, req *connect.Request[v1.UpdateWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error) {
	return c.updateWorldNode.CallUnary(ctx, req)
}

// DeleteWorldNode calls game.v1.WorldNodeService.DeleteWorldNode.
func (c *worldNodeServiceClient) DeleteWorldNode(ctx context.Context, req *connect.Request[v1.DeleteWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error) {
	return c.deleteWorldNode.CallUnary(ctx, req)
}

// ListWorldNodes calls game.v1.WorldNodeService.ListWorldNodes.
func (c *worldNodeServiceClient) ListWorldNodes(ctx context.Context, req *connect.Request[v1.ListWorldNodesRequest]) (*connect.Response[v1.ListWorldNodesResponse], error) {
	return c.listWorldNodes.CallUnary(ctx, req)
}

// CreateWorldNodeFeature calls game.v1.WorldNodeService.CreateWorldNodeFeature.
func (c *worldNodeServiceClient) CreateWorldNodeFeature(ctx context.Context, req *connect.Request[v1.CreateWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error) {
	return c.createWorldNodeFeature.CallUnary(ctx, req)
}

// GetWorldNodeFeature calls game.v1.WorldNodeService.GetWorldNodeFeature.
func (c *worldNodeServiceClient) GetWorldNodeFeature(ctx context.Context, req *connect.Request[v1.GetWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error) {
	return c.getWorldNodeFeature.CallUnary(ctx, req)
}

// UpdateWorldNodeFeature calls game.v1.WorldNodeService.UpdateWorldNodeFeature.
func (c *worldNodeServiceClient) UpdateWorldNodeFeature(ctx context.Context, req *connect.Request[v1.UpdateWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error) {
	return c.updateWorldNodeFeature.CallUnary(ctx, req)
}

// DeleteWorldNodeFeature calls game.v1.WorldNodeService.DeleteWorldNodeFeature.
func (c *worldNodeServiceClient) DeleteWorldNodeFeature(ctx context.Context, req *connect.Request[v1.DeleteWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error) {
	return c.deleteWorldNodeFeature.CallUnary(ctx, req)
}

// ListWorldNodeFeatures calls game.v1.WorldNodeService.ListWorldNodeFeatures.
func (c *worldNodeServiceClient) ListWorldNodeFeatures(ctx context.Context, req *connect.Request[v1.ListWorldNodeFeaturesRequest]) (*connect.Response[v1.ListWorldNodeFeaturesResponse], error) {
	return c.listWorldNodeFeatures.CallUnary(ctx, req)
}

// WorldNodeServiceHandler is an implementation of the game.v1.WorldNodeService service.
type WorldNodeServiceHandler interface {
	CreateWorldNode(context.Context, *connect.Request[v1.CreateWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error)
	GetWorldNode(context.Context, *connect.Request[v1.GetWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error)
	UpdateWorldNode(context.Context, *connect.Request[v1.UpdateWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error)
	DeleteWorldNode(context.Context, *connect.Request[v1.DeleteWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error)
	ListWorldNodes(context.Context, *connect.Request[v1.ListWorldNodesRequest]) (*connect.Response[v1.ListWorldNodesResponse], error)
	CreateWorldNodeFeature(context.Context, *connect.Request[v1.CreateWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error)
	GetWorldNodeFeature(context.Context, *connect.Request[v1.GetWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error)
	UpdateWorldNodeFeature(context.Context, *connect.Request[v1.UpdateWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error)
	DeleteWorldNodeFeature(context.Context, *connect.Request[v1.DeleteWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error)
	ListWorldNodeFeatures(context.Context, *connect.Request[v1.ListWorldNodeFeaturesRequest]) (*connect.Response[v1.ListWorldNodeFeaturesResponse], error)
}

// NewWorldNodeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorldNodeServiceHandler(svc WorldNodeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	worldNodeServiceMethods := v1.File_game_v1_proto.Services().ByName("WorldNodeService").Methods()
	worldNodeServiceCreateWorldNodeHandler := connect.NewUnaryHandler(
		WorldNodeServiceCreateWorldNodeProcedure,
		svc.CreateWorldNode,
		connect.WithSchema(worldNodeServiceMethods.ByName("CreateWorldNode")),
		connect.WithHandlerOptions(opts...),
	)
	worldNodeServiceGetWorldNodeHandler := connect.NewUnaryHandler(
		WorldNodeServiceGetWorldNodeProcedure,
		svc.GetWorldNode,
		connect.WithSchema(worldNodeServiceMethods.ByName("GetWorldNode")),
		connect.WithHandlerOptions(opts...),
	)
	worldNodeServiceUpdateWorldNodeHandler := connect.NewUnaryHandler(
		WorldNodeServiceUpdateWorldNodeProcedure,
		svc.UpdateWorldNode,
		connect.WithSchema(worldNodeServiceMethods.ByName("UpdateWorldNode")),
		connect.WithHandlerOptions(opts...),
	)
	worldNodeServiceDeleteWorldNodeHandler := connect.NewUnaryHandler(
		WorldNodeServiceDeleteWorldNodeProcedure,
		svc.DeleteWorldNode,
		connect.WithSchema(worldNodeServiceMethods.ByName("DeleteWorldNode")),
		connect.WithHandlerOptions(opts...),
	)
	worldNodeServiceListWorldNodesHandler := connect.NewUnaryHandler(
		WorldNodeServiceListWorldNodesProcedure,
		svc.ListWorldNodes,
		connect.WithSchema(worldNodeServiceMethods.ByName("ListWorldNodes")),
		connect.WithHandlerOptions(opts...),
	)
	worldNodeServiceCreateWorldNodeFeatureHandler := connect.NewUnaryHandler(
		WorldNodeServiceCreateWorldNodeFeatureProcedure,
		svc.CreateWorldNodeFeature,
		connect.WithSchema(worldNodeServiceMethods.ByName("CreateWorldNodeFeature")),
		connect.WithHandlerOptions(opts...),
	)
	worldNodeServiceGetWorldNodeFeatureHandler := connect.NewUnaryHandler(
		WorldNodeServiceGetWorldNodeFeatureProcedure,
		svc.GetWorldNodeFeature,
		connect.WithSchema(worldNodeServiceMethods.ByName("GetWorldNodeFeature")),
		connect.WithHandlerOptions(opts...),
	)
	worldNodeServiceUpdateWorldNodeFeatureHandler := connect.NewUnaryHandler(
		WorldNodeServiceUpdateWorldNodeFeatureProcedure,
		svc.UpdateWorldNodeFeature,
		connect.WithSchema(worldNodeServiceMethods.ByName("UpdateWorldNodeFeature")),
		connect.WithHandlerOptions(opts...),
	)
	worldNodeServiceDeleteWorldNodeFeatureHandler := connect.NewUnaryHandler(
		WorldNodeServiceDeleteWorldNodeFeatureProcedure,
		svc.DeleteWorldNodeFeature,
		connect.WithSchema(worldNodeServiceMethods.ByName("DeleteWorldNodeFeature")),
		connect.WithHandlerOptions(opts...),
	)
	worldNodeServiceListWorldNodeFeaturesHandler := connect.NewUnaryHandler(
		WorldNodeServiceListWorldNodeFeaturesProcedure,
		svc.ListWorldNodeFeatures,
		connect.WithSchema(worldNodeServiceMethods.ByName("ListWorldNodeFeatures")),
		connect.WithHandlerOptions(opts...),
	)
	return "/game.v1.WorldNodeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorldNodeServiceCreateWorldNodeProcedure:
			worldNodeServiceCreateWorldNodeHandler.ServeHTTP(w, r)
		case WorldNodeServiceGetWorldNodeProcedure:
			worldNodeServiceGetWorldNodeHandler.ServeHTTP(w, r)
		case WorldNodeServiceUpdateWorldNodeProcedure:
			worldNodeServiceUpdateWorldNodeHandler.ServeHTTP(w, r)
		case WorldNodeServiceDeleteWorldNodeProcedure:
			worldNodeServiceDeleteWorldNodeHandler.ServeHTTP(w, r)
		case WorldNodeServiceListWorldNodesProcedure:
			worldNodeServiceListWorldNodesHandler.ServeHTTP(w, r)
		case WorldNodeServiceCreateWorldNodeFeatureProcedure:
			worldNodeServiceCreateWorldNodeFeatureHandler.ServeHTTP(w, r)
		case WorldNodeServiceGetWorldNodeFeatureProcedure:
			worldNodeServiceGetWorldNodeFeatureHandler.ServeHTTP(w, r)
		case WorldNodeServiceUpdateWorldNodeFeatureProcedure:
			worldNodeServiceUpdateWorldNodeFeatureHandler.ServeHTTP(w, r)
		case WorldNodeServiceDeleteWorldNodeFeatureProcedure:
			worldNodeServiceDeleteWorldNodeFeatureHandler.ServeHTTP(w, r)
		case WorldNodeServiceListWorldNodeFeaturesProcedure:
			worldNodeServiceListWorldNodeFeaturesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorldNodeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorldNodeServiceHandler struct{}

func (UnimplementedWorldNodeServiceHandler) CreateWorldNode(context.Context, *connect.Request[v1.CreateWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldNodeService.CreateWorldNode is not implemented"))
}

func (UnimplementedWorldNodeServiceHandler) GetWorldNode(context.Context, *connect.Request[v1.GetWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldNodeService.GetWorldNode is not implemented"))
}

func (UnimplementedWorldNodeServiceHandler) UpdateWorldNode(context.Context, *connect.Request[v1.UpdateWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldNodeService.UpdateWorldNode is not implemented"))
}

func (UnimplementedWorldNodeServiceHandler) DeleteWorldNode(context.Context, *connect.Request[v1.DeleteWorldNodeRequest]) (*connect.Response[v1.WorldNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldNodeService.DeleteWorldNode is not implemented"))
}

func (UnimplementedWorldNodeServiceHandler) ListWorldNodes(context.Context, *connect.Request[v1.ListWorldNodesRequest]) (*connect.Response[v1.ListWorldNodesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldNodeService.ListWorldNodes is not implemented"))
}

func (UnimplementedWorldNodeServiceHandler) CreateWorldNodeFeature(context.Context, *connect.Request[v1.CreateWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldNodeService.CreateWorldNodeFeature is not implemented"))
}

func (UnimplementedWorldNodeServiceHandler) GetWorldNodeFeature(context.Context, *connect.Request[v1.GetWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldNodeService.GetWorldNodeFeature is not implemented"))
}

func (UnimplementedWorldNodeServiceHandler) UpdateWorldNodeFeature(context.Context, *connect.Request[v1.UpdateWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldNodeService.UpdateWorldNodeFeature is not implemented"))
}

func (UnimplementedWorldNodeServiceHandler) DeleteWorldNodeFeature(context.Context, *connect.Request[v1.DeleteWorldNodeFeatureRequest]) (*connect.Response[v1.WorldNodeFeatureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldNodeService.DeleteWorldNodeFeature is not implemented"))
}

func (UnimplementedWorldNodeServiceHandler) ListWorldNodeFeatures(context.Context, *connect.Request[v1.ListWorldNodeFeaturesRequest]) (*connect.Response[v1.ListWorldNodeFeaturesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.WorldNodeService.ListWorldNodeFeatures is not implemented"))
}
